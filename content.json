{"meta":{"title":"邱邱邱邱的个人博客","subtitle":null,"description":null,"author":"萌萌哒的邱邱邱邱","url":"https://qiuruolin.github.io"},"pages":[],"posts":[{"title":"使用iconfont创建项目图标","slug":"iconfont","date":"2017-10-30T16:06:39.000Z","updated":"2017-10-31T02:59:26.000Z","comments":true,"path":"2017/10/31/iconfont/","link":"","permalink":"https://qiuruolin.github.io/2017/10/31/iconfont/","excerpt":"在学习他人网站代码时，我常常会发现前端开发人员习惯使用1&lt;i class=\"iconfont icon-time\"&gt;&lt;/i&gt; 来生成页面的图标，这打破了我们传统的方式——将icon图标以png等图片的形式下载下来，然后通过img标签引入页面中。在刚开始接触到这种方式时，我感到不解，想要试图在css文件中找到相应类的样式设置，认为是在css中设置了背景图，找寻无果…最近想要充实一下个人博客，也就想着要把这次学习的心路历程记录下来，以供后续的深入学习。初次学习可能有些地方讲解的不是很细致，还请各位不吝赐教～ 使用Iconfont的优点Iconfont其实就是指用字体文件取代图片文件，来展示图标、特殊字体等元素的一种方法。主要有以下4个优点 加载文件体积小，提高加载速度","text":"在学习他人网站代码时，我常常会发现前端开发人员习惯使用1&lt;i class=\"iconfont icon-time\"&gt;&lt;/i&gt; 来生成页面的图标，这打破了我们传统的方式——将icon图标以png等图片的形式下载下来，然后通过img标签引入页面中。在刚开始接触到这种方式时，我感到不解，想要试图在css文件中找到相应类的样式设置，认为是在css中设置了背景图，找寻无果…最近想要充实一下个人博客，也就想着要把这次学习的心路历程记录下来，以供后续的深入学习。初次学习可能有些地方讲解的不是很细致，还请各位不吝赐教～ 使用Iconfont的优点Iconfont其实就是指用字体文件取代图片文件，来展示图标、特殊字体等元素的一种方法。主要有以下4个优点 加载文件体积小，提高加载速度 可以直接通过css的font-size，color修改它的大小和颜色，可以缩放多个尺寸的图标，提高图标的可复用性 支持一些css3对文字的效果，例如：阴影、旋转、透明度等 兼容低版本浏览器相对于我们传统的将icon下载为图片的形式，使用iconfont确实方便不少。当我们项目要修改主色调时，iconfont只需要修改css中颜色属性即可，而传统模式则需要你重新下载，这样不仅增加了我们的开发时间，而且会让前端开发工作变得枯燥无味。 Iconfont使用流程在这里我们需要使用到第三方Iconfont在线服务（例如： 阿里巴巴Iconfont平台 ），个人比较偏向于阿里巴巴Iconfont平台，而在此文中也是在阿里巴巴Iconfont平台上进行操作的。 首先，我们打开阿里巴巴Iconfont平台（ps:使用阿里巴巴Iconfont平台需要你有github账号或者微博账号） 接下来，我们搜索我们想要的图标，建议使用英文搜索，匹配的icon可能更多哦～ 回车以后，你会看到很多有关于time的icon图标，选择你需要的那个，并添加至购物车中（如未登录的话，此时会要求你先登录）加入成功后你可以在右上角购物车处看到你所添加的icon 依此，你可以在项目中添加很多icon图标，这里就不一一演示了 接下来，我们将购物车中所有的icon图标打包在一个新建的项目中添加成功后，你可以看到你创建的项目中有你所添加的所有icon图标点击下载至本地，将zip文件解压后其中的文件如下 接下来，就是如何在项目中使用了在原来的html中我使用的是传统方式，将icon以图片的形式引入可以看到的效果如下将刚刚解压的文件放置在项目的根目录下，可以对文件进行重命名，为了方便我重命名为icon-fonts，当前项目目录如下 接下来我们在头部引入icon-fonts中的iconfont.css文件并使用i标签来替换传统方式 其中iconfont是必须的类名，icon-time是你在阿里巴巴Iconfont平台创建的项目中图标所对应的类名，如下图img是我自己创建的用来定位的css类你会发现icon已经成功的被我们引入了，并且替换了传统的img标签 你可以在css中任意设置icon图标的大小以及颜色，如下： 总结写到这里，也差不多结束了，在这篇文章里我简单介绍了iconfont在项目中的使用，在实际运用中，你可以把项目中所需要的图标都以这种方式引入，这样在用户要求更换icon主色调时，就仅需要统一修改icon图标的颜色即可，而不需要重新下载icon图片，这样也就在一定程度上减少了项目的开发时间，提高了项目的开发质量，更重要的是前端开发人员不会因为重复无用功儿感觉枯燥无味。 这些只是一些小小的应用，希望能对大家有所帮助～","categories":[],"tags":[{"name":"iconfont 项目图标icon","slug":"iconfont-项目图标icon","permalink":"https://qiuruolin.github.io/tags/iconfont-项目图标icon/"}]},{"title":"使用webpack搭建vue项目——入门","slug":"webpack-vue","date":"2017-10-25T03:11:50.000Z","updated":"2017-10-28T03:22:52.000Z","comments":true,"path":"2017/10/25/webpack-vue/","link":"","permalink":"https://qiuruolin.github.io/2017/10/25/webpack-vue/","excerpt":"vue以数据为驱动，是近年来比较火的一个轻量级的前后端分离的框架，前段时间学习了vue的一些基本知识，明白了vue中指令等的使用，个人觉得较难的一部分当属于使用vue进行组件化开发，在vue.js专业中文开发者社区上有不少大牛们使用vue重构的一些例子，比如豆瓣，饿了么等，大家可以clone下来自己重构一下，建议初学者在豆瓣和饿了么两个中先选择豆瓣的例子，豆瓣的例子会相对简单直观一些。我在刚学习使用vue进行组件化开发时，常常会使用 1$ vue init webpack project-name 来初始化一个vue项目，接着在这个初始化完成的项目中进行vue的组件化开发。我们可能明白每一个配置文件以及文件夹中的相关内容，但使用webpack构建vue项目的过程又是怎样的？这就不得而知了。随着后来的学习，我开始自己慢慢使用webpack从零构建vue项目，踩了很多坑，可能也不是很深入，但是总想着能把这次过程写下来，以便后续的深入学习，初次学习可能理解以及步骤上会有偏差，还请各位不吝赐教～ webpack构建vue项目流程安装","text":"vue以数据为驱动，是近年来比较火的一个轻量级的前后端分离的框架，前段时间学习了vue的一些基本知识，明白了vue中指令等的使用，个人觉得较难的一部分当属于使用vue进行组件化开发，在vue.js专业中文开发者社区上有不少大牛们使用vue重构的一些例子，比如豆瓣，饿了么等，大家可以clone下来自己重构一下，建议初学者在豆瓣和饿了么两个中先选择豆瓣的例子，豆瓣的例子会相对简单直观一些。我在刚学习使用vue进行组件化开发时，常常会使用 1$ vue init webpack project-name 来初始化一个vue项目，接着在这个初始化完成的项目中进行vue的组件化开发。我们可能明白每一个配置文件以及文件夹中的相关内容，但使用webpack构建vue项目的过程又是怎样的？这就不得而知了。随着后来的学习，我开始自己慢慢使用webpack从零构建vue项目，踩了很多坑，可能也不是很深入，但是总想着能把这次过程写下来，以便后续的深入学习，初次学习可能理解以及步骤上会有偏差，还请各位不吝赐教～ webpack构建vue项目流程安装 首先需要你已下载安装node.js 还没有下载安装？戳这里进入Node.js中文网进行下载安装在你习惯使用的工作目录下新建文件夹，在这里我新建了一个名为webpack-vue-blog的文件夹（ps:项目名称中不可以含有空格，这在初始化时会报错的～大家注意一下，建议使用-或_代替），打开你的终端，进入到webpack-vue-blog的工作目录，使用1$ npm init //初始化并自动创建package.json文件，npm是node.js的命令 接下来是一些项目的相关信息，一路按enter键就可以了，之后你可以在package.json文件中看到项目的相关信息 这里建议大家可以下载安装一下cnpm淘宝npm镜像，因为npm安装插件是从国外服务器下载，受网络影响大，可能出现异常，使用cnpm的话可以在一定程度上提高我们模块的下载安装速度1$ npm install -g cnpm --registry=https://registry.npm.taobao.org 接下来就要安装vue webpack等相关的模块，在这里先大致介绍一下相关的命令 使用npm安装插件：命令提示符执行npm(cnpm) install [-g] [–save-dev] -g：全局安装 –save：将保存配置信息至package.json（package.json是nodejs项目配置文件） -dev：保存至package.json的devDependencies节点，不指定-dev将保存至dependencies节点 12345678910//安装vue$ cnpm install --save vue //安装webpack以及webpack测试服务器，默认安装是1.0版本的，所以必须指定版本号$ cnpm install --save-dev webpack@^2.1.0-beta.25 webpack-dev-server@^2.1.0-beta.9 //安装babel，一般的浏览器是不认识es6语法的，babel的作用是将ES6代码转为ES5代码，从而编译成浏览器认识的语法$ cnpm install --save-dev babel-core babel-loader babel-preset-es2015//用来解析vue的组件，.vue后缀的文件$ cnpm install --save-dev vue-loader vue-template-compiler//用来解析css$ cnpm install --save-dev css-loader file-loader 需要用到的模块我们已经安装完之后，就可以开始在package.json看到我们所安装的依赖包，在webpack-vue-blog目录下也会生成名为node_modules的文件夹 编码安装了这么多的依赖包，终于要进入编码的阶段了，打开你的编辑器，这里我使用的是VS Code工具进行编码，这个工具比较小，但是要安装相关的插件，我这里不详细介绍了哈，感兴趣的萌友们可以安装使用一下。现在我们的webpack-vue-blog工程目录下只有node_modules文件夹以及package.json文件接下来我们在根目录下新建src文件夹用来存放我们项目的源码，在src目录下新建App.vue以及main.js文件，其中App.vue是我们的入口页面，main.js是应用初始化入口文件1234567891011121314151617181920//App.vue&lt;template&gt; &lt;div id=\"app\"&gt; &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data () &#123; return &#123; msg: 'This is your first webpack-vue project!' &#125; &#125;&#125;&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt; 123456789//main.jsimport Vue from 'vue'import App from './App.vue' // 将同目录下的App.vue导入/* 实例化一个vue */new Vue(&#123; el: '#app', render: h =&gt; h(App)&#125;) render函数是渲染一个视图，然后提供给el挂载，如果没有render那页面什么都不会出来 Vue2.0的渲染过程： Vue实例选项对象的 render 方法作为一个函数，接受传入的参数 h 函数，返回 h(App) 的函数调用结果 Vue 在创建 Vue 实例时，通过调用 render 方法来渲染实例的 DOM 树 Vue 在调用 render 方法时，会传入一个 createElement 函数作为参数，也就是这里的 h 的实参是 createElement 函数，然后 createElement 会以 APP 为参数进行调用 [官方文档]:123456render: function (createElement) &#123; return createElement( 'h' + this.level, // tag name 标签名称 this.$slots.default // 子组件中的阵列 )&#125; 接下来我们将进入webpack部分 戳进来学习webpack中文文档，在根目录下新建名为webpack.config.js的文件，用来进行相关的配置 webpack入口出口等核心概念中文文档 123456789101112131415161718192021222324252627282930313233//webpack.config.jsvar path = require('path');var webpack = require('webpack');module.exports = &#123; /* 入口文件 */ entry: './src/main.js', /* 输出 */ output: &#123; /* 输出目录，没有则新建 通过__dirname获得当前文件所在目录的完整目录名：*/ path: path.resolve(__dirname, './dist'), /* 静态目录，可以直接从这里取文件 */ publicPath: '/dist/', /* 文件名 */ filename: 'build.js' &#125;, module: &#123; rules: [ /* 用来解析vue后缀的文件 */ &#123; test: /\\.vue$/, loader: 'vue-loader' &#125;, /* 用babel来解析js文件并把es6的语法转换成浏览器认识的语法 */ &#123; test: /\\.js$/, loader: 'babel-loader', /* 排除模块安装目录的文件 */ exclude: /node_modules/ &#125; ] &#125;&#125; 我们当前的项目目录为：接下来我们将进行webpack的核心功能——模块打包1$ cnpm install -g webpack@^2.1.0-beta.25 //全局安装webpack，以便使用webpack命令进行打包等 进入webpack-vue-blog目录下并运行命令1$ webpack 执行完毕后你可以发现在根目录下新增了一个名为dist的文件夹，其中有个build.js文件，而这输出的文件夹名及文件名正是我们在webpack.config.js中配置好的。这么久还不能看效果，急死人了，不要着急，已经快要接近尾声啦！！接下来，我们在根目录下新建名为index.html的文件，并引入我们刚刚生成的build.js文件12345678910111213//index.html&lt;!doctype html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=0, minimum-scale=1.0, maximum-scale=1.0\"&gt; &lt;title&gt;webpack-vue-blog&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"app\"&gt;&lt;/div&gt; &lt;script src=\"./dist/build.js\"&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 接下来运行命令1$ webpack-dev-server 稍微等待一会，就会提示你已经运行成功啦，并且可以通过访问localhost:8080来访问我们的第一个使用webpack构建的vue项目。这样我们的使用webpack构建的vue项目也算是搭建完成了。 结语这是自搭建个人博客网站以来着手写的第一篇博客，当然，这只是一个很简单的项目，在后续深入学习中，你会发现程序员们会将babel的相关配置保存在.babelrc配置文件中，比如：相信大家在学习babel相关教程时会了解到 Babel入门推荐教程 希望能对萌友们有所帮助～","categories":[],"tags":[{"name":"webpack vue","slug":"webpack-vue","permalink":"https://qiuruolin.github.io/tags/webpack-vue/"}]}]}