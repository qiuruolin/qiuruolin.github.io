<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[echarts源码解读《三》：echarts源码之Component分析]]></title>
      <url>/2019/05/22/echarts-3/</url>
      <content type="html"><![CDATA[<blockquote>
<p>分析完echarts简单的结构之后，我们就进入到了Component源码解读，在这篇博文中，我将主要介绍各Component的渲染过程以及其使用的zrender graphic。希望和小伙伴们一起进步呀！！加油！！</p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>echarts对Component的定义呢，可以认为是除Series外的其他配置项，在这篇博文中我们将探讨<strong>title（图标标题）、legend（图例组件）、AxisPointer（坐标轴指示器）、坐标系以及坐标轴</strong>这些Component。</p>
<p>用户通过传递option对象来设置相应的Component。</p>
<p>在这部分中echarts采用了Model以及View的架构来管理Component：</p>
<ul>
<li>Model：model/Component.js 管理Component数据</li>
</ul>
<a id="more"></a>
<ul>
<li>View：view/Component.js 负责渲染Component视图</li>
</ul>
<h1 id="Model层"><a href="#Model层" class="headerlink" title="Model层"></a>Model层</h1><p><strong>model/Component.js</strong>。Component扩展自Model（Model是Echarts中最基本的元素，其定义了<strong>mergeOption</strong>等方法，混合了LineStyle、AraeStyle、ItemStyle以及TextStyle），重写了init及mergeOption等方法，定义了mergeDefaultAndTheme、getDefaultOption等方法以及defaultOption（Component默认配置）、componentIndex等属性。</p>
<h1 id="View层"><a href="#View层" class="headerlink" title="View层"></a>View层</h1><p><strong>view/Component.js</strong>。Component中定义了group等属性以及init、render、dispose等方法。</p>
<h1 id="快速扩展"><a href="#快速扩展" class="headerlink" title="快速扩展"></a>快速扩展</h1><p>在echarts中定义了<strong>extendComponentModel</strong>以及<strong>extendComponentView</strong>方法，可以让Component对Model以及View进行快速扩展</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">extendComponentModel</span>(<span class="params">opts</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ComponentModel.extend(opts);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">extendComponentView</span>(<span class="params">opts</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ComponentView.extend(opts);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Title"><a href="#Title" class="headerlink" title="Title"></a>Title</h1><p>title是我们在使用echarts图表时设置的标题组件，简单的🌰：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: &#123;</span><br><span class="line">    left: <span class="string">'center'</span>,</span><br><span class="line">    text: <span class="string">'例子Title'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>title文件中Model部分通过extendComponentModel方法扩展自Component Model，重写了<strong>defaultOption</strong>属性，用于设置title的默认option。</p>
<p>View部分通过extendComponentView方法扩展Component View，重写了render方法对title进行渲染，主要代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">render: <span class="function"><span class="keyword">function</span> (<span class="params">titleModel, ecModel, api</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 通过zrender的Text图形新建文本元素</span></span><br><span class="line">    <span class="keyword">var</span> textEl = <span class="keyword">new</span> graphic.Text(&#123;</span><br><span class="line">        style: graphic.setTextStyle(&#123;&#125;, textStyleModel, &#123;</span><br><span class="line">            text: titleModel.get(<span class="string">'text'</span>),</span><br><span class="line">            textFill: textStyleModel.getTextColor()</span><br><span class="line">        &#125;, &#123;<span class="attr">disableBox</span>: <span class="literal">true</span>&#125;),</span><br><span class="line">        z2: <span class="number">10</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> textRect = textEl.getBoundingRect();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> subText = titleModel.get(<span class="string">'subtext'</span>);</span><br><span class="line">    <span class="comment">// 创建subText元素</span></span><br><span class="line">    <span class="keyword">var</span> subTextEl = <span class="keyword">new</span> graphic.Text(&#123;</span><br><span class="line">        style: graphic.setTextStyle(&#123;&#125;, subtextStyleModel, &#123;</span><br><span class="line">            text: subText,</span><br><span class="line">            textFill: subtextStyleModel.getTextColor(),</span><br><span class="line">            y: textRect.height + titleModel.get(<span class="string">'itemGap'</span>),</span><br><span class="line">            textVerticalAlign: <span class="string">'top'</span></span><br><span class="line">        &#125;, &#123;<span class="attr">disableBox</span>: <span class="literal">true</span>&#125;),</span><br><span class="line">        z2: <span class="number">10</span></span><br><span class="line">    &#125;);</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    group.add(textEl);</span><br><span class="line">    subText &amp;&amp; group.add(subTextEl);</span><br><span class="line">    <span class="comment">// If no subText, but add subTextEl, there will be an empty line.</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 设定title的位置</span></span><br><span class="line">    <span class="keyword">if</span> (!textAlign) &#123;</span><br><span class="line">        <span class="comment">// Align left if title is on the left. center and right is same</span></span><br><span class="line">        textAlign = titleModel.get(<span class="string">'left'</span>) || titleModel.get(<span class="string">'right'</span>);</span><br><span class="line">        <span class="keyword">if</span> (textAlign === <span class="string">'middle'</span>) &#123;</span><br><span class="line">            textAlign = <span class="string">'center'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Adjust layout by text align</span></span><br><span class="line">        <span class="keyword">if</span> (textAlign === <span class="string">'right'</span>) &#123;</span><br><span class="line">            layoutRect.x += layoutRect.width;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (textAlign === <span class="string">'center'</span>) &#123;</span><br><span class="line">            layoutRect.x += layoutRect.width / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!textBaseline) &#123;</span><br><span class="line">        textBaseline = titleModel.get(<span class="string">'top'</span>) || titleModel.get(<span class="string">'bottom'</span>);</span><br><span class="line">        <span class="keyword">if</span> (textBaseline === <span class="string">'center'</span>) &#123;</span><br><span class="line">            textBaseline = <span class="string">'middle'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (textBaseline === <span class="string">'bottom'</span>) &#123;</span><br><span class="line">            layoutRect.y += layoutRect.height;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (textBaseline === <span class="string">'middle'</span>) &#123;</span><br><span class="line">            layoutRect.y += layoutRect.height / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        textBaseline = textBaseline || <span class="string">'top'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    group.attr(<span class="string">'position'</span>, [layoutRect.x, layoutRect.y]);</span><br><span class="line">    <span class="keyword">var</span> alignStyle = &#123;</span><br><span class="line">        textAlign: textAlign,</span><br><span class="line">        textVerticalAlign: textBaseline</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 设置文本样式</span></span><br><span class="line">    textEl.setStyle(alignStyle);</span><br><span class="line">    subTextEl.setStyle(alignStyle);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 渲染背景</span></span><br><span class="line">    <span class="comment">// Get groupRect again because textAlign has been changed</span></span><br><span class="line">    groupRect = group.getBoundingRect();</span><br><span class="line">    <span class="keyword">var</span> padding = layoutRect.margin;</span><br><span class="line">    <span class="keyword">var</span> style = titleModel.getItemStyle([<span class="string">'color'</span>, <span class="string">'opacity'</span>]);</span><br><span class="line">    style.fill = titleModel.get(<span class="string">'backgroundColor'</span>);</span><br><span class="line">    <span class="keyword">var</span> rect = <span class="keyword">new</span> graphic.Rect(&#123;</span><br><span class="line">        shape: &#123;</span><br><span class="line">            x: groupRect.x - padding[<span class="number">3</span>],</span><br><span class="line">            y: groupRect.y - padding[<span class="number">0</span>],</span><br><span class="line">            width: groupRect.width + padding[<span class="number">1</span>] + padding[<span class="number">3</span>],</span><br><span class="line">            height: groupRect.height + padding[<span class="number">0</span>] + padding[<span class="number">2</span>],</span><br><span class="line">            r: titleModel.get(<span class="string">'borderRadius'</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        style: style,</span><br><span class="line">        silent: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">    graphic.subPixelOptimizeRect(rect);</span><br><span class="line"></span><br><span class="line">    group.add(rect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>title文本渲染主要是通过zrender graphic中的Text进行渲染的，通过zrender Style中定义的setStyle方法对元素进行样式设定。</p>
<h1 id="Legend"><a href="#Legend" class="headerlink" title="Legend"></a>Legend</h1><p>legend为echarts的图例组件，简单的🌰：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">legend: &#123;</span><br><span class="line">    data:[<span class="string">'支出'</span>,<span class="string">'收入'</span>]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>展示效果图如：</p>
<p><img src="/img/echarts/legend.png" alt="legend"></p>
<p>legend分为两种：plain（平面）和scroll（可滚动），接下来我将分别讲解两种类型的legend是如何作用的。</p>
<h2 id="Plain"><a href="#Plain" class="headerlink" title="Plain"></a>Plain</h2><p>legend.plain为平面的legend图例组件，主要包括LegendAction、LegendModel、LegendView文件。</p>
<h3 id="LegendAction"><a href="#LegendAction" class="headerlink" title="LegendAction"></a>LegendAction</h3><p>legendAction文件中注册了legend对外API： legendToggleSelect、legendSelect以及legendUnSelect，主要代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">echarts.registerAction(</span><br><span class="line">    <span class="string">'legendToggleSelect'</span>, <span class="string">'legendselectchanged'</span>,</span><br><span class="line">    zrUtil.curry(legendSelectActionHandler, <span class="string">'toggleSelected'</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">echarts.registerAction(</span><br><span class="line">    <span class="string">'legendSelect'</span>, <span class="string">'legendselected'</span>,</span><br><span class="line">    zrUtil.curry(legendSelectActionHandler, <span class="string">'select'</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">echarts.registerAction(</span><br><span class="line">    <span class="string">'legendUnSelect'</span>, <span class="string">'legendunselected'</span>,</span><br><span class="line">    zrUtil.curry(legendSelectActionHandler, <span class="string">'unSelect'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h3 id="LegendFilter"><a href="#LegendFilter" class="headerlink" title="LegendFilter"></a>LegendFilter</h3><p>legendFilter文件中实现了数据过滤，也就是当legend的isSelected方法返回为false时，则与legend name相同的series的数据则不显示，主要代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">ecModel</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> legendModels = ecModel.findComponents(&#123;</span><br><span class="line">        mainType: <span class="string">'legend'</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (legendModels &amp;&amp; legendModels.length) &#123;</span><br><span class="line">        ecModel.filterSeries(<span class="function"><span class="keyword">function</span> (<span class="params">series</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// If in any legend component the status is not selected.</span></span><br><span class="line">            <span class="comment">// Because in legend series is assumed selected when it is not in the legend data.</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; legendModels.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!legendModels[i].isSelected(series.name)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="LegendModel"><a href="#LegendModel" class="headerlink" title="LegendModel"></a>LegendModel</h3><p>legendModel通过extendComponentModel方法扩展自Component Model，重写了<strong>defaultOption</strong>属性，重写了init方法，定义了select、unSelect、toggleSelected以及isSelected等方法。</p>
<h3 id="LegendView"><a href="#LegendView" class="headerlink" title="LegendView"></a>LegendView</h3><p>legendView通过extendComponentView方法扩展自Component View，重写了init以及render方法对legend进行渲染，主要渲染的代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">render: <span class="function"><span class="keyword">function</span> (<span class="params">legendModel, ecModel, api</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// renderInner中调用了createItem方法创建Legend item</span></span><br><span class="line">    <span class="comment">// 并绑定了click、mouseover、mouseout等事件</span></span><br><span class="line">    <span class="keyword">this</span>.renderInner(itemAlign, legendModel, ecModel, api);</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line">_createItem: <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    name, dataIndex, itemModel, legendModel,</span></span></span><br><span class="line"><span class="function"><span class="params">     legendSymbolType, symbolType,</span></span></span><br><span class="line"><span class="function"><span class="params">     itemAlign, color, selectMode</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 使用util/symbol导出的createSymbol方法，创建相应Type的Symbol图形</span></span><br><span class="line">    itemGroup.add(createSymbol(</span><br><span class="line">        legendSymbolType,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        itemWidth,</span><br><span class="line">        itemHeight,</span><br><span class="line">        isSelected ? color : inactiveColor,</span><br><span class="line">        <span class="comment">// symbolKeepAspect default true for legend</span></span><br><span class="line">        symbolKeepAspect == <span class="literal">null</span> ? <span class="literal">true</span> : symbolKeepAspect</span><br><span class="line">    ));</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 渲染legend文本</span></span><br><span class="line">    itemGroup.add(<span class="keyword">new</span> graphic.Text(&#123;</span><br><span class="line">        style: graphic.setTextStyle(&#123;&#125;, textStyleModel, &#123;</span><br><span class="line">            text: content,</span><br><span class="line">            x: textX,</span><br><span class="line">            y: itemHeight / <span class="number">2</span>,</span><br><span class="line">            textFill: isSelected ? textStyleModel.getTextColor() : inactiveColor,</span><br><span class="line">            textAlign: textAlign,</span><br><span class="line">            textVerticalAlign: <span class="string">'middle'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;));</span><br><span class="line"></span><br><span class="line">     <span class="comment">// Add a invisible rect to increase the area of mouse hover</span></span><br><span class="line">     <span class="comment">// 添加legend的tooltip效果</span></span><br><span class="line">     <span class="keyword">var</span> hitRect = <span class="keyword">new</span> graphic.Rect(&#123;</span><br><span class="line">         shape: itemGroup.getBoundingRect(),</span><br><span class="line">         invisible: <span class="literal">true</span>,</span><br><span class="line">         tooltip: tooltipModel.get(<span class="string">'show'</span>) ? zrUtil.extend(&#123;</span><br><span class="line">             content: name,</span><br><span class="line">             <span class="comment">// Defaul formatter</span></span><br><span class="line">             formatter: legendGlobalTooltipModel.get(<span class="string">'formatter'</span>, <span class="literal">true</span>) || <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                 <span class="keyword">return</span> name;</span><br><span class="line">             &#125;,</span><br><span class="line">             formatterParams: &#123;</span><br><span class="line">                 componentType: <span class="string">'legend'</span>,</span><br><span class="line">                 legendIndex: legendModel.componentIndex,</span><br><span class="line">                 name: name,</span><br><span class="line">                 $vars: [<span class="string">'name'</span>]</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;, tooltipModel.option) : <span class="literal">null</span></span><br><span class="line">      &#125;);</span><br><span class="line">      itemGroup.add(hitRect);</span><br><span class="line">        ...</span><br><span class="line">      <span class="keyword">this</span>.getContentGroup().add(itemGroup);</span><br><span class="line">      ...</span><br><span class="line">      <span class="keyword">return</span> itemGroup;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h2 id="Scroll"><a href="#Scroll" class="headerlink" title="Scroll"></a>Scroll</h2><p>legend.scroll为可滚动的legend图例组件，主要包括ScrollableLegendAction、ScrollableLegendModel、ScrollableLegendView文件。</p>
<h3 id="ScrollableLegendAction"><a href="#ScrollableLegendAction" class="headerlink" title="ScrollableLegendAction"></a>ScrollableLegendAction</h3><p>ScrollableLegendAction文件中注册了legend对外API：legendScroll，主要代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">echarts.registerAction(</span><br><span class="line">    <span class="string">'legendScroll'</span>, <span class="string">'legendscroll'</span>,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">payload, ecModel</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> scrollDataIndex = payload.scrollDataIndex;</span><br><span class="line"></span><br><span class="line">        scrollDataIndex != <span class="literal">null</span> &amp;&amp; ecModel.eachComponent(</span><br><span class="line">            &#123;<span class="attr">mainType</span>: <span class="string">'legend'</span>, <span class="attr">subType</span>: <span class="string">'scroll'</span>, <span class="attr">query</span>: payload&#125;,</span><br><span class="line">            <span class="function"><span class="keyword">function</span> (<span class="params">legendModel</span>) </span>&#123;</span><br><span class="line">                legendModel.setScrollDataIndex(scrollDataIndex);</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h3 id="ScrollableLegendModel"><a href="#ScrollableLegendModel" class="headerlink" title="ScrollableLegendModel"></a>ScrollableLegendModel</h3><p>ScrollableLegendModel通过extend方法扩展自LegendMode，重写了<strong>defaultOption</strong>属性，重写了init方法，定义了setScrollDataIndex以及getOrient等方法。</p>
<h3 id="ScrollableLegendView"><a href="#ScrollableLegendView" class="headerlink" title="ScrollableLegendView"></a>ScrollableLegendView</h3><p>ScrollableLegendView通过extend方法扩展自LegendView，重写了init以及renderInner方法对scrollable legend进行渲染，主要渲染的代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">renderInner: <span class="function"><span class="keyword">function</span> (<span class="params">itemAlign, legendModel, ecModel, api</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> me = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Render content items.</span></span><br><span class="line">    <span class="comment">// 调用LegenView中renderInner渲染基本的legend视图</span></span><br><span class="line">    ScrollableLegendView.superCall(<span class="keyword">this</span>, <span class="string">'renderInner'</span>, itemAlign, legendModel, ecModel, api);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建分页器</span></span><br><span class="line">    <span class="keyword">var</span> controllerGroup = <span class="keyword">this</span>._controllerGroup;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">FIXME:</span> support be 'auto' adapt to size number text length,</span></span><br><span class="line">    <span class="comment">// e.g., '3/12345' should not overlap with the control arrow button.</span></span><br><span class="line">    <span class="keyword">var</span> pageIconSize = legendModel.get(<span class="string">'pageIconSize'</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (!zrUtil.isArray(pageIconSize)) &#123;</span><br><span class="line">        pageIconSize = [pageIconSize, pageIconSize];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    createPageButton(<span class="string">'pagePrev'</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> pageTextStyleModel = legendModel.getModel(<span class="string">'pageTextStyle'</span>);</span><br><span class="line">    controllerGroup.add(<span class="keyword">new</span> graphic.Text(&#123;</span><br><span class="line">        name: <span class="string">'pageText'</span>,</span><br><span class="line">        style: &#123;</span><br><span class="line">            textFill: pageTextStyleModel.getTextColor(),</span><br><span class="line">            font: pageTextStyleModel.getFont(),</span><br><span class="line">            textVerticalAlign: <span class="string">'middle'</span>,</span><br><span class="line">            textAlign: <span class="string">'center'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        silent: <span class="literal">true</span></span><br><span class="line">    &#125;));</span><br><span class="line"></span><br><span class="line">    createPageButton(<span class="string">'pageNext'</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 创建prev&amp;next button</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createPageButton</span>(<span class="params">name, iconIdx</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> pageDataIndexName = name + <span class="string">'DataIndex'</span>;</span><br><span class="line">        <span class="keyword">var</span> icon = graphic.createIcon(</span><br><span class="line">            legendModel.get(<span class="string">'pageIcons'</span>, <span class="literal">true</span>)[legendModel.getOrient().name][iconIdx],</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Buttons will be created in each render, so we do not need</span></span><br><span class="line">                <span class="comment">// to worry about avoiding using legendModel kept in scope.</span></span><br><span class="line">                onclick: zrUtil.bind(</span><br><span class="line">                    me._pageGo, me, pageDataIndexName, legendModel, api</span><br><span class="line">                )</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                x: -pageIconSize[<span class="number">0</span>] / <span class="number">2</span>,</span><br><span class="line">                y: -pageIconSize[<span class="number">1</span>] / <span class="number">2</span>,</span><br><span class="line">                width: pageIconSize[<span class="number">0</span>],</span><br><span class="line">                height: pageIconSize[<span class="number">1</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">        icon.name = name;</span><br><span class="line">        controllerGroup.add(icon);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="AxisPointer"><a href="#AxisPointer" class="headerlink" title="AxisPointer"></a>AxisPointer</h1><p>AxisPointer为echarts中的坐标指示器，包括直角坐标以及极坐标等。</p>
<h2 id="AxisPointer-js"><a href="#AxisPointer-js" class="headerlink" title="AxisPointer.js"></a>AxisPointer.js</h2><p>axisPointer.js文件中注册了axisPointer对外api，主要代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echarts.registerAction(&#123;</span><br><span class="line">    type: <span class="string">'updateAxisPointer'</span>,</span><br><span class="line">    event: <span class="string">'updateAxisPointer'</span>,</span><br><span class="line">    update: <span class="string">':updateAxisPointer'</span></span><br><span class="line">&#125;, axisTrigger);</span><br></pre></td></tr></table></figure>
<p>存储coordSysAxesInfo信息，主要代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">echarts.registerProcessor(echarts.PRIORITY.PROCESSOR.STATISTIC, <span class="function"><span class="keyword">function</span> (<span class="params">ecModel, api</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Build axisPointerModel, mergin tooltip.axisPointer model for each axis.</span></span><br><span class="line">    <span class="comment">// allAxesInfo should be updated when setOption performed.</span></span><br><span class="line">    ecModel.getComponent(<span class="string">'axisPointer'</span>).coordSysAxesInfo</span><br><span class="line">        = axisPointerModelHelper.collect(ecModel, api);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="AxisPointerModel"><a href="#AxisPointerModel" class="headerlink" title="AxisPointerModel"></a>AxisPointerModel</h3><p>AxisPointerModel通过extendComponentModel方法扩展自Component Model，重写了<strong>defaultOption</strong>属性。</p>
<h3 id="AxisPointerView"><a href="#AxisPointerView" class="headerlink" title="AxisPointerView"></a>AxisPointerView</h3><p>AxisPointerView过extendComponentModel方法扩展自Component View，重写了render、remove以及dispose方法。</p>
<h3 id="BaseAxisPointer"><a href="#BaseAxisPointer" class="headerlink" title="BaseAxisPointer"></a>BaseAxisPointer</h3><p>BaseAxisPointer为CartesianAxisPointer、PolarAxisPointer等的基类，重写了render以及renderHandler等方法。renderHandler主要是定义move、drag等情况时视图更新方法。</p>
<p>render主要代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">render: <span class="function"><span class="keyword">function</span> (<span class="params">axisModel, axisPointerModel, api, forceRender</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">var</span> elOption = &#123;&#125;;</span><br><span class="line">    <span class="comment">// 调用子类的makeElOption方法</span></span><br><span class="line">    <span class="keyword">this</span>.makeElOption(elOption, value, axisModel, axisPointerModel, api);</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建pointer</span></span><br><span class="line">    <span class="keyword">this</span>.createPointerEl(group, elOption, axisModel, axisPointerModel);</span><br><span class="line">    <span class="comment">// 渲染label元素</span></span><br><span class="line">    <span class="keyword">this</span>.createLabelEl(group, elOption, axisModel, axisPointerModel);</span><br><span class="line">    ...</span><br><span class="line">    updateMandatoryProps(group, axisPointerModel, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 渲染handler</span></span><br><span class="line">    <span class="keyword">this</span>._renderHandle(value);</span><br><span class="line">&#125;</span><br><span class="line">createPointerEl: <span class="function"><span class="keyword">function</span> (<span class="params">group, elOption, axisModel, axisPointerModel</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pointerOption = elOption.pointer;</span><br><span class="line">    <span class="keyword">if</span> (pointerOption) &#123;</span><br><span class="line">        <span class="comment">// 通过graphic创建</span></span><br><span class="line">        <span class="keyword">var</span> pointerEl = inner(group).pointerEl = <span class="keyword">new</span> graphic[pointerOption.type](</span><br><span class="line">            clone(elOption.pointer)</span><br><span class="line">        );</span><br><span class="line">        group.add(pointerEl);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">createLabelEl: <span class="function"><span class="keyword">function</span> (<span class="params">group, elOption, axisModel, axisPointerModel</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (elOption.label) &#123;</span><br><span class="line">        <span class="keyword">var</span> labelEl = inner(group).labelEl = <span class="keyword">new</span> graphic.Rect(</span><br><span class="line">            clone(elOption.label)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        group.add(labelEl);</span><br><span class="line">        updateLabelShowHide(labelEl, axisPointerModel);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="CartesianAxisPointer"><a href="#CartesianAxisPointer" class="headerlink" title="CartesianAxisPointer"></a>CartesianAxisPointer</h3><p>CartesianAxisPointer使用extend方法扩展自BaseAxisPointer，重写了makeElOption、getHandleTransform以及updateHandleTransform方法。makeElOption主要代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">makeElOption: <span class="function"><span class="keyword">function</span> (<span class="params">elOption, value, axisModel, axisPointerModel, api</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> axis = axisModel.axis;</span><br><span class="line">    <span class="keyword">var</span> grid = axis.grid;</span><br><span class="line">    <span class="keyword">var</span> axisPointerType = axisPointerModel.get(<span class="string">'type'</span>);</span><br><span class="line">    <span class="keyword">var</span> otherExtent = getCartesian(grid, axis).getOtherAxis(axis).getGlobalExtent();</span><br><span class="line">    <span class="keyword">var</span> pixelValue = axis.toGlobalCoord(axis.dataToCoord(value, <span class="literal">true</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (axisPointerType &amp;&amp; axisPointerType !== <span class="string">'none'</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> elStyle = viewHelper.buildElStyle(axisPointerModel);</span><br><span class="line">        <span class="keyword">var</span> pointerOption = pointerShapeBuilder[axisPointerType](</span><br><span class="line">            axis, pixelValue, otherExtent, elStyle</span><br><span class="line">        );</span><br><span class="line">        pointerOption.style = elStyle;</span><br><span class="line">        elOption.graphicKey = pointerOption.type;</span><br><span class="line">        elOption.pointer = pointerOption;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> layoutInfo = cartesianAxisHelper.layout(grid.model, axisModel);</span><br><span class="line">    viewHelper.buildCartesianSingleLabelElOption(</span><br><span class="line">        value, elOption, layoutInfo, axisModel, axisPointerModel, api</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> pointerShapeBuilder = &#123;</span><br><span class="line">    line: <span class="function"><span class="keyword">function</span> (<span class="params">axis, pixelValue, otherExtent, elStyle</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> targetShape = viewHelper.makeLineShape(</span><br><span class="line">            [pixelValue, otherExtent[<span class="number">0</span>]],</span><br><span class="line">            [pixelValue, otherExtent[<span class="number">1</span>]],</span><br><span class="line">            getAxisDimIndex(axis)</span><br><span class="line">        );</span><br><span class="line">        graphic.subPixelOptimizeLine(&#123;</span><br><span class="line">            shape: targetShape,</span><br><span class="line">            style: elStyle</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            type: <span class="string">'Line'</span>,</span><br><span class="line">            shape: targetShape</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    shadow: <span class="function"><span class="keyword">function</span> (<span class="params">axis, pixelValue, otherExtent, elStyle</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> bandWidth = <span class="built_in">Math</span>.max(<span class="number">1</span>, axis.getBandWidth());</span><br><span class="line">        <span class="keyword">var</span> span = otherExtent[<span class="number">1</span>] - otherExtent[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            type: <span class="string">'Rect'</span>,</span><br><span class="line">            shape: viewHelper.makeRectShape(</span><br><span class="line">                [pixelValue - bandWidth / <span class="number">2</span>, otherExtent[<span class="number">0</span>]],</span><br><span class="line">                [bandWidth, span],</span><br><span class="line">                getAxisDimIndex(axis)</span><br><span class="line">            )</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="SingleAxisPointer"><a href="#SingleAxisPointer" class="headerlink" title="SingleAxisPointer"></a>SingleAxisPointer</h3><p>SingleAxisPointer同CartesianAxisPointer。</p>
<h3 id="PolarAxisPointer"><a href="#PolarAxisPointer" class="headerlink" title="PolarAxisPointer"></a>PolarAxisPointer</h3><p>PolarAxisPointer使用extend扩展自BaseAxisPointer，重写了makeElOption方法，主要代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">makeElOption: <span class="function"><span class="keyword">function</span> (<span class="params">elOption, value, axisModel, axisPointerModel, api</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> axis = axisModel.axis;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (axis.dim === <span class="string">'angle'</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.animationThreshold = <span class="built_in">Math</span>.PI / <span class="number">18</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> polar = axis.polar;</span><br><span class="line">    <span class="keyword">var</span> otherAxis = polar.getOtherAxis(axis);</span><br><span class="line">    <span class="keyword">var</span> otherExtent = otherAxis.getExtent();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> coordValue;</span><br><span class="line">    coordValue = axis[<span class="string">'dataTo'</span> + formatUtil.capitalFirst(axis.dim)](value);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> axisPointerType = axisPointerModel.get(<span class="string">'type'</span>);</span><br><span class="line">    <span class="keyword">if</span> (axisPointerType &amp;&amp; axisPointerType !== <span class="string">'none'</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> elStyle = viewHelper.buildElStyle(axisPointerModel);</span><br><span class="line">        <span class="keyword">var</span> pointerOption = pointerShapeBuilder[axisPointerType](</span><br><span class="line">            axis, polar, coordValue, otherExtent, elStyle</span><br><span class="line">        );</span><br><span class="line">        pointerOption.style = elStyle;</span><br><span class="line">        elOption.graphicKey = pointerOption.type;</span><br><span class="line">        elOption.pointer = pointerOption;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> labelMargin = axisPointerModel.get(<span class="string">'label.margin'</span>);</span><br><span class="line">    <span class="keyword">var</span> labelPos = getLabelPosition(value, axisModel, axisPointerModel, polar, labelMargin);</span><br><span class="line">    viewHelper.buildLabelElOption(elOption, axisModel, axisPointerModel, api, labelPos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> pointerShapeBuilder = &#123;</span><br><span class="line"></span><br><span class="line">    line: <span class="function"><span class="keyword">function</span> (<span class="params">axis, polar, coordValue, otherExtent, elStyle</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> axis.dim === <span class="string">'angle'</span></span><br><span class="line">            ? &#123;</span><br><span class="line">                type: <span class="string">'Line'</span>,</span><br><span class="line">                shape: viewHelper.makeLineShape(</span><br><span class="line">                    polar.coordToPoint([otherExtent[<span class="number">0</span>], coordValue]),</span><br><span class="line">                    polar.coordToPoint([otherExtent[<span class="number">1</span>], coordValue])</span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">            : &#123;</span><br><span class="line">                type: <span class="string">'Circle'</span>,</span><br><span class="line">                shape: &#123;</span><br><span class="line">                    cx: polar.cx,</span><br><span class="line">                    cy: polar.cy,</span><br><span class="line">                    r: coordValue</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    shadow: <span class="function"><span class="keyword">function</span> (<span class="params">axis, polar, coordValue, otherExtent, elStyle</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> bandWidth = <span class="built_in">Math</span>.max(<span class="number">1</span>, axis.getBandWidth());</span><br><span class="line">        <span class="keyword">var</span> radian = <span class="built_in">Math</span>.PI / <span class="number">180</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> axis.dim === <span class="string">'angle'</span></span><br><span class="line">            ? &#123;</span><br><span class="line">                type: <span class="string">'Sector'</span>,</span><br><span class="line">                shape: viewHelper.makeSectorShape(</span><br><span class="line">                    polar.cx, polar.cy,</span><br><span class="line">                    otherExtent[<span class="number">0</span>], otherExtent[<span class="number">1</span>],</span><br><span class="line">                    <span class="comment">// In ECharts y is negative if angle is positive</span></span><br><span class="line">                    (-coordValue - bandWidth / <span class="number">2</span>) * radian,</span><br><span class="line">                    (-coordValue + bandWidth / <span class="number">2</span>) * radian</span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">            : &#123;</span><br><span class="line">                type: <span class="string">'Sector'</span>,</span><br><span class="line">                shape: viewHelper.makeSectorShape(</span><br><span class="line">                    polar.cx, polar.cy,</span><br><span class="line">                    coordValue - bandWidth / <span class="number">2</span>,</span><br><span class="line">                    coordValue + bandWidth / <span class="number">2</span>,</span><br><span class="line">                    <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span></span><br><span class="line">                )</span><br><span class="line">            &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="坐标轴"><a href="#坐标轴" class="headerlink" title="坐标轴"></a>坐标轴</h1><h2 id="公共文件"><a href="#公共文件" class="headerlink" title="公共文件"></a>公共文件</h2><p>在直角坐标系以及极坐标系等坐标轴组件中，存在着多个公共文件。</p>
<h3 id="AxisView"><a href="#AxisView" class="headerlink" title="AxisView"></a>AxisView</h3><p>AxisView通过extendComponentView方法扩展自Component Model，重写了render、remove以及dispose方法，定义了updateAxisPointer方法。</p>
<h3 id="AxisBuilder"><a href="#AxisBuilder" class="headerlink" title="AxisBuilder"></a>AxisBuilder</h3><p>AxisBuilder中定义了axisLine、axisTickLabel以及axisName的渲染方法，主要代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> builders = &#123;</span><br><span class="line">    axisLine: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.group.add(<span class="keyword">new</span> graphic.Line(graphic.subPixelOptimizeLine(&#123;</span><br><span class="line">            <span class="comment">// Id for animation</span></span><br><span class="line">            anid: <span class="string">'line'</span>,</span><br><span class="line"></span><br><span class="line">            shape: &#123;</span><br><span class="line">                x1: pt1[<span class="number">0</span>],</span><br><span class="line">                y1: pt1[<span class="number">1</span>],</span><br><span class="line">                x2: pt2[<span class="number">0</span>],</span><br><span class="line">                y2: pt2[<span class="number">1</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            style: lineStyle,</span><br><span class="line">            strokeContainThreshold: opt.strokeContainThreshold || <span class="number">5</span>,</span><br><span class="line">            silent: <span class="literal">true</span>,</span><br><span class="line">            z2: <span class="number">1</span></span><br><span class="line">        &#125;)));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> arrows = axisModel.get(<span class="string">'axisLine.symbol'</span>);</span><br><span class="line">        <span class="keyword">var</span> arrowSize = axisModel.get(<span class="string">'axisLine.symbolSize'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> arrowOffset = axisModel.get(<span class="string">'axisLine.symbolOffset'</span>) || <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> arrowOffset === <span class="string">'number'</span>) &#123;</span><br><span class="line">            arrowOffset = [arrowOffset, arrowOffset];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (arrows != <span class="literal">null</span>) &#123;</span><br><span class="line">            ...</span><br><span class="line">            each([&#123;</span><br><span class="line">                rotate: opt.rotation + <span class="built_in">Math</span>.PI / <span class="number">2</span>,</span><br><span class="line">                offset: arrowOffset[<span class="number">0</span>],</span><br><span class="line">                r: <span class="number">0</span></span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                rotate: opt.rotation - <span class="built_in">Math</span>.PI / <span class="number">2</span>,</span><br><span class="line">                offset: arrowOffset[<span class="number">1</span>],</span><br><span class="line">                r: <span class="built_in">Math</span>.sqrt((pt1[<span class="number">0</span>] - pt2[<span class="number">0</span>]) * (pt1[<span class="number">0</span>] - pt2[<span class="number">0</span>])</span><br><span class="line">                    + (pt1[<span class="number">1</span>] - pt2[<span class="number">1</span>]) * (pt1[<span class="number">1</span>] - pt2[<span class="number">1</span>]))</span><br><span class="line">            &#125;], <span class="function"><span class="keyword">function</span> (<span class="params">point, index</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 创建arrow symbole</span></span><br><span class="line">                <span class="keyword">if</span> (arrows[index] !== <span class="string">'none'</span> &amp;&amp; arrows[index] != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> symbol = createSymbol(</span><br><span class="line">                        arrows[index],</span><br><span class="line">                        -symbolWidth / <span class="number">2</span>,</span><br><span class="line">                        -symbolHeight / <span class="number">2</span>,</span><br><span class="line">                        symbolWidth,</span><br><span class="line">                        symbolHeight,</span><br><span class="line">                        lineStyle.stroke,</span><br><span class="line">                        <span class="literal">true</span></span><br><span class="line">                    );</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Calculate arrow position with offset</span></span><br><span class="line">                    <span class="keyword">var</span> r = point.r + point.offset;</span><br><span class="line">                    <span class="keyword">var</span> pos = [</span><br><span class="line">                        pt1[<span class="number">0</span>] + r * <span class="built_in">Math</span>.cos(opt.rotation),</span><br><span class="line">                        pt1[<span class="number">1</span>] - r * <span class="built_in">Math</span>.sin(opt.rotation)</span><br><span class="line">                    ];</span><br><span class="line"></span><br><span class="line">                    symbol.attr(&#123;</span><br><span class="line">                        rotation: point.rotate,</span><br><span class="line">                        position: pos,</span><br><span class="line">                        silent: <span class="literal">true</span>,</span><br><span class="line">                        z2: <span class="number">11</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="keyword">this</span>.group.add(symbol);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    axisTickLabel: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> axisModel = <span class="keyword">this</span>.axisModel;</span><br><span class="line">        <span class="keyword">var</span> opt = <span class="keyword">this</span>.opt;</span><br><span class="line">        <span class="comment">// 通过graphic.Line以及graphic.Text分别对tick及label进行渲染</span></span><br><span class="line">        <span class="keyword">var</span> tickEls = buildAxisTick(<span class="keyword">this</span>, axisModel, opt);</span><br><span class="line">        <span class="keyword">var</span> labelEls = buildAxisLabel(<span class="keyword">this</span>, axisModel, opt);</span><br><span class="line"></span><br><span class="line">        fixMinMaxLabelShow(axisModel, labelEls, tickEls);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    axisName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">var</span> textEl = <span class="keyword">new</span> graphic.Text(&#123;</span><br><span class="line">            <span class="comment">// Id for animation</span></span><br><span class="line">            anid: <span class="string">'name'</span>,</span><br><span class="line"></span><br><span class="line">            __fullText: name,</span><br><span class="line">            __truncatedText: truncatedText,</span><br><span class="line"></span><br><span class="line">            position: pos,</span><br><span class="line">            rotation: labelLayout.rotation,</span><br><span class="line">            silent: isSilent(axisModel),</span><br><span class="line">            z2: <span class="number">1</span>,</span><br><span class="line">            tooltip: (tooltipOpt &amp;&amp; tooltipOpt.show)</span><br><span class="line">                ? extend(&#123;</span><br><span class="line">                    content: name,</span><br><span class="line">                    formatter: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> name;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    formatterParams: formatterParams</span><br><span class="line">                &#125;, tooltipOpt)</span><br><span class="line">                : <span class="literal">null</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        graphic.setTextStyle(textEl.style, textStyleModel, &#123;</span><br><span class="line">            text: truncatedText,</span><br><span class="line">            textFont: textFont,</span><br><span class="line">            textFill: textStyleModel.getTextColor()</span><br><span class="line">                || axisModel.get(<span class="string">'axisLine.lineStyle.color'</span>),</span><br><span class="line">            textAlign: labelLayout.textAlign,</span><br><span class="line">            textVerticalAlign: labelLayout.textVerticalAlign</span><br><span class="line">        &#125;);</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="comment">// FIXME</span></span><br><span class="line">        <span class="keyword">this</span>._dumbGroup.add(textEl);</span><br><span class="line">        textEl.updateTransform();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.group.add(textEl);</span><br><span class="line"></span><br><span class="line">        textEl.decomposeTransform();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="AxisModelCreator"><a href="#AxisModelCreator" class="headerlink" title="AxisModelCreator"></a>AxisModelCreator</h3><p>AxisModelCreator为生成AxisModel的方法，其在AxisModel的基础上扩展了getCategories、getOrdinalMeta、mergeDefaultAndTheme等方法，重写了defaultOption属性，并通过：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ComponentModel.registerSubTypeDefaulter(</span><br><span class="line">    axisName + <span class="string">'Axis'</span>,</span><br><span class="line">    zrUtil.curry(axisTypeDefaulter, axisName)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>来注册相应的Axis子类，如xAxis、yAxis、radiusAxis以及angleAxis等。</p>
<h2 id="直角坐标轴-Axis"><a href="#直角坐标轴-Axis" class="headerlink" title="直角坐标轴 Axis"></a>直角坐标轴 Axis</h2><p>Axis为直角坐标系Grid中的坐标轴，包括xAxis（x轴）以及yAxis（y轴）。</p>
<h3 id="AxisModel"><a href="#AxisModel" class="headerlink" title="AxisModel"></a>AxisModel</h3><p>AxisModel通过extend方法扩展自Component Model，重写了init、mergeOption、，并使用AxisModelCreator分别创建额xAxisModel以及yAxisModel，</p>
<h3 id="CartesianAxisView"><a href="#CartesianAxisView" class="headerlink" title="CartesianAxisView"></a>CartesianAxisView</h3><p>CartesianAxisView通过extend方法扩展自AxisView，重写了render方法，定义了splitLine以及splitArea方法，并扩展了xAxis以及yAxis View。主要代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CartesianAxisView = AxisView.extend(&#123;</span><br><span class="line">    type: <span class="string">'cartesianAxis'</span>,</span><br><span class="line">    axisPointerClass: <span class="string">'CartesianAxisPointer'</span>,</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span> (<span class="params">axisModel, ecModel, api, payload</span>) </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// 结合AxisBuilder</span></span><br><span class="line">        <span class="keyword">var</span> axisBuilder = <span class="keyword">new</span> AxisBuilder(axisModel, layout);</span><br><span class="line">        zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);</span><br><span class="line">        ...</span><br><span class="line">        CartesianAxisView.superCall(<span class="keyword">this</span>, <span class="string">'render'</span>, axisModel, ecModel, api, payload);</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">    _splitLine: <span class="function"><span class="keyword">function</span> (<span class="params">axisModel, gridModel</span>) </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// Simple optimization</span></span><br><span class="line">        <span class="comment">// Batching the lines if color are the same</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ticksCoords.length; i++) &#123;</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">this</span>._axisGroup.add(<span class="keyword">new</span> graphic.Line(graphic.subPixelOptimizeLine(&#123;</span><br><span class="line">                anid: tickValue != <span class="literal">null</span> ? <span class="string">'line_'</span> + ticksCoords[i].tickValue : <span class="literal">null</span>,</span><br><span class="line">                shape: &#123;</span><br><span class="line">                    x1: p1[<span class="number">0</span>],</span><br><span class="line">                    y1: p1[<span class="number">1</span>],</span><br><span class="line">                    x2: p2[<span class="number">0</span>],</span><br><span class="line">                    y2: p2[<span class="number">1</span>]</span><br><span class="line">                &#125;,</span><br><span class="line">                style: zrUtil.defaults(&#123;</span><br><span class="line">                    stroke: lineColors[colorIndex]</span><br><span class="line">                &#125;, lineStyle),</span><br><span class="line">                silent: <span class="literal">true</span></span><br><span class="line">            &#125;)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    _splitArea: <span class="function"><span class="keyword">function</span> (<span class="params">axisModel, gridModel</span>) </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; ticksCoords.length; i++) &#123;</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">this</span>._axisGroup.add(<span class="keyword">new</span> graphic.Rect(&#123;</span><br><span class="line">                anid: tickValue != <span class="literal">null</span> ? <span class="string">'area_'</span> + tickValue : <span class="literal">null</span>,</span><br><span class="line">                shape: &#123;</span><br><span class="line">                    x: x,</span><br><span class="line">                    y: y,</span><br><span class="line">                    width: width,</span><br><span class="line">                    height: height</span><br><span class="line">                &#125;,</span><br><span class="line">                style: zrUtil.defaults(&#123;</span><br><span class="line">                    fill: areaColors[colorIndex]</span><br><span class="line">                &#125;, areaStyle),</span><br><span class="line">                silent: <span class="literal">true</span></span><br><span class="line">            &#125;));</span><br><span class="line"></span><br><span class="line">            colorIndex = (colorIndex + <span class="number">1</span>) % areaColorsLen;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>._splitAreaColors = newSplitAreaColors;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">CartesianAxisView.extend(&#123;</span><br><span class="line">    type: <span class="string">'xAxis'</span></span><br><span class="line">&#125;);</span><br><span class="line">CartesianAxisView.extend(&#123;</span><br><span class="line">    type: <span class="string">'yAxis'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="极坐标轴AngleAxis-amp-RadiusAxis"><a href="#极坐标轴AngleAxis-amp-RadiusAxis" class="headerlink" title="极坐标轴AngleAxis&amp;RadiusAxis"></a>极坐标轴AngleAxis&amp;RadiusAxis</h2><p>每一个极坐标都拥有一个角度轴AngleAxis和一个半径轴RadiusAxis。</p>
<h3 id="公共文件-1"><a href="#公共文件-1" class="headerlink" title="公共文件"></a>公共文件</h3><h4 id="AxisModel-1"><a href="#AxisModel-1" class="headerlink" title="AxisModel"></a>AxisModel</h4><p>AxisModel通过extend方法扩展自Component Model，定义了getCoordSysModel方法，并根据不同option创建了angle和radius Model，主要代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">axisModelCreator(<span class="string">'angle'</span>, PolarAxisModel, getAxisType, polarAxisDefaultExtendedOption.angle);</span><br><span class="line">axisModelCreator(<span class="string">'radius'</span>, PolarAxisModel, getAxisType, polarAxisDefaultExtendedOption.radius);</span><br></pre></td></tr></table></figure>
<h3 id="AngleAxis"><a href="#AngleAxis" class="headerlink" title="AngleAxis"></a>AngleAxis</h3><p>AngleAxis为极坐标Polar中的角度轴，</p>
<h4 id="AngleAxisView"><a href="#AngleAxisView" class="headerlink" title="AngleAxisView"></a>AngleAxisView</h4><p>AngleAxisView通过extend方法扩展自AxisView，重写了render方法，并定义了axisLine、axisTick、axisLabel、splitLine以及splitArea等方法，主要代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">render: <span class="function"><span class="keyword">function</span> (<span class="params">angleAxisModel, ecModel</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">var</span> angleAxis = angleAxisModel.axis;</span><br><span class="line">    <span class="keyword">var</span> polar = angleAxis.polar;</span><br><span class="line">    <span class="keyword">var</span> radiusExtent = polar.getRadiusAxis().getExtent();</span><br><span class="line">    <span class="keyword">var</span> ticksAngles = angleAxis.getTicksCoords();</span><br><span class="line">    <span class="keyword">var</span> labels = zrUtil.map(angleAxis.getViewLabels(), <span class="function"><span class="keyword">function</span> (<span class="params">labelItem</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> labelItem = zrUtil.clone(labelItem);</span><br><span class="line">        labelItem.coord = angleAxis.dataToCoord(labelItem.tickValue);</span><br><span class="line">        <span class="keyword">return</span> labelItem;</span><br><span class="line">    &#125;);</span><br><span class="line">    ...</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">_axisLine: <span class="function"><span class="keyword">function</span> (<span class="params">angleAxisModel, polar, ticksAngles, radiusExtent</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> lineStyleModel = angleAxisModel.getModel(<span class="string">'axisLine.lineStyle'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> circle = <span class="keyword">new</span> graphic.Circle(&#123;</span><br><span class="line">        shape: &#123;</span><br><span class="line">            cx: polar.cx,</span><br><span class="line">            cy: polar.cy,</span><br><span class="line">            r: radiusExtent[getRadiusIdx(polar)]</span><br><span class="line">        &#125;,</span><br><span class="line">        style: lineStyleModel.getLineStyle(),</span><br><span class="line">        z2: <span class="number">1</span>,</span><br><span class="line">        silent: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">    circle.style.fill = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.group.add(circle);</span><br><span class="line"> &#125;,</span><br><span class="line"> _axisTick: <span class="function"><span class="keyword">function</span> (<span class="params">angleAxisModel, polar, ticksAngles, radiusExtent</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> tickModel = angleAxisModel.getModel(<span class="string">'axisTick'</span>);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">var</span> tickLen = (tickModel.get(<span class="string">'inside'</span>) ? <span class="number">-1</span> : <span class="number">1</span>) * tickModel.get(<span class="string">'length'</span>);</span><br><span class="line">     <span class="keyword">var</span> radius = radiusExtent[getRadiusIdx(polar)];</span><br><span class="line"></span><br><span class="line">     <span class="keyword">var</span> lines = zrUtil.map(ticksAngles, <span class="function"><span class="keyword">function</span> (<span class="params">tickAngleItem</span>) </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> graphic.Line(&#123;</span><br><span class="line">             shape: getAxisLineShape(polar, [radius, radius + tickLen], tickAngleItem.coord)</span><br><span class="line">         &#125;);</span><br><span class="line">     &#125;);</span><br><span class="line">     <span class="keyword">this</span>.group.add(graphic.mergePath(</span><br><span class="line">         lines, &#123;</span><br><span class="line">             style: zrUtil.defaults(</span><br><span class="line">                 tickModel.getModel(<span class="string">'lineStyle'</span>).getLineStyle(),</span><br><span class="line">                 &#123;</span><br><span class="line">                     stroke: angleAxisModel.get(<span class="string">'axisLine.lineStyle.color'</span>)</span><br><span class="line">                 &#125;</span><br><span class="line">             )</span><br><span class="line">         &#125;</span><br><span class="line">     ));</span><br><span class="line"> &#125;,</span><br><span class="line"> _axisLabel: <span class="function"><span class="keyword">function</span> (<span class="params">angleAxisModel, polar, ticksAngles, radiusExtent, labels</span>) </span>&#123;</span><br><span class="line">     ...</span><br><span class="line">     <span class="comment">// Use length of ticksAngles because it may remove the last tick to avoid overlapping</span></span><br><span class="line">     zrUtil.each(labels, <span class="function"><span class="keyword">function</span> (<span class="params">labelItem, idx</span>) </span>&#123;</span><br><span class="line">         ...</span><br><span class="line">         <span class="keyword">var</span> textEl = <span class="keyword">new</span> graphic.Text(&#123;<span class="attr">silent</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">         <span class="keyword">this</span>.group.add(textEl);</span><br><span class="line">         graphic.setTextStyle(textEl.style, labelModel, &#123;</span><br><span class="line">             x: p[<span class="number">0</span>],</span><br><span class="line">             y: p[<span class="number">1</span>],</span><br><span class="line">             textFill: labelModel.getTextColor() || angleAxisModel.get(<span class="string">'axisLine.lineStyle.color'</span>),</span><br><span class="line">             text: labelItem.formattedLabel,</span><br><span class="line">             textAlign: labelTextAlign,</span><br><span class="line">             textVerticalAlign: labelTextVerticalAlign</span><br><span class="line">         &#125;);</span><br><span class="line">     &#125;, <span class="keyword">this</span>);</span><br><span class="line"> &#125;,</span><br><span class="line"> _splitLine: <span class="function"><span class="keyword">function</span> (<span class="params">angleAxisModel, polar, ticksAngles, radiusExtent</span>) </span>&#123;</span><br><span class="line">     ...</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ticksAngles.length; i++) &#123;</span><br><span class="line">         <span class="keyword">var</span> colorIndex = (lineCount++) % lineColors.length;</span><br><span class="line">         splitLines[colorIndex] = splitLines[colorIndex] || [];</span><br><span class="line">         splitLines[colorIndex].push(<span class="keyword">new</span> graphic.Line(&#123;</span><br><span class="line">             shape: getAxisLineShape(polar, radiusExtent, ticksAngles[i].coord)</span><br><span class="line">         &#125;));</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// Simple optimization</span></span><br><span class="line">     <span class="comment">// Batching the lines if color are the same</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; splitLines.length; i++) &#123;</span><br><span class="line">         <span class="keyword">this</span>.group.add(graphic.mergePath(splitLines[i], &#123;</span><br><span class="line">             style: zrUtil.defaults(&#123;</span><br><span class="line">                 stroke: lineColors[i % lineColors.length]</span><br><span class="line">             &#125;, lineStyleModel.getLineStyle()),</span><br><span class="line">             silent: <span class="literal">true</span>,</span><br><span class="line">             z: angleAxisModel.get(<span class="string">'z'</span>)</span><br><span class="line">         &#125;));</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> _splitArea: <span class="function"><span class="keyword">function</span> (<span class="params">angleAxisModel, polar, ticksAngles, radiusExtent</span>) </span>&#123;</span><br><span class="line">     ...</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; ticksAngles.length; i++) &#123;</span><br><span class="line">         <span class="keyword">var</span> colorIndex = (lineCount++) % areaColors.length;</span><br><span class="line">         splitAreas[colorIndex] = splitAreas[colorIndex] || [];</span><br><span class="line">         splitAreas[colorIndex].push(<span class="keyword">new</span> graphic.Sector(&#123;</span><br><span class="line">             shape: &#123;</span><br><span class="line">                 cx: polar.cx,</span><br><span class="line">                 cy: polar.cy,</span><br><span class="line">                 r0: r0,</span><br><span class="line">                 r: r1,</span><br><span class="line">                 startAngle: prevAngle,</span><br><span class="line">                 endAngle: -ticksAngles[i].coord * RADIAN,</span><br><span class="line">                 clockwise: clockwise</span><br><span class="line">             &#125;,</span><br><span class="line">             silent: <span class="literal">true</span></span><br><span class="line">         &#125;));</span><br><span class="line">         prevAngle = -ticksAngles[i].coord * RADIAN;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// Simple optimization</span></span><br><span class="line">     <span class="comment">// Batching the lines if color are the same</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; splitAreas.length; i++) &#123;</span><br><span class="line">         <span class="keyword">this</span>.group.add(graphic.mergePath(splitAreas[i], &#123;</span><br><span class="line">             style: zrUtil.defaults(&#123;</span><br><span class="line">                 fill: areaColors[i % areaColors.length]</span><br><span class="line">             &#125;, areaStyleModel.getAreaStyle()),</span><br><span class="line">             silent: <span class="literal">true</span></span><br><span class="line">         &#125;));</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h3 id="RadiusAxis"><a href="#RadiusAxis" class="headerlink" title="RadiusAxis"></a>RadiusAxis</h3><p>RadiusAxis为极坐标Polar中的半径轴。</p>
<h4 id="RadiusAxisView"><a href="#RadiusAxisView" class="headerlink" title="RadiusAxisView"></a>RadiusAxisView</h4><p>RadiusAxisView通过extend方法扩展自AxisView，重写了render方法，并定义了splitLine、splitArea方法，主要代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">_splitLine: <span class="function"><span class="keyword">function</span> (<span class="params">radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ticksCoords.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> colorIndex = (lineCount++) % lineColors.length;</span><br><span class="line">        splitLines[colorIndex] = splitLines[colorIndex] || [];</span><br><span class="line">        splitLines[colorIndex].push(<span class="keyword">new</span> graphic.Circle(&#123;</span><br><span class="line">            shape: &#123;</span><br><span class="line">                cx: polar.cx,</span><br><span class="line">                cy: polar.cy,</span><br><span class="line">                r: ticksCoords[i].coord</span><br><span class="line">            &#125;,</span><br><span class="line">            silent: <span class="literal">true</span></span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Simple optimization</span></span><br><span class="line">    <span class="comment">// Batching the lines if color are the same</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; splitLines.length; i++) &#123;</span><br><span class="line">        <span class="keyword">this</span>.group.add(graphic.mergePath(splitLines[i], &#123;</span><br><span class="line">            style: zrUtil.defaults(&#123;</span><br><span class="line">                stroke: lineColors[i % lineColors.length],</span><br><span class="line">                fill: <span class="literal">null</span></span><br><span class="line">            &#125;, lineStyleModel.getLineStyle()),</span><br><span class="line">            silent: <span class="literal">true</span></span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">_splitArea: <span class="function"><span class="keyword">function</span> (<span class="params">radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; ticksCoords.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> colorIndex = (lineCount++) % areaColors.length;</span><br><span class="line">        splitAreas[colorIndex] = splitAreas[colorIndex] || [];</span><br><span class="line">        splitAreas[colorIndex].push(<span class="keyword">new</span> graphic.Sector(&#123;</span><br><span class="line">            shape: &#123;</span><br><span class="line">                cx: polar.cx,</span><br><span class="line">                cy: polar.cy,</span><br><span class="line">                r0: prevRadius,</span><br><span class="line">                r: ticksCoords[i].coord,</span><br><span class="line">                startAngle: <span class="number">0</span>,</span><br><span class="line">                endAngle: <span class="built_in">Math</span>.PI * <span class="number">2</span></span><br><span class="line">            &#125;,</span><br><span class="line">            silent: <span class="literal">true</span></span><br><span class="line">        &#125;));</span><br><span class="line">        prevRadius = ticksCoords[i].coord;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Simple optimization</span></span><br><span class="line">    <span class="comment">// Batching the lines if color are the same</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; splitAreas.length; i++) &#123;</span><br><span class="line">        <span class="keyword">this</span>.group.add(graphic.mergePath(splitAreas[i], &#123;</span><br><span class="line">            style: zrUtil.defaults(&#123;</span><br><span class="line">                fill: areaColors[i % areaColors.length]</span><br><span class="line">            &#125;, areaStyleModel.getAreaStyle()),</span><br><span class="line">            silent: <span class="literal">true</span></span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h2 id="雷达坐标轴"><a href="#雷达坐标轴" class="headerlink" title="雷达坐标轴"></a>雷达坐标轴</h2><h3 id="RadarView"><a href="#RadarView" class="headerlink" title="RadarView"></a>RadarView</h3><p>RadarView通过extendComponentView方法扩展自Component View，重写了render方法，主要代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">render: <span class="function"><span class="keyword">function</span> (<span class="params">radarModel, ecModel, api</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> group = <span class="keyword">this</span>.group;</span><br><span class="line">    group.removeAll();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>._buildAxes(radarModel);</span><br><span class="line">    <span class="keyword">this</span>._buildSplitLineAndArea(radarModel);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">_buildAxes: <span class="function"><span class="keyword">function</span> (<span class="params">radarModel</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> radar = radarModel.coordinateSystem;</span><br><span class="line">    <span class="keyword">var</span> indicatorAxes = radar.getIndicatorAxes();</span><br><span class="line">    <span class="keyword">var</span> axisBuilders = zrUtil.map(indicatorAxes, <span class="function"><span class="keyword">function</span> (<span class="params">indicatorAxis</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> axisBuilder = <span class="keyword">new</span> AxisBuilder(indicatorAxis.model, &#123;</span><br><span class="line">            position: [radar.cx, radar.cy],</span><br><span class="line">            rotation: indicatorAxis.angle,</span><br><span class="line">            labelDirection: <span class="number">-1</span>,</span><br><span class="line">            tickDirection: <span class="number">-1</span>,</span><br><span class="line">            nameDirection: <span class="number">1</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> axisBuilder;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    zrUtil.each(axisBuilders, <span class="function"><span class="keyword">function</span> (<span class="params">axisBuilder</span>) </span>&#123;</span><br><span class="line">        zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);</span><br><span class="line">        <span class="keyword">this</span>.group.add(axisBuilder.getGroup());</span><br><span class="line">    &#125;, <span class="keyword">this</span>);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">_buildSplitLineAndArea: <span class="function"><span class="keyword">function</span> (<span class="params">radarModel</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (shape === <span class="string">'circle'</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> ticksRadius = indicatorAxes[<span class="number">0</span>].getTicksCoords();</span><br><span class="line">        <span class="keyword">var</span> cx = radar.cx;</span><br><span class="line">        <span class="keyword">var</span> cy = radar.cy;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ticksRadius.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (showSplitLine) &#123;</span><br><span class="line">                <span class="keyword">var</span> colorIndex = getColorIndex(splitLines, splitLineColors, i);</span><br><span class="line">                splitLines[colorIndex].push(<span class="keyword">new</span> graphic.Circle(&#123;</span><br><span class="line">                    shape: &#123;</span><br><span class="line">                        cx: cx,</span><br><span class="line">                        cy: cy,</span><br><span class="line">                        r: ticksRadius[i].coord</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (showSplitArea &amp;&amp; i &lt; ticksRadius.length - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> colorIndex = getColorIndex(splitAreas, splitAreaColors, i);</span><br><span class="line">                splitAreas[colorIndex].push(<span class="keyword">new</span> graphic.Ring(&#123;</span><br><span class="line">                    shape: &#123;</span><br><span class="line">                        cx: cx,</span><br><span class="line">                        cy: cy,</span><br><span class="line">                        r0: ticksRadius[i].coord,</span><br><span class="line">                        r: ticksRadius[i + <span class="number">1</span>].coord</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Polygon</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= realSplitNumber; i++) &#123;</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">if</span> (showSplitLine) &#123;</span><br><span class="line">                <span class="keyword">var</span> colorIndex = getColorIndex(splitLines, splitLineColors, i);</span><br><span class="line">                splitLines[colorIndex].push(<span class="keyword">new</span> graphic.Polyline(&#123;</span><br><span class="line">                    shape: &#123;</span><br><span class="line">                        points: points</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (showSplitArea &amp;&amp; prevPoints) &#123;</span><br><span class="line">                <span class="keyword">var</span> colorIndex = getColorIndex(splitAreas, splitAreaColors, i - <span class="number">1</span>);</span><br><span class="line">                splitAreas[colorIndex].push(<span class="keyword">new</span> graphic.Polygon(&#123;</span><br><span class="line">                    shape: &#123;</span><br><span class="line">                        points: points.concat(prevPoints)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;));</span><br><span class="line">            &#125;</span><br><span class="line">            prevPoints = points.slice().reverse();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> lineStyle = lineStyleModel.getLineStyle();</span><br><span class="line">    <span class="keyword">var</span> areaStyle = areaStyleModel.getAreaStyle();</span><br><span class="line">    <span class="comment">// Add splitArea before splitLine</span></span><br><span class="line">    zrUtil.each(splitAreas, <span class="function"><span class="keyword">function</span> (<span class="params">splitAreas, idx</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.group.add(graphic.mergePath(</span><br><span class="line">            splitAreas, &#123;</span><br><span class="line">                style: zrUtil.defaults(&#123;</span><br><span class="line">                    stroke: <span class="string">'none'</span>,</span><br><span class="line">                    fill: splitAreaColors[idx % splitAreaColors.length]</span><br><span class="line">                &#125;, areaStyle),</span><br><span class="line">                silent: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        ));</span><br><span class="line">    &#125;, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    zrUtil.each(splitLines, <span class="function"><span class="keyword">function</span> (<span class="params">splitLines, idx</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.group.add(graphic.mergePath(</span><br><span class="line">            splitLines, &#123;</span><br><span class="line">                style: zrUtil.defaults(&#123;</span><br><span class="line">                    fill: <span class="string">'none'</span>,</span><br><span class="line">                    stroke: splitLineColors[idx % splitLineColors.length]</span><br><span class="line">                &#125;, lineStyle),</span><br><span class="line">                silent: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        ));</span><br><span class="line">    &#125;, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="RadarModel"><a href="#RadarModel" class="headerlink" title="RadarModel"></a>RadarModel</h3><p>RadarModel通过extendComponentModel扩展自Component Model，重写了<strong>defaultOption</strong>属性以及optionUpdated方法。</p>
<h2 id="平行坐标轴"><a href="#平行坐标轴" class="headerlink" title="平行坐标轴"></a>平行坐标轴</h2><h3 id="ParallelModel"><a href="#ParallelModel" class="headerlink" title="ParallelModel"></a>ParallelModel</h3><p>ParallelModel使用extend方法扩展自Component Model，重写了<strong>defaultOption</strong>属性，并重写了init、mergeOption等方法。</p>
<h3 id="ParallelAxisAction"><a href="#ParallelAxisAction" class="headerlink" title="ParallelAxisAction"></a>ParallelAxisAction</h3><p>parallelAxisAction中注册了axisAreaSelected以及parallelAxisExpand API，主要代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> actionInfo = &#123;</span><br><span class="line">    type: <span class="string">'axisAreaSelect'</span>,</span><br><span class="line">    event: <span class="string">'axisAreaSelected'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">echarts.registerAction(actionInfo, <span class="function"><span class="keyword">function</span> (<span class="params">payload, ecModel</span>) </span>&#123;</span><br><span class="line">    ecModel.eachComponent(</span><br><span class="line">        &#123;<span class="attr">mainType</span>: <span class="string">'parallelAxis'</span>, <span class="attr">query</span>: payload&#125;,</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params">parallelAxisModel</span>) </span>&#123;</span><br><span class="line">            parallelAxisModel.axis.model.setActiveIntervals(payload.intervals);</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">echarts.registerAction(<span class="string">'parallelAxisExpand'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">payload, ecModel</span>) </span>&#123;</span><br><span class="line">    ecModel.eachComponent(</span><br><span class="line">        &#123;<span class="attr">mainType</span>: <span class="string">'parallel'</span>, <span class="attr">query</span>: payload&#125;,</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params">parallelModel</span>) </span>&#123;</span><br><span class="line">            parallelModel.setAxisExpand(payload);</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="ParallelAxisView"><a href="#ParallelAxisView" class="headerlink" title="ParallelAxisView"></a>ParallelAxisView</h3><p>ParallelAxisView使用extendComponentView方法扩展自Component Model，重写了render等方法。渲染代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">render: <span class="function"><span class="keyword">function</span> (<span class="params">axisModel, ecModel, api, payload</span>) </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">var</span> axisBuilder = <span class="keyword">new</span> AxisBuilder(axisModel, builderOpt);</span><br><span class="line"></span><br><span class="line">        zrUtil.each(elementList, axisBuilder.add, axisBuilder);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>._axisGroup.add(axisBuilder.getGroup());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>._refreshBrushController(</span><br><span class="line">            builderOpt, areaSelectStyle, axisModel, coordSysModel, areaWidth, api</span><br><span class="line">        );</span><br><span class="line">    	...</span><br><span class="line">    &#125;, </span><br><span class="line">_refreshBrushController: <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    builderOpt, areaSelectStyle, axisModel, coordSysModel, areaWidth, api</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">var</span> rect = graphic.BoundingRect.create(&#123;</span><br><span class="line">        x: extent[<span class="number">0</span>],</span><br><span class="line">        y: -areaWidth / <span class="number">2</span>,</span><br><span class="line">        width: extentLen,</span><br><span class="line">        height: areaWidth</span><br><span class="line">    &#125;);</span><br><span class="line">    rect.x -= extra;</span><br><span class="line">    rect.width += <span class="number">2</span> * extra;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// _brushController为平行坐标轴上的控制器</span></span><br><span class="line">    <span class="keyword">this</span>._brushController</span><br><span class="line">        .mount(&#123;</span><br><span class="line">        enableGlobalPan: <span class="literal">true</span>,</span><br><span class="line">        rotation: builderOpt.rotation,</span><br><span class="line">        position: builderOpt.position</span><br><span class="line">    &#125;)</span><br><span class="line">        .setPanels([&#123;</span><br><span class="line">            panelId: <span class="string">'pl'</span>,</span><br><span class="line">            clipPath: brushHelper.makeRectPanelClipPath(rect),</span><br><span class="line">            isTargetByCursor: brushHelper.makeRectIsTargetByCursor(rect, api, coordSysModel),</span><br><span class="line">            getLinearBrushOtherExtent: brushHelper.makeLinearBrushOtherExtent(rect, <span class="number">0</span>)</span><br><span class="line">        &#125;])</span><br><span class="line">        .enableBrush(&#123;</span><br><span class="line">        brushType: <span class="string">'lineX'</span>,</span><br><span class="line">        brushStyle: areaSelectStyle,</span><br><span class="line">        removeOnClick: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">        .updateCovers(getCoverInfoList(axisModel));</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<h1 id="坐标系"><a href="#坐标系" class="headerlink" title="坐标系"></a>坐标系</h1><p>在上一节中，我们介绍了直角坐标轴、极坐标轴以及雷达坐标轴，我们将在这节解读坐标轴是如何在坐标系中展示的。</p>
<h2 id="公共文件-2"><a href="#公共文件-2" class="headerlink" title="公共文件"></a>公共文件</h2><h3 id="Axis"><a href="#Axis" class="headerlink" title="Axis"></a>Axis</h3><p>Axis对象中定义了scale、dim等属性以及contain、containData、getExtent、getTicksCoords、getViewLabels等方法。</p>
<h2 id="Grid"><a href="#Grid" class="headerlink" title="Grid"></a>Grid</h2><p>Grid为echarts中的直角坐标系组件。</p>
<h3 id="gridSimple"><a href="#gridSimple" class="headerlink" title="gridSimple"></a>gridSimple</h3><p>gridSimple通过extendComponentView扩展自Component View，重写了render方法，主要代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">render: <span class="function"><span class="keyword">function</span> (<span class="params">gridModel, ecModel</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.group.removeAll();</span><br><span class="line">    <span class="keyword">if</span> (gridModel.get(<span class="string">'show'</span>)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.group.add(<span class="keyword">new</span> graphic.Rect(&#123;</span><br><span class="line">            shape: gridModel.coordinateSystem.getRect(),</span><br><span class="line">            style: zrUtil.defaults(&#123;</span><br><span class="line">                fill: gridModel.get(<span class="string">'backgroundColor'</span>)</span><br><span class="line">            &#125;, gridModel.getItemStyle()),</span><br><span class="line">            silent: <span class="literal">true</span>,</span><br><span class="line">            z2: <span class="number">-1</span></span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Grid-1"><a href="#Grid-1" class="headerlink" title="Grid"></a>Grid</h3><p>coord/cartesian/Grid.js，实现直角坐标系的渲染，主要代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Grid</span>(<span class="params">gridModel, ecModel, api</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">this</span>._initCartesian(gridModel, ecModel, api);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">gridProto._initCartesian = <span class="function"><span class="keyword">function</span> (<span class="params">gridModel, ecModel, api</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> axisPositionUsed = &#123;</span><br><span class="line">        left: <span class="literal">false</span>,</span><br><span class="line">        right: <span class="literal">false</span>,</span><br><span class="line">        top: <span class="literal">false</span>,</span><br><span class="line">        bottom: <span class="literal">false</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> axesMap = &#123;</span><br><span class="line">        x: &#123;&#125;,</span><br><span class="line">        y: &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> axesCount = &#123;</span><br><span class="line">        x: <span class="number">0</span>,</span><br><span class="line">        y: <span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Create axis</span></span><br><span class="line">    <span class="comment">// 创建x及y坐标轴</span></span><br><span class="line">    ecModel.eachComponent(<span class="string">'xAxis'</span>, createAxisCreator(<span class="string">'x'</span>), <span class="keyword">this</span>);</span><br><span class="line">    ecModel.eachComponent(<span class="string">'yAxis'</span>, createAxisCreator(<span class="string">'y'</span>), <span class="keyword">this</span>);</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">/// Create cartesian2d</span></span><br><span class="line">    <span class="comment">// 创建</span></span><br><span class="line">    each(axesMap.x, <span class="function"><span class="keyword">function</span> (<span class="params">xAxis, xAxisIndex</span>) </span>&#123;</span><br><span class="line">        each(axesMap.y, <span class="function"><span class="keyword">function</span> (<span class="params">yAxis, yAxisIndex</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> key = <span class="string">'x'</span> + xAxisIndex + <span class="string">'y'</span> + yAxisIndex;</span><br><span class="line">            <span class="keyword">var</span> cartesian = <span class="keyword">new</span> Cartesian2D(key);</span><br><span class="line"></span><br><span class="line">            cartesian.grid = <span class="keyword">this</span>;</span><br><span class="line">            cartesian.model = gridModel;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>._coordsMap[key] = cartesian;</span><br><span class="line">            <span class="keyword">this</span>._coordsList.push(cartesian);</span><br><span class="line"></span><br><span class="line">            cartesian.addAxis(xAxis);</span><br><span class="line">            cartesian.addAxis(yAxis);</span><br><span class="line">        &#125;, <span class="keyword">this</span>);</span><br><span class="line">    &#125;, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createAxisCreator</span>(<span class="params">axisType</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">axisModel, idx</span>) </span>&#123;</span><br><span class="line">            ...</span><br><span class="line">            <span class="comment">// 创建坐标轴</span></span><br><span class="line">            <span class="keyword">var</span> axis = <span class="keyword">new</span> Axis2D(</span><br><span class="line">                axisType, createScaleByModel(axisModel),</span><br><span class="line">                [<span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">                axisModel.get(<span class="string">'type'</span>),</span><br><span class="line">                axisPosition</span><br><span class="line">            );</span><br><span class="line">            ...</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="Polar"><a href="#Polar" class="headerlink" title="Polar"></a>Polar</h2><p>Polar为echarts中的极坐标系组件，每一个极坐标都拥有一个角度轴和一个半径轴。</p>
<h3 id="Polar-1"><a href="#Polar-1" class="headerlink" title="Polar"></a>Polar</h3><p>Polar定义了angleAxis（new RadiusAxis()）、radiusAxis（new AngleAxis()）等属性以及containPoint、containData、getAxis、getAngleAxis、getRadiusAxis等方法。</p>
<h3 id="PolarCreator"><a href="#PolarCreator" class="headerlink" title="PolarCreator"></a>PolarCreator</h3><p>PolarCreator用于创建极坐标系，主要代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">create: <span class="function"><span class="keyword">function</span> (<span class="params">ecModel, api</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> polarList = [];</span><br><span class="line">    ecModel.eachComponent(<span class="string">'polar'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">polarModel, idx</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> polar = <span class="keyword">new</span> Polar(idx);</span><br><span class="line">        <span class="comment">// Inject resize and update method</span></span><br><span class="line">        polar.update = updatePolarScale;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> radiusAxis = polar.getRadiusAxis();</span><br><span class="line">        <span class="keyword">var</span> angleAxis = polar.getAngleAxis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> radiusAxisModel = polarModel.findAxisModel(<span class="string">'radiusAxis'</span>);</span><br><span class="line">        <span class="keyword">var</span> angleAxisModel = polarModel.findAxisModel(<span class="string">'angleAxis'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置角度轴和半径轴</span></span><br><span class="line">        setAxis(radiusAxis, radiusAxisModel);</span><br><span class="line">        setAxis(angleAxis, angleAxisModel);</span><br><span class="line"></span><br><span class="line">        resizePolar(polar, polarModel, api);</span><br><span class="line"></span><br><span class="line">        polarList.push(polar);</span><br><span class="line"></span><br><span class="line">        polarModel.coordinateSystem = polar;</span><br><span class="line">        polar.model = polarModel;</span><br><span class="line">    &#125;);</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> polarList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Radar"><a href="#Radar" class="headerlink" title="Radar"></a>Radar</h2><p>Radar为echarts中的雷达坐标系组件。</p>
<p>###Radar</p>
<p>Radar文件位于coord/radar目录下，定义了getIndicatorAxes、coordToPoint、dataToPoint等方法，并注册了雷达坐标信息，主要代码为：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Radar</span>(<span class="params">radarModel, ecModel, api</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">this</span>._indicatorAxes = zrUtil.map(radarModel.getIndicatorModels(), <span class="function"><span class="keyword">function</span> (<span class="params">indicatorModel, idx</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> dim = <span class="string">'indicator_'</span> + idx;</span><br><span class="line">        <span class="comment">// 创建雷达坐标轴</span></span><br><span class="line">        <span class="keyword">var</span> indicatorAxis = <span class="keyword">new</span> IndicatorAxis(dim, <span class="keyword">new</span> IntervalScale());</span><br><span class="line">        indicatorAxis.name = indicatorModel.get(<span class="string">'name'</span>);</span><br><span class="line">        <span class="comment">// Inject model and axis</span></span><br><span class="line">        indicatorAxis.model = indicatorModel;</span><br><span class="line">        indicatorModel.axis = indicatorAxis;</span><br><span class="line">        <span class="keyword">this</span>.dimensions.push(dim);</span><br><span class="line">        <span class="keyword">return</span> indicatorAxis;</span><br><span class="line">    &#125;, <span class="keyword">this</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">Radar.create = <span class="function"><span class="keyword">function</span> (<span class="params">ecModel, api</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> radarList = [];</span><br><span class="line">    ecModel.eachComponent(<span class="string">'radar'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">radarModel</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> radar = <span class="keyword">new</span> Radar(radarModel, ecModel, api);</span><br><span class="line">        radarList.push(radar);</span><br><span class="line">        radarModel.coordinateSystem = radar;</span><br><span class="line">    &#125;);</span><br><span class="line">    ecModel.eachSeriesByType(<span class="string">'radar'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">radarSeries</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (radarSeries.get(<span class="string">'coordinateSystem'</span>) === <span class="string">'radar'</span>) &#123;</span><br><span class="line">            <span class="comment">// Inject coordinate system</span></span><br><span class="line">            radarSeries.coordinateSystem = radarList[radarSeries.get(<span class="string">'radarIndex'</span>) || <span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> radarList;</span><br><span class="line">&#125;;</span><br><span class="line">CoordinateSystem.register(<span class="string">'radar'</span>, Radar);</span><br></pre></td></tr></table></figure>
<h2 id="Parallel"><a href="#Parallel" class="headerlink" title="Parallel"></a>Parallel</h2><p>Parallel为echarts中的平行坐标系组件。</p>
<h3 id="Parallel-1"><a href="#Parallel-1" class="headerlink" title="Parallel"></a>Parallel</h3><p>Parallel定义了rect、dimensions等属性以及init、containPoint、getRect、getAxis、axisCoordToPoint等方法。</p>
<h3 id="ParallelCreator"><a href="#ParallelCreator" class="headerlink" title="ParallelCreator"></a>ParallelCreator</h3><p>ParallelCreator用于创建平行坐标系，主要代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">ecModel, api</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> coordSysList = [];</span><br><span class="line"></span><br><span class="line">    ecModel.eachComponent(<span class="string">'parallel'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">parallelModel, idx</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> coordSys = <span class="keyword">new</span> Parallel(parallelModel, ecModel, api);</span><br><span class="line"></span><br><span class="line">        coordSys.name = <span class="string">'parallel_'</span> + idx;</span><br><span class="line">        coordSys.resize(parallelModel, api);</span><br><span class="line"></span><br><span class="line">        parallelModel.coordinateSystem = coordSys;</span><br><span class="line">        coordSys.model = parallelModel;</span><br><span class="line"></span><br><span class="line">        coordSysList.push(coordSys);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Inject the coordinateSystems into seriesModel</span></span><br><span class="line">    ecModel.eachSeries(<span class="function"><span class="keyword">function</span> (<span class="params">seriesModel</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (seriesModel.get(<span class="string">'coordinateSystem'</span>) === <span class="string">'parallel'</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> parallelModel = ecModel.queryComponents(&#123;</span><br><span class="line">                mainType: <span class="string">'parallel'</span>,</span><br><span class="line">                index: seriesModel.get(<span class="string">'parallelIndex'</span>),</span><br><span class="line">                id: seriesModel.get(<span class="string">'parallelId'</span>)</span><br><span class="line">            &#125;)[<span class="number">0</span>];</span><br><span class="line">            seriesModel.coordinateSystem = parallelModel.coordinateSystem;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> coordSysList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CoordinateSystem.register(<span class="string">'parallel'</span>, &#123;<span class="attr">create</span>: create&#125;);</span><br></pre></td></tr></table></figure>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>在解读的过程中，我们需要带着问题去思考源码的实现，在这里我们来解决<strong>echarts是如何渲染展示坐标轴上的label数据</strong>这个问题。</p>
<h2 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h2><p>首先考虑label data的存储过程，以直角坐标系为🌰，data存储的调用链如下所示：</p>
<ul>
<li>echarts.setOption()</li>
<li>Global.setOption()</li>
<li>Global.mergeOption()</li>
<li>Component.optionUpdated() （Model）</li>
<li>AxisModelCreator.optionUpdated()，将OrdinalMeta.createByAxisModel()返回的数据保存在this.__ordinalMeta中</li>
<li>OrdinalMeta.createByAxisModel()，主要代码如下：</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">OrdinalMeta.createByAxisModel = <span class="function"><span class="keyword">function</span> (<span class="params">axisModel</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> option = axisModel.option;</span><br><span class="line">    <span class="keyword">var</span> data = option.data;</span><br><span class="line">    <span class="keyword">var</span> categories = data &amp;&amp; map(data, getName);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> OrdinalMeta(&#123;</span><br><span class="line">        categories: categories,</span><br><span class="line">        needCollect: !categories,</span><br><span class="line">        <span class="comment">// deduplication is default in axis.</span></span><br><span class="line">        deduplication: option.dedplication !== <span class="literal">false</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>Grid.js中通过：</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> axis = <span class="keyword">new</span> Axis2D(</span><br><span class="line">    axisType, createScaleByModel(axisModel),</span><br><span class="line">    [<span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    axisModel.get(<span class="string">'type'</span>),</span><br><span class="line">    axisPosition</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>创建坐标轴，createScaleByModel方法获取保存在this.__ordinalMeta属性中的数据，并返回OrdinalScale对象，createScaleByModel方法主要代码如下所示：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createScaleByModel</span>(<span class="params">model, axisType</span>) </span>&#123;</span><br><span class="line">    axisType = axisType || model.get(<span class="string">'type'</span>);</span><br><span class="line">    <span class="keyword">if</span> (axisType) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (axisType) &#123;</span><br><span class="line">            <span class="comment">// Buildin scale</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">'category'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> OrdinalScale(</span><br><span class="line">                    model.getOrdinalMeta</span><br><span class="line">                        ? model.getOrdinalMeta()</span><br><span class="line">                        : model.getCategories(),</span><br><span class="line">                    [<span class="literal">Infinity</span>, -<span class="literal">Infinity</span>]</span><br><span class="line">                );</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'value'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> IntervalScale();</span><br><span class="line">            <span class="comment">// Extended scale, like time and log</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> (Scale.getClass(axisType) || IntervalScale).create(model);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Grid创建坐标轴时将返回的OrdinalScale对象数据作为<strong>scale</strong>属性保存在axis中，主要代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Axis2D = <span class="function"><span class="keyword">function</span> (<span class="params">dim, scale, coordExtent, axisType, position</span>) </span>&#123;</span><br><span class="line">    Axis.call(<span class="keyword">this</span>, dim, scale, coordExtent);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> Axis = <span class="function"><span class="keyword">function</span> (<span class="params">dim, scale, extent</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">this</span>.scale = scale;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h2><p>获取</p>
<ul>
<li>AxisBuilder axisTickLabel()</li>
<li>AxisBuilder buildAxisLabel()</li>
<li>labels = axis.getViewLabels() =&gt; coord/Axis.js getViewLabels()</li>
<li>调用createAxisLabels()，返回result.labels</li>
<li>axisTickLabelBuilder createAxisLabels()</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createAxisLabels</span>(<span class="params">axis</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Only ordinal scale support tick interval</span></span><br><span class="line">    <span class="keyword">return</span> axis.type === <span class="string">'category'</span></span><br><span class="line">        ? makeCategoryLabels(axis)</span><br><span class="line">        : makeRealNumberLabels(axis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>axisTickLabelBuilder makeCategoryLabels()</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeCategoryLabels</span>(<span class="params">axis</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> labelModel = axis.getLabelModel();</span><br><span class="line">    <span class="keyword">var</span> result = makeCategoryLabelsActually(axis, labelModel);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (!labelModel.get(<span class="string">'show'</span>) || axis.scale.isBlank())</span><br><span class="line">        ? &#123;<span class="attr">labels</span>: [], <span class="attr">labelCategoryInterval</span>: result.labelCategoryInterval&#125;</span><br><span class="line">        : result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>axisTickLabelBuilder makeCategoryLabelsActually()</li>
<li>axisTickLabelBuilder makeLabelsByCustomizedCategoryInterval()</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeLabelsByCustomizedCategoryInterval</span>(<span class="params">axis, categoryInterval, onlyTick</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// axis.scale是我们保存的OrdinalScale对象数据</span></span><br><span class="line">    <span class="keyword">var</span> ordinalScale = axis.scale;</span><br><span class="line">    <span class="keyword">var</span> labelFormatter = makeLabelFormatter(axis);</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line"></span><br><span class="line">    zrUtil.each(ordinalScale.getTicks(), <span class="function"><span class="keyword">function</span> (<span class="params">tickValue</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> rawLabel = ordinalScale.getLabel(tickValue);</span><br><span class="line">        <span class="keyword">if</span> (categoryInterval(tickValue, rawLabel)) &#123;</span><br><span class="line">            result.push(onlyTick</span><br><span class="line">                ? tickValue</span><br><span class="line">                : &#123;</span><br><span class="line">                    formattedLabel: labelFormatter(tickValue),</span><br><span class="line">                    rawLabel: rawLabel,</span><br><span class="line">                    tickValue: tickValue</span><br><span class="line">                &#125;</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h2><p>AxisBuilder通过axis.getViewLabels()获取labels数据后通过graphic.Text进行渲染，通过graphic.setStyle设置文本样式，主要代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">each(labels, <span class="function"><span class="keyword">function</span> (<span class="params">labelItem, index</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">var</span> textEl = <span class="keyword">new</span> graphic.Text(&#123;</span><br><span class="line">        <span class="comment">// Id for animation</span></span><br><span class="line">        anid: <span class="string">'label_'</span> + tickValue,</span><br><span class="line">        position: pos,</span><br><span class="line">        rotation: labelLayout.rotation,</span><br><span class="line">        silent: silent,</span><br><span class="line">        z2: <span class="number">10</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    graphic.setTextStyle(textEl.style, itemLabelModel, &#123;</span><br><span class="line">        text: formattedLabel,</span><br><span class="line">        textAlign: itemLabelModel.getShallow(<span class="string">'align'</span>, <span class="literal">true</span>)</span><br><span class="line">        || labelLayout.textAlign,</span><br><span class="line">        textVerticalAlign: itemLabelModel.getShallow(<span class="string">'verticalAlign'</span>, <span class="literal">true</span>)</span><br><span class="line">        || itemLabelModel.getShallow(<span class="string">'baseline'</span>, <span class="literal">true</span>)</span><br><span class="line">        || labelLayout.textVerticalAlign,</span><br><span class="line">        textFill: <span class="keyword">typeof</span> textColor === <span class="string">'function'</span></span><br><span class="line">        ? textColor(</span><br><span class="line">            axis.type === <span class="string">'category'</span></span><br><span class="line">            ? rawLabel</span><br><span class="line">            : axis.type === <span class="string">'value'</span></span><br><span class="line">            ? tickValue + <span class="string">''</span></span><br><span class="line">            : tickValue,</span><br><span class="line">            index</span><br><span class="line">        )</span><br><span class="line">        : textColor</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    labelEls.push(textEl);</span><br><span class="line">    axisBuilder.group.add(textEl);</span><br><span class="line"></span><br><span class="line">    textEl.decomposeTransform();</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这篇博文很大，简单介绍了title、legend、axisPointer、坐标系以及坐标轴的渲染细节，也探讨了坐标轴上label 数据的存储、获取以及渲染的过程。</p>
<p>希望能够跟小伙伴们一起进步呀！继续加油！！</p>
]]></content>
      
        <categories>
            
            <category> echarts </category>
            
        </categories>
        
        
        <tags>
            
            <tag> echarts源码解读 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[echarts源码解读《二》：echarts源码概要分析]]></title>
      <url>/2019/05/21/echarts-2/</url>
      <content type="html"><![CDATA[<blockquote>
<p>继解读完zrender源码之后，我们便开始进入echarts源码解读，echarts是在zrender基础上进行开发的，在这篇博文中，我将会分析在使用echarts时，echarts的渲染过程，接下来系列博文中我将从echarts的<strong>Component</strong>以及<strong>View</strong>进行解读echarts如何实现图表绘制。</p>
<p>希望能够一起努力学习呀！！加油！！</p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们首先来看一个简单的echarts折线图Demo：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> echartsInstance = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">"main"</span>))</span><br><span class="line"><span class="keyword">const</span> option = &#123;</span><br><span class="line">    xAxis: &#123;</span><br><span class="line">        type: <span class="string">'category'</span>,</span><br><span class="line">        data: [<span class="string">'Mon'</span>, <span class="string">'Tue'</span>, <span class="string">'Wed'</span>, <span class="string">'Thu'</span>, <span class="string">'Fri'</span>, <span class="string">'Sat'</span>, <span class="string">'Sun'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    yAxis: &#123;</span><br><span class="line">        type: <span class="string">'value'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    series: [&#123;</span><br><span class="line">        data: [<span class="number">820</span>, <span class="number">932</span>, <span class="number">901</span>, <span class="number">934</span>, <span class="number">1290</span>, <span class="number">1330</span>, <span class="number">1320</span>],</span><br><span class="line">        type: <span class="string">'line'</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;;</span><br><span class="line">echartsInstance.setOption(option)</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>效果图如下：</p>
<p><img src="/img/echarts/折线图.png" alt="折线图"></p>
<p>上述代码，使用echarts实现了简单的折线图，那么echarts是如何根据用户设定的option进行图表绘制的呢？这也是我们今天需要探讨的问题。</p>
<h1 id="Echarts解读"><a href="#Echarts解读" class="headerlink" title="Echarts解读"></a>Echarts解读</h1><p>echarts.js，定义了我们使用echarts时直接调用的init、setOption等方法。</p>
<h2 id="初始化echarts实例"><a href="#初始化echarts实例" class="headerlink" title="初始化echarts实例"></a>初始化echarts实例</h2><p>在echarts.js文件中通过export init方法提供用户初始化echarts实例的接口，主要代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params">dom, theme, opts</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">        <span class="comment">// Check version</span></span><br><span class="line">       <span class="keyword">if</span> ((zrender.version.replace(<span class="string">'.'</span>, <span class="string">''</span>) - <span class="number">0</span>) &lt; (dependencies.zrender.replace(<span class="string">'.'</span>, <span class="string">''</span>) - <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">                <span class="string">'zrender/src '</span> + zrender.version</span><br><span class="line">                + <span class="string">' is too old for ECharts '</span> + version</span><br><span class="line">                + <span class="string">'. Current version need ZRender '</span></span><br><span class="line">                + dependencies.zrender + <span class="string">'+'</span></span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!dom) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Initialize failed: invalid dom.'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断该DOM结构是否已经存在绑定的echarts实例</span></span><br><span class="line">    <span class="keyword">var</span> existInstance = getInstanceByDom(dom);</span><br><span class="line">    <span class="keyword">if</span> (existInstance) &#123;</span><br><span class="line">        <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">            <span class="built_in">console</span>.warn(<span class="string">'There is a chart instance already initialized on the dom.'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> existInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 需要DOM结构设定特定的width以及height值</span></span><br><span class="line">    <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">        <span class="keyword">if</span> (zrUtil.isDom(dom)</span><br><span class="line">            &amp;&amp; dom.nodeName.toUpperCase() !== <span class="string">'CANVAS'</span></span><br><span class="line">            &amp;&amp; (</span><br><span class="line">                (!dom.clientWidth &amp;&amp; (!opts || opts.width == <span class="literal">null</span>))</span><br><span class="line">                || (!dom.clientHeight &amp;&amp; (!opts || opts.height == <span class="literal">null</span>))</span><br><span class="line">            )</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="built_in">console</span>.warn(<span class="string">'Can\'t get dom width or height'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 新建Echarts实例</span></span><br><span class="line">    <span class="keyword">var</span> chart = <span class="keyword">new</span> ECharts(dom, theme, opts);</span><br><span class="line">    chart.id = <span class="string">'ec_'</span> + idBase++;</span><br><span class="line">    instances[chart.id] = chart;</span><br><span class="line"></span><br><span class="line">    modelUtil.setAttribute(dom, DOM_ATTRIBUTE_KEY, chart.id);</span><br><span class="line"></span><br><span class="line">    enableConnect(chart);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> chart;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>##Echarts对象</p>
<p>Echarts对象属性包括：</p>
<ul>
<li>this._zr(Zrender实例)</li>
<li>this._dom(DOM)</li>
<li>this._theme(主题)</li>
<li>this._chartsViews&amp;this._chartsMap(保存View数据)</li>
<li>this._componentsViews&amp;this._componentsMap(保存component数据)</li>
<li>this._api(对外API数据)</li>
<li>this._model(该echarts实例信息)</li>
<li>…</li>
</ul>
<p>Echarts对象方法包括：</p>
<ul>
<li>getDom()：获取当前实例所挂载的DOM信息</li>
<li>getZr()：获取zrender实例</li>
<li>setOption()：设置echarts option（后续将着重讲解）</li>
<li>setTheme()：设置echarts主题</li>
<li>getModel()：获取echarts实例</li>
<li>getOption()：获取option信息</li>
<li>getWidth()：this._zr.getWidth() =&gt; 通过zrender实例返回zrender中painter画布的大小</li>
<li>getHeight()：同getWidth()</li>
<li>getRenderedCanvas()：this._zr.painter.getRenderedCanvas() =&gt; 获取画布中渲染的canvas元素</li>
<li>dispatchAction(): 触发action（后续将着重讲解）</li>
<li>dispose()：销毁echarts实例</li>
<li>…</li>
</ul>
<h2 id="setOption"><a href="#setOption" class="headerlink" title="setOption"></a>setOption</h2><p>setOption()方法为用户使用echarts最直接的接口方法，用户通过setOption方法能够将设置好的option绑定至echarts图表中进行显示，那么<strong>echarts内部又是如何根据用户设定的option进行图表渲染的呢</strong>？</p>
<p>首先，我们来分析Echarts中最基本的元素Model、OptionManager以及全局Model</p>
<h3 id="OptionManager"><a href="#OptionManager" class="headerlink" title="OptionManager"></a>OptionManager</h3><p>OptionManager为option管理器，对option进行了管理与处理，定义了setOption、mountOption等方法，包括对原生option的处理，原生option格式如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> option = &#123;</span><br><span class="line">    baseOption: &#123;</span><br><span class="line">        title: &#123;...&#125;,</span><br><span class="line">        legend: &#123;...&#125;,</span><br><span class="line">        series: [</span><br><span class="line">            &#123;<span class="attr">data</span>: [...]&#125;,</span><br><span class="line">            &#123;<span class="attr">data</span>: [...]&#125;,</span><br><span class="line">             ...</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    timeline: &#123;...&#125;,</span><br><span class="line">    options: [</span><br><span class="line">        &#123;<span class="attr">title</span>: &#123;...&#125;, <span class="attr">series</span>: &#123;<span class="attr">data</span>: [...]&#125;&#125;,</span><br><span class="line">        &#123;<span class="attr">title</span>: &#123;...&#125;, <span class="attr">series</span>: &#123;<span class="attr">data</span>: [...]&#125;&#125;,</span><br><span class="line">        ...</span><br><span class="line">    ],</span><br><span class="line">    media: [</span><br><span class="line">        &#123;</span><br><span class="line">            query: &#123;<span class="attr">maxWidth</span>: <span class="number">320</span>&#125;,</span><br><span class="line">            option: &#123;<span class="attr">series</span>: &#123;<span class="attr">x</span>: <span class="number">20</span>&#125;, <span class="attr">visualMap</span>: &#123;<span class="attr">show</span>: <span class="literal">false</span>&#125;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            query: &#123;<span class="attr">minWidth</span>: <span class="number">320</span>, <span class="attr">maxWidth</span>: <span class="number">720</span>&#125;,</span><br><span class="line">            option: &#123;<span class="attr">series</span>: &#123;<span class="attr">x</span>: <span class="number">500</span>&#125;, <span class="attr">visualMap</span>: &#123;<span class="attr">show</span>: <span class="literal">true</span>&#125;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            option: &#123;<span class="attr">series</span>: &#123;<span class="attr">x</span>: <span class="number">1200</span>&#125;, <span class="attr">visualMap</span>: &#123;<span class="attr">show</span>: <span class="literal">true</span>&#125;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><p>Model是Echarts中最基本的元素，其定义了<strong>mergeOption</strong>等方法，混合了LineStyle、AraeStyle、ItemStyle以及TextStyle。是Component（后续介绍）以及GlobalModel等元素的基类。</p>
<h3 id="GlobalModel"><a href="#GlobalModel" class="headerlink" title="GlobalModel"></a>GlobalModel</h3><p>GlobalModel扩展自Model，GlobalModel中定义了init方法，要求在初始化GloblaModel对象实例时需要传递OptionManager实例作为构造方法的参数，GlobalModel中定义了查找component、series(Views)，管理option等方法。</p>
<ul>
<li>setOption()：通过optionManager.setOption()实现</li>
<li>resetOption()：通过optionManager.mountOption()实现</li>
<li>重写mergeOption()</li>
<li>getComponent()：通过component的mainType获取component</li>
<li>queryComponents()：除mainType外，将id、index、name也作为查询component的条件进行component的检索</li>
<li>findComponents()：与queryComponents类似，但echarts源码中有注释此方法更方便于内部使用</li>
<li>eachComponent()：遍历component</li>
<li>getSeriesByName()：通过series name获取series</li>
<li>getSeriesByIndex()：通过seriesIndex获取series</li>
<li>getSeriesByType()：通过series subType获取series</li>
<li>getSeries()：获取series数据</li>
<li>eachSeries()：遍历series</li>
<li>filterSeries()：根据条件过滤series</li>
</ul>
<h3 id="setOption调用后echarts操作流程"><a href="#setOption调用后echarts操作流程" class="headerlink" title="setOption调用后echarts操作流程"></a>setOption调用后echarts操作流程</h3><p>回归setOption方法的调用，echarts.js的setOption方法的主要代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">echartsProto.setOption = <span class="function"><span class="keyword">function</span> (<span class="params">option, notMerge, lazyUpdate</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">        assert(!<span class="keyword">this</span>[IN_MAIN_PROCESS], <span class="string">'`setOption` should not be called during main process.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> silent;</span><br><span class="line">    <span class="keyword">if</span> (isObject(notMerge)) &#123;</span><br><span class="line">        lazyUpdate = notMerge.lazyUpdate;</span><br><span class="line">        silent = notMerge.silent;</span><br><span class="line">        notMerge = notMerge.notMerge;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>[IN_MAIN_PROCESS] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>._model || notMerge) &#123;</span><br><span class="line">        <span class="keyword">var</span> optionManager = <span class="keyword">new</span> OptionManager(<span class="keyword">this</span>._api);</span><br><span class="line">        <span class="keyword">var</span> theme = <span class="keyword">this</span>._theme;</span><br><span class="line">        <span class="comment">// 初始化model</span></span><br><span class="line">        <span class="keyword">var</span> ecModel = <span class="keyword">this</span>._model = <span class="keyword">new</span> GlobalModel(<span class="literal">null</span>, <span class="literal">null</span>, theme, optionManager);</span><br><span class="line">        ecModel.scheduler = <span class="keyword">this</span>._scheduler;</span><br><span class="line">        ecModel.init(<span class="literal">null</span>, <span class="literal">null</span>, theme, optionManager);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用GlobalModel中的setOption方法</span></span><br><span class="line">    <span class="keyword">this</span>._model.setOption(option, optionPreprocessorFuncs);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (lazyUpdate) &#123;</span><br><span class="line">        <span class="keyword">this</span>[OPTION_UPDATED] = &#123;<span class="attr">silent</span>: silent&#125;;</span><br><span class="line">        <span class="keyword">this</span>[IN_MAIN_PROCESS] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 准备数据</span></span><br><span class="line">        prepare(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">// 更新视图</span></span><br><span class="line">        updateMethods.update.call(<span class="keyword">this</span>);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>在调用globalModel.setOption方法之后，echarts通过调用</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">updateMethods.update.call(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure>
<p>进行视图更新。</p>
<p>update()方法中调用了render方法进行视图渲染，render方法主要代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">ecIns, ecModel, api, payload</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    renderComponents(ecIns, ecModel, api, payload);</span><br><span class="line"></span><br><span class="line">    each(ecIns._chartsViews, <span class="function"><span class="keyword">function</span> (<span class="params">chart</span>) </span>&#123;</span><br><span class="line">        chart.__alive = <span class="literal">false</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    renderSeries(ecIns, ecModel, api, payload);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Remove groups of unrendered charts</span></span><br><span class="line">    each(ecIns._chartsViews, <span class="function"><span class="keyword">function</span> (<span class="params">chart</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!chart.__alive) &#123;</span><br><span class="line">            chart.remove(ecModel, api);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>render方法分为renderComponents（渲染Component）以及renderSeries（渲染series）两大部分，</p>
<p> renderComponents方法中通过each遍历调用component下的<strong>render</strong>方法</p>
<p>renderSeries方法在echarts3.0中也是通过each遍历调用series下的render方法，在4.0版本之后，便将控制渲染的逻辑交给了scheduler调度器进行处理，通过调用charts中的reset方法进而调用series下的render方法，主要代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderTaskReset</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> seriesModel = context.model;</span><br><span class="line">    <span class="keyword">var</span> ecModel = context.ecModel;</span><br><span class="line">    <span class="keyword">var</span> api = context.api;</span><br><span class="line">    <span class="keyword">var</span> payload = context.payload;</span><br><span class="line">    <span class="comment">// ???! remove updateView updateVisual</span></span><br><span class="line">    <span class="keyword">var</span> progressiveRender = seriesModel.pipelineContext.progressiveRender;</span><br><span class="line">    <span class="keyword">var</span> view = context.view;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> updateMethod = payload &amp;&amp; inner(payload).updateMethod;</span><br><span class="line">    <span class="keyword">var</span> methodName = progressiveRender</span><br><span class="line">        ? <span class="string">'incrementalPrepareRender'</span></span><br><span class="line">        : (updateMethod &amp;&amp; view[updateMethod])</span><br><span class="line">        ? updateMethod</span><br><span class="line">        <span class="comment">// `appendData` is also supported when data amount</span></span><br><span class="line">        <span class="comment">// is less than progressive threshold.</span></span><br><span class="line">        : <span class="string">'render'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (methodName !== <span class="string">'render'</span>) &#123;</span><br><span class="line">        view[methodName](seriesModel, ecModel, api, payload);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> progressMethodMap[methodName];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> progressMethodMap = &#123;</span><br><span class="line">    ...</span><br><span class="line">    render: &#123;</span><br><span class="line">        forceFirstProgress: <span class="literal">true</span>,</span><br><span class="line">        progress: <span class="function"><span class="keyword">function</span> (<span class="params">params, context</span>) </span>&#123;</span><br><span class="line">            context.view.render(</span><br><span class="line">                context.model, context.ecModel, context.api, context.payload</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="dispatchAction"><a href="#dispatchAction" class="headerlink" title="dispatchAction"></a>dispatchAction</h2><p>我们在使用echarts的过程中，经常会需要使用echarts对外提供的一些api，如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echartsInstance.dispatchAction(&#123;</span><br><span class="line">    type: <span class="string">'updateAxisPointer'</span>,</span><br><span class="line">    x: <span class="number">20</span>,</span><br><span class="line">    y: <span class="number">30</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>那么<strong>echarts是怎么对这些api进行处理的呢</strong>？</p>
<p>能够通过dispatchAction使用的api，首先必须通过registerAction注册api，举updateAxisPointer的🌰，注册dataZoom api的主要代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echarts.registerAction(&#123;</span><br><span class="line">    type: <span class="string">'updateAxisPointer'</span>,</span><br><span class="line">    event: <span class="string">'updateAxisPointer'</span>,</span><br><span class="line">    update: <span class="string">':updateAxisPointer'</span></span><br><span class="line">&#125;, axisTrigger);</span><br></pre></td></tr></table></figure>
<p>registerAction主要代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">registerAction</span>(<span class="params">actionInfo, eventName, action</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 参数处理：将传递过来的trigger作为action进行保存</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> eventName === <span class="string">'function'</span>) &#123;</span><br><span class="line">        action = eventName;</span><br><span class="line">        eventName = <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> actionType = isObject(actionInfo)</span><br><span class="line">    ? actionInfo.type</span><br><span class="line">    : ([actionInfo, actionInfo = &#123;</span><br><span class="line">        event: eventName</span><br><span class="line">    &#125;][<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Event name is all lowercase</span></span><br><span class="line">    actionInfo.event = (actionInfo.event || actionType).toLowerCase();</span><br><span class="line">    eventName = actionInfo.event;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Validate action type and event name.</span></span><br><span class="line">    assert(ACTION_REG.test(actionType) &amp;&amp; ACTION_REG.test(eventName));</span><br><span class="line">    <span class="comment">// 将action信息保存至actions</span></span><br><span class="line">    <span class="keyword">if</span> (!actions[actionType]) &#123;</span><br><span class="line">        actions[actionType] = &#123;<span class="attr">action</span>: action, <span class="attr">actionInfo</span>: actionInfo&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    eventActionMap[eventName] = actionType;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>还是看updateAxisPointer这个🌰：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echartsInstance.dispatchAction(&#123;</span><br><span class="line">    type: <span class="string">'updateAxisPointer'</span>,</span><br><span class="line">    x: <span class="number">20</span>,</span><br><span class="line">    y: <span class="number">30</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>dispatchAction的主要代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">echartsProto.dispatchAction = <span class="function"><span class="keyword">function</span> (<span class="params">payload, opt</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isObject(opt)) &#123;</span><br><span class="line">        opt = &#123;<span class="attr">silent</span>: !!opt&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!actions[payload.type]) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Avoid dispatch action before setOption. Especially in `connect`.</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>._model) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// May dispatchAction in rendering procedure</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>[IN_MAIN_PROCESS]) &#123;</span><br><span class="line">        <span class="keyword">this</span>._pendingActions.push(payload);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用doDispatchAction</span></span><br><span class="line">    doDispatchAction.call(<span class="keyword">this</span>, payload, opt.silent);</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doDispatchAction</span>(<span class="params">payload, silent</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> payloadType = payload.type;</span><br><span class="line">    <span class="keyword">var</span> escapeConnect = payload.escapeConnect;</span><br><span class="line">    <span class="comment">// 根据paoload中的type信息，获取actions对应的action数据</span></span><br><span class="line">    <span class="keyword">var</span> actionWrap = actions[payloadType];</span><br><span class="line">    <span class="keyword">var</span> actionInfo = actionWrap.actionInfo;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> cptType = (actionInfo.update || <span class="string">'update'</span>).split(<span class="string">':'</span>);</span><br><span class="line">    <span class="keyword">var</span> updateMethod = cptType.pop();</span><br><span class="line">    cptType = cptType[<span class="number">0</span>] != <span class="literal">null</span> &amp;&amp; parseClassType(cptType[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>[IN_MAIN_PROCESS] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> payloads = [payload];</span><br><span class="line">    <span class="keyword">var</span> batched = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// Batch action</span></span><br><span class="line">    <span class="keyword">if</span> (payload.batch) &#123;</span><br><span class="line">        batched = <span class="literal">true</span>;</span><br><span class="line">        payloads = zrUtil.map(payload.batch, <span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">            item = zrUtil.defaults(zrUtil.extend(&#123;&#125;, item), payload);</span><br><span class="line">            item.batch = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> eventObjBatch = [];</span><br><span class="line">    <span class="keyword">var</span> eventObj;</span><br><span class="line">    <span class="keyword">var</span> isHighDown = payloadType === <span class="string">'highlight'</span> || payloadType === <span class="string">'downplay'</span>;</span><br><span class="line"></span><br><span class="line">    each(payloads, <span class="function"><span class="keyword">function</span> (<span class="params">batchItem</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Action can specify the event by return it.</span></span><br><span class="line">        <span class="comment">// 触发action trigger</span></span><br><span class="line">        eventObj = actionWrap.action(batchItem, <span class="keyword">this</span>._model, <span class="keyword">this</span>._api);</span><br><span class="line">        <span class="comment">// Emit event outside</span></span><br><span class="line">        eventObj = eventObj || zrUtil.extend(&#123;&#125;, batchItem);</span><br><span class="line">        <span class="comment">// Convert type to eventType</span></span><br><span class="line">        eventObj.type = actionInfo.event || eventObj.type;</span><br><span class="line">        eventObjBatch.push(eventObj);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// light update does not perform data process, layout and visual.</span></span><br><span class="line">        <span class="keyword">if</span> (isHighDown) &#123;</span><br><span class="line">            <span class="comment">// method, payload, mainType, subType</span></span><br><span class="line">            updateDirectly(<span class="keyword">this</span>, updateMethod, batchItem, <span class="string">'series'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cptType) &#123;</span><br><span class="line">            updateDirectly(<span class="keyword">this</span>, updateMethod, batchItem, cptType.main, cptType.sub);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="keyword">this</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>博文到这里就差不多结束了，在此博文中，我对echarts渲染视图的过程进行了简单的分析，并对setOption以及dispatchAction方法的实现过程进行了大致的分析。</p>
<p>接下来的文章将会深入Component以及Series中，解读echarts是如何使用zrender graphic渲染图表的，希望能帮助到大家～一起加油！！</p>
]]></content>
      
        <categories>
            
            <category> echarts </category>
            
        </categories>
        
        
        <tags>
            
            <tag> echarts源码解读 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[echarts源码解读《一》：zrender源码概要分析]]></title>
      <url>/2019/05/20/echarts-1/</url>
      <content type="html"><![CDATA[<blockquote>
<p>2019年首次发博，不知道大家有没有出去过520呢？？我反正是脚伤了！哭</p>
<p>今天7月份我将入职腾讯，我的工作导师于3月份让我学习可视化，前段时间一直在忙毕设，也就耽搁下来了。</p>
<p>在echarts源码解读系列文章中，我将会记录我学习echarts源码时的过程，并对echarts的基本实现进行大致的解读，写博客是为了能够让自己对echarts有更好的了解，也希望能够通过博客帮助到需要学习解读echarts源码的小伙伴们，一起加油吧！！！</p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于echarts是基于zrender进行实现的，所以要解读echarts源码，首先要对zrender有大致的了解，在这篇文章中，我将对zrender的整体结构进行大致的解读。</p>
<a id="more"></a>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>zrender是canvas的一个类库，也就是说zrender是基于canvas实现的，canvas API可以参考：<a href="http://www.w3school.com.cn/tags/html_ref_canvas.asp" target="_blank" rel="noopener">W3CSchool Canvas 参考手册</a> </p>
<p>在后续的解读中，我们会介绍zrender使用canvas api 的位置及用途。</p>
<h1 id="目录介绍"><a href="#目录介绍" class="headerlink" title="目录介绍"></a>目录介绍</h1><p>文件夹：</p>
<ul>
<li>animation 动画有关； </li>
<li>contain 包含判断； </li>
<li>container Group.js 元素组的概念； </li>
<li>core 核心代码，包含一些工具（util.js）、事件（event.js）、唯一ID(guid.js)、矩阵运算有关（matrix.js）等； </li>
<li>dom HandleProxy.js dom事件有关； </li>
<li>graphic 图形有关，shape文件夹下就是各个图形的js文件； </li>
<li>mixin 混入模式要混入的函数; </li>
<li>tool 工具函数，包括颜色工具(color.js)，path工具(path.js)和转换工具（transformPath.js）; </li>
<li>vml IE中的画笔，<a href="http://www.g168.net/txt/vml/]" target="_blank" rel="noopener">vml解释</a></li>
</ul>
<p>全局的文件： </p>
<ul>
<li>config.js 配置文件 </li>
<li>Element.js 元素文件作为zrender最基本的元素 </li>
<li>Handle.js C层，控制层 </li>
<li>Layer.js 图层管理 </li>
<li>Painter.js V层，视图层 </li>
<li>Storage.js M层，数据管理层 </li>
<li>zrender.js 入口</li>
</ul>
<h1 id="zrender整体架构"><a href="#zrender整体架构" class="headerlink" title="zrender整体架构"></a>zrender整体架构</h1><p>zrender采用了MVC封装，M为Model数据层，V为View视图层，C为Controller控制层：</p>
<ul>
<li>Storage(M)：Storage为zrender中的Model层，它主要进行图形数据的增删改查(CRUD)操作；</li>
<li>Painter(V)：Painter为zrender中的View层，它主要对canvas元素的生命周期进行管理，渲染视图以及控制更新等。定义了addHover、setBackgroundColor等方法；</li>
<li>Handler(C)：Handler为zrender中的Controller层，它主要实现事件交互处理，实现完整dom事件的模拟封装。</li>
</ul>
<h1 id="图形"><a href="#图形" class="headerlink" title="图形"></a>图形</h1><p>处于graphic文件夹下，zrender定义了一系列图形，供外界调用，包括圆形、矩形、心形、扇形、多边形、折线等，echarts通过调用zrender定义好的图形，可以很便捷地完成图表渲染。</p>
<h2 id="Displayable"><a href="#Displayable" class="headerlink" title="Displayable"></a>Displayable</h2><p><strong>Displayable.js</strong>为<strong>Path、Text</strong>等的基类，继承自<strong>Element</strong>，定义了setStyle、useStyle等方法，</p>
<h2 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h2><p>文本，继承自Displayable，调用了helper/text.js中的renderText方法进行绘制。主要代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">renderText</span>(<span class="params">hostEl, ctx, text, style, rect, prevEl</span>) </span>&#123;</span><br><span class="line">    style.rich</span><br><span class="line">        ? renderRichText(hostEl, ctx, text, style, rect, prevEl)</span><br><span class="line">        : renderPlainText(hostEl, ctx, text, style, rect, prevEl);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>文本分为富文本以及普通文本进行分别渲染，它们均通过调用canvas的<strong>ctx.fillText或ctx.strokeText</strong> 等api进行文本渲染，具体实现可以查看helper/text.js文件。</p>
<h2 id="Style"><a href="#Style" class="headerlink" title="Style"></a>Style</h2><p>图形的样式文件，定义了基本的样式属性，以及样式set、clone以及判断等方法。</p>
<h2 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h2><p>path为图形的基类，继承自Displayable，定义了buildPath、getBoundingRect、setShape等方法，其包含this._style属性即为<strong>Style</strong>对象实例。</p>
<h2 id="Shape"><a href="#Shape" class="headerlink" title="Shape"></a>Shape</h2><p>shape文件下存放着zrender定义的图形文件，扩展自Path。</p>
<h3 id="Circle"><a href="#Circle" class="headerlink" title="Circle"></a>Circle</h3><p>圆形，通过调用Path.extend方法进行扩展，重写了<strong>buildPath</strong>方法，buildPath调用了canvas api：<strong>ctx.arc</strong>进行圆形的绘制，主要实现代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">buildPath: <span class="function"><span class="keyword">function</span> (<span class="params">ctx, shape, inBundle</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (inBundle) &#123;</span><br><span class="line">        ctx.moveTo(shape.cx + shape.r, shape.cy);</span><br><span class="line">    &#125;</span><br><span class="line">    ctx.arc(shape.cx, shape.cy, shape.r, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Arc"><a href="#Arc" class="headerlink" title="Arc"></a>Arc</h3><p>弧形，通过调用Path.extend方法进行扩展，重写了<strong>buildPath</strong>方法，buildPath调用了canvas api：<strong>ctx.arc</strong>进行弧形的绘制，主要实现代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">buildPath: <span class="function"><span class="keyword">function</span> (<span class="params">ctx, shape</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = shape.cx;</span><br><span class="line">    <span class="keyword">var</span> y = shape.cy;</span><br><span class="line">    <span class="keyword">var</span> r = <span class="built_in">Math</span>.max(shape.r, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">var</span> startAngle = shape.startAngle;</span><br><span class="line">    <span class="keyword">var</span> endAngle = shape.endAngle;</span><br><span class="line">    <span class="keyword">var</span> clockwise = shape.clockwise;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> unitX = <span class="built_in">Math</span>.cos(startAngle);</span><br><span class="line">    <span class="keyword">var</span> unitY = <span class="built_in">Math</span>.sin(startAngle);</span><br><span class="line"></span><br><span class="line">    ctx.moveTo(unitX * r + x, unitY * r + y);</span><br><span class="line">    ctx.arc(x, y, r, startAngle, endAngle, !clockwise);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Heart"><a href="#Heart" class="headerlink" title="Heart"></a>Heart</h3><p>心形❤️，通过调用Path.extend方法进行扩展，重写了<strong>buildPath</strong>方法，buildPath调用了canvas api：<strong>ctx.bezierCurveTo</strong>进行弧形的绘制，主要实现代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">buildPath: <span class="function"><span class="keyword">function</span> (<span class="params">ctx, shape</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = shape.cx;</span><br><span class="line">    <span class="keyword">var</span> y = shape.cy;</span><br><span class="line">    <span class="keyword">var</span> a = shape.width;</span><br><span class="line">    <span class="keyword">var</span> b = shape.height;</span><br><span class="line">    ctx.moveTo(x, y);</span><br><span class="line">    ctx.bezierCurveTo(</span><br><span class="line">        x + a / <span class="number">2</span>, y - b * <span class="number">2</span> / <span class="number">3</span>,</span><br><span class="line">        x + a * <span class="number">2</span>, y + b / <span class="number">3</span>,</span><br><span class="line">        x, y + b</span><br><span class="line">    );</span><br><span class="line">    ctx.bezierCurveTo(</span><br><span class="line">        x - a * <span class="number">2</span>, y + b / <span class="number">3</span>,</span><br><span class="line">        x - a / <span class="number">2</span>, y - b * <span class="number">2</span> / <span class="number">3</span>,</span><br><span class="line">        x, y</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>bezierCurveTo(控制点1x坐标, 控制点1y坐标, 控制点2x坐标, 控制点2y坐标, 结束点x坐标, 结束点y坐标)</p>
<p>三次被塞尔曲线绘制：</p>
<ul>
<li>P0为开始点，P1为控制点1，P2为控制点2，P3为结束点</li>
<li>取 <strong>P0P1</strong> 中点M</li>
<li>取 <strong>P1P2</strong> 中点M’</li>
<li>取 <strong>MM’</strong> 中点P</li>
<li>则 <strong>P</strong> 为曲线的必经点</li>
</ul>
<p>具体绘制图如下：</p>
<p><img src="/img/echarts/贝塞尔1.png" alt="贝塞尔1"></p>
<p>同理，我们可以绘制出左半边心形：</p>
<p><img src="/img/echarts/贝塞尔2.png" alt="贝塞尔2"></p>
<h3 id="Droplet"><a href="#Droplet" class="headerlink" title="Droplet"></a>Droplet</h3><p>水滴形状💧，通过调用Path.extend方法进行扩展，重写了<strong>buildPath</strong>方法，buildPath调用了canvas api：<strong>ctx.bezierCurveTo</strong>进行弧形的绘制，贝塞尔曲线的绘制过程同<strong>心形</strong>绘制原理，主要实现代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">buildPath: <span class="function"><span class="keyword">function</span> (<span class="params">ctx, shape</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = shape.cx;</span><br><span class="line">    <span class="keyword">var</span> y = shape.cy;</span><br><span class="line">    <span class="keyword">var</span> a = shape.width;</span><br><span class="line">    <span class="keyword">var</span> b = shape.height;</span><br><span class="line"></span><br><span class="line">    ctx.moveTo(x, y + a);</span><br><span class="line">    ctx.bezierCurveTo(</span><br><span class="line">        x + a,</span><br><span class="line">        y + a,</span><br><span class="line">        x + a * <span class="number">3</span> / <span class="number">2</span>,</span><br><span class="line">        y - a / <span class="number">3</span>,</span><br><span class="line">        x,</span><br><span class="line">        y - b</span><br><span class="line">    );</span><br><span class="line">    ctx.bezierCurveTo(</span><br><span class="line">        x - a * <span class="number">3</span> / <span class="number">2</span>,</span><br><span class="line">        y - a / <span class="number">3</span>,</span><br><span class="line">        x - a,</span><br><span class="line">        y + a,</span><br><span class="line">        x,</span><br><span class="line">        y + a</span><br><span class="line">    );</span><br><span class="line">    ctx.closePath();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Ellipse"><a href="#Ellipse" class="headerlink" title="Ellipse"></a>Ellipse</h3><p>椭圆，通过调用Path.extend方法进行扩展，重写了<strong>buildPath</strong>方法，buildPath调用了canvas api：<strong>ctx.bezierCurveTo</strong>进行弧形的绘制，贝塞尔曲线的绘制过程同<strong>心形</strong>绘制原理，主要实现代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">buildPath: <span class="function"><span class="keyword">function</span> (<span class="params">ctx, shape</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> k = <span class="number">0.5522848</span>;</span><br><span class="line">    <span class="keyword">var</span> x = shape.cx;</span><br><span class="line">    <span class="keyword">var</span> y = shape.cy;</span><br><span class="line">    <span class="keyword">var</span> a = shape.rx;</span><br><span class="line">    <span class="keyword">var</span> b = shape.ry;</span><br><span class="line">    <span class="keyword">var</span> ox = a * k; <span class="comment">// 水平控制点偏移量</span></span><br><span class="line">    <span class="keyword">var</span> oy = b * k; <span class="comment">// 垂直控制点偏移量</span></span><br><span class="line">    <span class="comment">// 从椭圆的左端点开始顺时针绘制四条三次贝塞尔曲线</span></span><br><span class="line">    ctx.moveTo(x - a, y);</span><br><span class="line">    ctx.bezierCurveTo(x - a, y - oy, x - ox, y - b, x, y - b);</span><br><span class="line">    ctx.bezierCurveTo(x + ox, y - b, x + a, y - oy, x + a, y);</span><br><span class="line">    ctx.bezierCurveTo(x + a, y + oy, x + ox, y + b, x, y + b);</span><br><span class="line">    ctx.bezierCurveTo(x - ox, y + b, x - a, y + oy, x - a, y);</span><br><span class="line">    ctx.closePath();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Sector"><a href="#Sector" class="headerlink" title="Sector"></a>Sector</h3><p>扇形，通过调用Path.extend方法进行扩展，重写了<strong>buildPath</strong>方法，buildPath调用了canvas api：<strong>ctx.arc以及arc.lineTo</strong>进行圆形的绘制，主要实现代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">buildPath: <span class="function"><span class="keyword">function</span> (<span class="params">ctx, shape</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = shape.cx;</span><br><span class="line">    <span class="keyword">var</span> y = shape.cy;</span><br><span class="line">    <span class="keyword">var</span> r0 = <span class="built_in">Math</span>.max(shape.r0 || <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">var</span> r = <span class="built_in">Math</span>.max(shape.r, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">var</span> startAngle = shape.startAngle;</span><br><span class="line">    <span class="keyword">var</span> endAngle = shape.endAngle;</span><br><span class="line">    <span class="keyword">var</span> clockwise = shape.clockwise;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> unitX = <span class="built_in">Math</span>.cos(startAngle);</span><br><span class="line">    <span class="keyword">var</span> unitY = <span class="built_in">Math</span>.sin(startAngle);</span><br><span class="line"></span><br><span class="line">    ctx.moveTo(unitX * r0 + x, unitY * r0 + y);</span><br><span class="line"></span><br><span class="line">    ctx.lineTo(unitX * r + x, unitY * r + y);</span><br><span class="line"></span><br><span class="line">    ctx.arc(x, y, r, startAngle, endAngle, !clockwise);</span><br><span class="line"></span><br><span class="line">    ctx.lineTo(</span><br><span class="line">        <span class="built_in">Math</span>.cos(endAngle) * r0 + x,</span><br><span class="line">        <span class="built_in">Math</span>.sin(endAngle) * r0 + y</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (r0 !== <span class="number">0</span>) &#123;</span><br><span class="line">        ctx.arc(x, y, r0, endAngle, startAngle, clockwise);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ctx.closePath();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>zrender还定义了<strong>Rect矩形</strong>、<strong>Isogon正多边形</strong>、<strong>Line直线</strong>、<strong>Polygon多边形</strong>、<strong>Polyline折线</strong>、<strong>Ring圆环</strong>、<strong>Rose玫瑰线</strong>、<strong>Star n角星</strong>等图形，其实现过程基本与上述图形上类似，都是基于canvas的<strong>lineTo、arc、bezierCurveTo</strong>等api进行绘制的，这边就不做一一介绍了。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>zrender中封装了很多工具，在后续echarts源码解读中，我们可以看到echarts是基于zrender进行开发的。</p>
<p>希望这篇博文能够帮助大家对zrender及其实现的图形有大致的了解～</p>
]]></content>
      
        <categories>
            
            <category> echarts </category>
            
        </categories>
        
        
        <tags>
            
            <tag> echarts源码解读 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[云服务器之后台运行]]></title>
      <url>/2018/05/29/nohup-sh/</url>
      <content type="html"><![CDATA[<blockquote>
<p>最近在将项目部署到云服务器上，所以也写了好几篇博客，关于在部署项目时遇到的问题，此次我主要是记录如何将项目在后台运行，且不会因为断开与云服务器的连接而被终止，希望能对大家有所帮助～</p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>此篇博客是因为我在项目中使用了&amp;，让项目后台运行能够正常访问后，便使用logout命令断开了与云服务器的连接，断开后再次访问，却发现访问失败了，于是再次连接云服务器，通过jobs查看后台进程，发现刚刚在后台运行的项目已经被终止了。<br><a id="more"></a></p>
<h1 id="后台运行进程"><a href="#后台运行进程" class="headerlink" title="后台运行进程"></a>后台运行进程</h1><p>因为我是运行express项目(example)，所以我先进入example目录，执行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim test.sh</span><br></pre></td></tr></table></figure>
<p>该命令以你在编辑环境中输入的内容(npm start)作为文件内容，在当前目录生成test.sh文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./test.sh &amp;</span><br></pre></td></tr></table></figure>
<p>通过nohup执行该sh文件，则成功将进程放置在后台运行了，你可以看到在当前目录下生成了名为nohup.out的文件</p>
<h1 id="终止进程"><a href="#终止进程" class="headerlink" title="终止进程"></a>终止进程</h1><p>首先通过执行以下命令查看后台运行的进程号</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -lnp | grep 端口号</span><br></pre></td></tr></table></figure>
<p>在通过执行以下命令来终止进程</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 进程号</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>很简单但很实用～希望能对大家有所帮助～</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nohup </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[云服务器之代理]]></title>
      <url>/2018/05/28/server-proxy/</url>
      <content type="html"><![CDATA[<blockquote>
<p>今天想着要把自己做的那个Demo部署到服务器上，却发现在本地可以正常代理的请求，在经过打包部署后，api请求代理似乎已经失效了。花了很久的时间在解决这个问题，最后特别感谢某修给予的灵感以及学长的耐心解答，为了便于以后更方便地使用，我将之记录下来，也希望能够对大家有所帮助～</p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在云服务器上，我使用了nginx作为我的web服务器，nginx 作为目前最流行的web服务器之一，可以很方便地实现反向代理。当在一台主机上部署了多个不同的web服务器，并且需要能在80端口同时访问这些web服务器时，可以使用 nginx 的反向代理功能: 用 nginx 在80端口监听所有请求，并依据转发规则(比较常见的是以 URI 来转发)转发到对应的web服务器上。<br><a id="more"></a><br>在我的项目中，是因为所需要请求的API位于服务器上的不同端口，为了实现跨域请求，所以需要进行代理。</p>
<h1 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h1><p>我的服务器域名为<strong>qq.qiuruolin.cn</strong></p>
<h2 id="不带URI的代理配置"><a href="#不带URI的代理配置" class="headerlink" title="不带URI的代理配置"></a>不带URI的代理配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">            server_name qq.qiuruolin.cn;</span><br><span class="line">            location /api/ &#123;</span><br><span class="line">                    proxy_pass http://qq.qiuruolin.cn:3000;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上的配置会 <a href="http://qq.qiuruolin.cn/api" target="_blank" rel="noopener">http://qq.qiuruolin.cn/api</a> 下的请求( GET 和 POST 请求都会转发)转发到 <a href="http://qq.qiuruolin.cn:3000/" target="_blank" rel="noopener">http://qq.qiuruolin.cn:3000/</a></p>
<p><strong>需要注意的是，在以上的配置中，<a href="http://qq.qiuruolin.cn:3000是没有指定URI的。" target="_blank" rel="noopener">http://qq.qiuruolin.cn:3000是没有指定URI的。</a> </strong></p>
<ul>
<li><p>如果代理服务器地址中是带有URI的，此URI会替换掉 location 所匹配的URI部分。 </p>
</li>
<li><p>如果代理服务器地址中是不带有URI的，则会用完整的请求URL来转发到代理服务器。</p>
</li>
</ul>
<h2 id="带URI的代理配置"><a href="#带URI的代理配置" class="headerlink" title="带URI的代理配置"></a>带URI的代理配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">            server_name qq.qiuruolin.cn;</span><br><span class="line">            location /api/ &#123;</span><br><span class="line">                    proxy_pass http://qq.qiuruolin.cn:3000/uri/;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>举🌰：</p>
<ul>
<li><p>不带URI<br><a href="http://qq.qiuruolin.cn/api/user/register-&gt;" target="_blank" rel="noopener">http://qq.qiuruolin.cn/api/user/register-&gt;</a> <a href="http://qq.qiuruolin.cn:3000/api/user/register" target="_blank" rel="noopener">http://qq.qiuruolin.cn:3000/api/user/register</a></p>
</li>
<li><p>带URI<br><a href="http://qq.qiuruolin.cn/api/user/register-&gt;" target="_blank" rel="noopener">http://qq.qiuruolin.cn/api/user/register-&gt;</a> <a href="http://qq.qiuruolin.cn:3000/uri/user/register" target="_blank" rel="noopener">http://qq.qiuruolin.cn:3000/uri/user/register</a></p>
</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这次在服务器上的代理，开始的时候真的让我感觉到很混乱，以此博客纪念曾经混乱的自己～希望对大家有所帮助～继续努力！！！</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 服务器代理 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux之MySQL数据库常用操作]]></title>
      <url>/2018/05/28/Linux-mysql/</url>
      <content type="html"><![CDATA[<blockquote>
<p>因为最近在使用云服务器部署项目，所以也难免要在服务器上使用MySQL，所以就想把MySQL常使用记录下来，以便日后查看并熟悉～也希望能够对大家有所帮助～</p>
</blockquote>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>首先你需要在云服务器上下载安装MySQL，网上有很多大牛们都写了相关的博客，这里就不再重复啦～<br>注意：MySQL 中每个命令后都要以分号;结尾。</p>
<a id="more"></a>
<h1 id="显示数据库"><a href="#显示数据库" class="headerlink" title="显示数据库"></a>显示数据库</h1><p><strong>show databases;</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure></p>
<p><img src="/img/mysql/show-database.png" alt="显示所有数据库"></p>
<p>Mysql 刚安装完有两个数据库：mysql 和test。mysql 库非常重要，它里面有MySQL 的系统信息，我们改密码和新增用户，实际上就是用这个库中的相关表进行操作。</p>
<h1 id="建库："><a href="#建库：" class="headerlink" title="建库："></a>建库：</h1><p><strong>create database 库名;</strong></p>
<p>例如：创建一个名字位node的库</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database node;</span><br></pre></td></tr></table></figure>
<p><img src="/img/mysql/create-success.png" alt="创建数据库"></p>
<h1 id="建表："><a href="#建表：" class="headerlink" title="建表："></a>建表：</h1><p><strong>create table 表名 (字段设定列表);</strong></p>
<p>例如：在刚创建的node库中建立表user, 表中有uid(序号, 自动增长), username(姓名), password(密码), email(邮箱)四个字段</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use node;</span><br><span class="line">create table user (uid int(4) auto_increment not null primary key, username varchar(255), password varchar(255), email varchar(255));</span><br></pre></td></tr></table></figure>
<h1 id="显示数据库中的表"><a href="#显示数据库中的表" class="headerlink" title="显示数据库中的表"></a>显示数据库中的表</h1><p><strong>show tables;</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use node; //打开库</span><br><span class="line">show tables;</span><br></pre></td></tr></table></figure></p>
<p><img src="/img/mysql/show-tables.png" alt="显示表"></p>
<h1 id="显示数据表的结构："><a href="#显示数据表的结构：" class="headerlink" title="显示数据表的结构："></a>显示数据表的结构：</h1><p><strong>describe 表名;</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">describe user;</span><br></pre></td></tr></table></figure></p>
<p><img src="/img/mysql/describe-user.png" alt="显示表结构"></p>
<h1 id="增加记录"><a href="#增加记录" class="headerlink" title="增加记录"></a>增加记录</h1><p>例如：增加几条相关记录。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert into user(username, password, email) values(<span class="string">'qiuqiu'</span>, <span class="string">'qqq'</span>, <span class="string">'qiw@qq.com'</span>);</span><br><span class="line">insert into user(username, password, email) values(<span class="string">'hehe'</span>, <span class="string">'123456'</span>, <span class="string">'wywu@qq.com'</span>);</span><br></pre></td></tr></table></figure>
<h1 id="显示表中的记录："><a href="#显示表中的记录：" class="headerlink" title="显示表中的记录："></a>显示表中的记录：</h1><p>可以使用<strong>select * from 表名;</strong>来查看我们表中的数据</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user;</span><br></pre></td></tr></table></figure>
<p><img src="/img/mysql/select.png" alt="显示表记录"></p>
<h1 id="修改记录"><a href="#修改记录" class="headerlink" title="修改记录"></a>修改记录</h1><p>例如：将qiuqiu的密码改为123</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update user <span class="built_in">set</span> password=<span class="string">'123'</span> <span class="built_in">where</span> username=<span class="string">'qiuqiu'</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/img/mysql/update-success2.png" alt="修改"></p>
<h1 id="删除记录"><a href="#删除记录" class="headerlink" title="删除记录"></a>删除记录</h1><p>例如：删除qiuqiu的纪录。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from user <span class="built_in">where</span> username=<span class="string">'qiuqiu'</span>;</span><br></pre></td></tr></table></figure>
<h1 id="删库和删表"><a href="#删库和删表" class="headerlink" title="删库和删表"></a>删库和删表</h1><p><strong>drop database 库名;</strong></p>
<p><strong>drop table 表名;</strong></p>
<h1 id="增加MySQL-用户"><a href="#增加MySQL-用户" class="headerlink" title="增加MySQL 用户"></a>增加MySQL 用户</h1><p><strong>grant select on 数据库.* to 用户名@登录主机 identified by “密码”</strong></p>
<p>例1、增加一个用户user_1密码为123，让他可以在任何主机上登录，并对所有数据库有查询、插入、修改、删除的权限。首先用以root用户连入MySQL ，然后键入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant select, insert, update, delete on *.* to mailto:user_1@<span class="string">" "</span> Identified by <span class="string">"123"</span>;</span><br></pre></td></tr></table></figure>
<h1 id="备份与恢复"><a href="#备份与恢复" class="headerlink" title="备份与恢复"></a>备份与恢复</h1><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><pre><code>例如：将上例创建的node库备份到文件back_node中
</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cd　/home/data/mysql 　(进入到库目录)</span></span><br><span class="line"><span class="comment"># mysqldump -u root -p –opt node &gt; back_node</span></span><br></pre></td></tr></table></figure>
<h2 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysql -u root -p recover_node &lt; back_node</span></span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>为了防止自己以后忘记，所以我在这里记录了一些通过命令而进行的一些常用的MySQL数据库操作，内容很简单，主要是为了便于自己以后查阅，也希望能够对大家有所帮助～</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React之组件生命周期]]></title>
      <url>/2018/05/27/react-life-circle/</url>
      <content type="html"><![CDATA[<blockquote>
<p>在学习React时，有时候遇到数据更新，而界面却不能及时更新的问题，查了很多资料，大部分原因是因为对React组件的生命周期没有很好地理解，所以特地想把生命周期有关的知识记录下来，便于自己理解和学习，也希望能够对大家有一些帮助～</p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>React组件的生命周期状态可分为三种：</p>
<ul>
<li>Mounting: 已插入真实DOM</li>
<li>Updating: 正在被重新渲染</li>
<li>Unmounting: 已移出真实DOM</li>
</ul>
<p>组件挂载的经典图片：</p>
<a id="more"></a>
<p><img src="/img/life-circle.jpg" alt="life-circle"></p>
<p>接下来我将会详细说明一下这几个生命周期的意义</p>
<h1 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h1><p>首次调用组件时，有以下方法会被调用（注意顺序，从上到下先后执行）：</p>
<ul>
<li><p><strong>getDefaultProps()</strong>：这个方法是用来设置组件默认的props，组件生命周期只会调用一次。这个方法在对象被创建之前执行，因此不能在方法内调用this.props。</p>
</li>
<li><p><strong>getInitialState()</strong>：设置state初始值，在这个方法中你已经可以访问到this.props。</p>
</li>
<li><p><strong>componentWillMount()</strong>：该方法会在组件首次渲染之前调用，这个是在render方法调用前可修改state的最后一次机会。</p>
</li>
<li><p><strong>render()</strong>：调用render()方法时，首先检查this.props和this.state返回一个子元素，子元素可以是DOM组件或者其他自定义复合控件的虚拟实现 ，如果不想渲染可以返回null或者false。render()方法是很纯净的，这就意味着不要在这个方法里初始化组件的state，每次执行时返回相同的值，不会读写DOM或者与服务器交互。</p>
</li>
<li><p><strong>componentDidMount()</strong>：在首次真实的DOM渲染后调用（仅此一次），只在客户端。之后组件已经生成了对应的DOM结构，可以通过this.getDOMNode()来进行访问。 如果你想和其他JavaScript框架一起使用，可以在这个方法中调用setTimeout, setInterval或者发送AJAX请求等操作(防止异部操作阻塞UI)。</p>
</li>
</ul>
<h1 id="存在期"><a href="#存在期" class="headerlink" title="存在期"></a>存在期</h1><p>实例化后，当props或者state发生变化时，下面方法依次被调用：</p>
<ul>
<li><p><strong>componentWillReceiveProps()</strong>：在组件接收到一个新的 prop (更新后)时被调用。这个方法在初始化render时不会被调用。</p>
</li>
<li><p><strong>shouldComponentUpdate()</strong>：返回一个布尔值。在组件接收到新的props或者state时被调用。在初始化时或者使用forceUpdate时不被调用。 可以在你确认不需要更新组件时使用。默认返回true。</p>
</li>
<li><p><strong>componentWillUpdate()</strong>：在组件接收到新的props或者state但还没有render时被调用。在初始化时不会被调用。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">void componentWillUpdate(</span><br><span class="line">  object nextProps, object nextState</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>  在这个函数里面，你就不能使用this.setState来修改状态。这个函数调用之后，就会把nextProps和nextState分别设置到this.props和this.state中，紧接着这个函数，就会调用render()来更新界面了</p>
</li>
<li><p><strong>render()</strong>：与实例化期相同</p>
</li>
<li><p><strong>componentDidUpdate()</strong>：在组件完成更新后立即调用。在初始化时不会被调用。</p>
</li>
</ul>
<h1 id="销毁期"><a href="#销毁期" class="headerlink" title="销毁期"></a>销毁期</h1><p>销毁阶段，只有一个函数被调用：</p>
<ul>
<li><strong>componentWillUnmount()</strong>：在组件从 DOM 中移除的时候立刻被调用。在这个函数中，可以做一些组件相关的清理工作，例如取消计时器、网络请求等</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这篇博客查阅了很多网上大牛们的博客，结合了菜鸟教程上的文档，希望自己能够对React组件的生命周期有更好地理解，前路漫漫～一起加油哦～</p>
]]></content>
      
        <categories>
            
            <category> React.js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React.js 生命周期 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于React及Express项目的打包部署]]></title>
      <url>/2018/05/24/react-express/</url>
      <content type="html"><![CDATA[<blockquote>
<p>最近为了7月份实习更加顺手，所以在学习公司比较流行的React，之前对Vue有过了解并做过项目练手，所以对React的思想也是比较好理解的，为了进一步提升自己，以及为后续学习使用Node搭建服务器端，我特地去腾讯云上买了自己的云服务器～这篇博客主要是介绍一下，一个使用React做前端，Express做后端的项目如何打包部署在云服务器上，希望对大家有所帮助～</p>
</blockquote>
<h1 id="云服务器准备"><a href="#云服务器准备" class="headerlink" title="云服务器准备"></a>云服务器准备</h1><p>首先你需要有个已经备案过的域名，然后需要买个云服务器，将你的域名解析到服务器地址，我解析的域名为qq.qiuruolin.cn，具体步骤大家可以Google一下～<br>因为我使用的是Mac，所以首先我在终端中使用ssh连接云服务器，配置nginx，并通过service nginx start启动服务，下载安装git，因为我们后面需要使用git来克隆express后端项目<br><a id="more"></a></p>
<h1 id="React前端"><a href="#React前端" class="headerlink" title="React前端"></a>React前端</h1><p>首先使用create-react-app创建React项目，使用npm install安装依赖包，通过npm start运行，成功后就可以开始编写你自己的项目了<br>可以在项目中使用ajax去请求后端数据，但是要注意解决跨域问题：<br>在package.json中添加<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"proxy"</span>: &#123;</span><br><span class="line">	<span class="string">"/api"</span>: &#123;</span><br><span class="line">		<span class="string">"target"</span>: <span class="string">"http://127.0.0.1: 3001"</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;，</span><br></pre></td></tr></table></figure></p>
<p><a href="http://127.0.0.1" target="_blank" rel="noopener">http://127.0.0.1</a>: 3000换成你需要代理的域名，最好是使用IP地址，上面的配置就是将本地所有以/api开头的请求转发到你配置的地址上<br>在这个项目中，我们需要把请求代理到我们云服务器的express后端上</p>
<p>写完代码之后，接下来就是打包部署到云服务器上的工作了<br>首先通过npm build对项目进行打包，生成名为build的文件夹<br>将build文件夹通过scp命令上传到云服务器上<br>注意：要上传至服务器的根目录下，默认为/root（可以在/etc/nginx/nginx.conf中配置）<br>上传后通过service nginx restart重启，这时你试着可以访问qq.qiuruolin.cn/build/index.html，若页面出现则表示部署成功。</p>
<h1 id="Express后端"><a href="#Express后端" class="headerlink" title="Express后端"></a>Express后端</h1><p>通过express来新创建一个express项目，前提是需要你全局安装express，新建项目之后使用npm install安装依赖包，使用npm start运行，出现Express欢迎页则说明项目创建成功了<br>接着，你可以先编写一个简单的请求进行测试<br>创建仓库配置git，并将项目push到git上<br>连接云服务器，我们使用git克隆项目，并使用npm install安装依赖項，使用npm start，访问你解析的域名:3000/你的api，若成功则你的后端项目就在云服务器上部署成功了<br>你可以使用npm start &amp;将项目放置后台运行，使用jobs查看运行的进程，fg和bg将进程在前后台切换</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>到这一步，整个项目基本都配置完了，其实这个并不是花时间最多的地方，花时间探索的是，我如何去构建一个完整前后端俱全的项目，学习的路上会遇到很多迷茫，只要积极探索，不气馁，不放弃，不骄躁，相信大家可以变得更好！希望对大家有所帮助～</p>
]]></content>
      
        <categories>
            
            <category> React.js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React.js Express </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[记腾讯的一次前端面试经历（共四面，已拿实习Offer）]]></title>
      <url>/2018/05/23/interview-experiences/</url>
      <content type="html"><![CDATA[<blockquote>
<p>因为我们专业要求大四一学年的实习，所以这段时间也就自然在做春招内推的各项准备，从开始找实习到获得腾讯实习Offer大约历经了一个多月的时间，这一个多月来压力很大，也很怕找不到好的实习，所以这个月也刷了很多大佬的面经，获得了很多帮助，也增长了很多前端知识。是在清明节前一天收到腾讯HR小哥哥的Offer电话，时隔这么久才想起要把腾讯面试的一些问题写成博客，或许会对大家有所帮助。</p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>从准备春招以来，一共面试的公司有三家：京东、腾讯和CVTE，京东情况比较特殊应该不算是正式的春招，京东面试时问了很多有关CSS的知识，比如margin塌陷、CSS3新特性、背景透明的实现方法、清除浮动的方法以及垂直居中的方法等<br><a id="more"></a><br>CVTE是唯一一个现场面试的，很多面试题目都很类似，印象最深的是三道手撕代码题，</p>
<ul>
<li>第一道是写一程序遍历一个DOM结构，</li>
<li>第二道是算法题，要求给你一个字符串”I love dog”变成”dog love I”</li>
<li>第三道是实现某个种栅格布局</li>
</ul>
<h1 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h1><p>一面大概面了一个多小时，问了很多基础知识，涉及的方面也很广<br>首先介绍实习经历，balabala讲了一下项目经验，然后大概说了一下什么时候开始学习前端，以下是我记得的一些问题：</p>
<h4 id="1-怎么使用dns缓存做优化"><a href="#1-怎么使用dns缓存做优化" class="headerlink" title="1. 怎么使用dns缓存做优化"></a>1. 怎么使用dns缓存做优化</h4><p>DNS的优化， 当然是尽可能少的造成DNS查询开销，当用户在浏览器的地址栏中输入网址时，浏览器会首先通过访问的域名来定位到IP (DNS) 从而找到去哪里获取资源，浏览器会按浏览器缓存-&gt;系统缓存-&gt;路由器缓存-&gt;ISP DNS缓存-&gt;递归搜索依次进行查询，DNS优化就是需要我们尽可能少的域名解析。<br>DNS预取就是在浏览器加载网页时， 对网页中的或者的href属性中的域名进行后台的预解析， 并且将解析结果缓存在浏览器端， 当用户在真正点击链接时， 省去在当下的DNS解析消耗， 把这个消耗过程转嫁到用户无法感知的浏览过程中去。<br>我们可以通过以下方法来打开DNS预取：</p>
<ul>
<li>可以通过用meta信息来告知浏览器， 当前页面要做DNS预取:<meta http-equiv="x-dns-prefetch-control" content="on"></li>
<li>可以使用link标签来强制对DNS做预取: <link rel="dns-prefetch" href="http://bdimg.share.baidu.com"></li>
</ul>
<h4 id="2-ES6了解哪些？"><a href="#2-ES6了解哪些？" class="headerlink" title="2. ES6了解哪些？"></a>2. ES6了解哪些？</h4><p>ES6中有很多知识点，比如Promise、Generator、箭头函数等，建议大家多熟悉一下</p>
<h4 id="3-知道哪些数组方法"><a href="#3-知道哪些数组方法" class="headerlink" title="3. 知道哪些数组方法"></a>3. 知道哪些数组方法</h4><p>最常用的有方法有：</p>
<ul>
<li>join()——将数组元素组成一个字符串</li>
<li>push()和pop()——类似栈的操作</li>
<li>shift()和unshift()——删除数组第一项／添加元素至数组第一项</li>
<li>sort()——对数组进行排序</li>
<li>reverse()——反转数组項的顺序</li>
<li>concat() ——将参数添加到原数组中。这个方法会先创建当前数组一个副本，然后将接收到的参数添加到这个副本的末尾，最后返回新构建的数组。在没有给 concat()方法传递参数的情况下，它只是复制当前数组并返回副本。</li>
<li>slice()——返回从原数组中指定开始下标到结束下标之间的项组成的新数组。</li>
<li>splice()——很强大的数组方法，它有很多种用法，可以实现删除、插入和替换。</li>
<li>indexOf()和lastIndexOf()——从数组的开头（位置 0）开始向后查找／从数组的末尾开始向前查找。</li>
<li>forEach()——对数组进行遍历循环，对数组中的每一项运行给定函数。</li>
<li>map()——对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。</li>
<li>filter()——“过滤”功能，数组中的每一项运行给定函数，返回满足过滤条件组成的数组。</li>
<li>every()——判断数组中每一项都是否满足条件，只有所有项都满足条件，才会返回true。</li>
<li>some()——判断数组中是否存在满足条件的项，只要有一项满足条件，就会返回true。</li>
<li>reduce()和 reduceRight()——从数组的第一项开始，逐个遍历到最后／从数组的最后一项开始，向前遍历到第一项。<br>两个方法都接收两个参数：一个在每一项上调用的函数和（可选的）作为归并基础的初始值。</li>
</ul>
<h4 id="4-将字符串转换为数字"><a href="#4-将字符串转换为数字" class="headerlink" title="4. 将字符串转换为数字"></a>4. 将字符串转换为数字</h4><ul>
<li>parseInt()和parseFloat()，要注意方法的第二个参数，表示使用的基模式（二进制(2)、八进制(8)、十进制(10)、十六进制(16)）</li>
<li>强制类型转换：Number(value)</li>
<li>js弱类型转换（不推荐）：var x = str-0; x = x*1;</li>
</ul>
<h4 id="5-cdn缓存的原理"><a href="#5-cdn缓存的原理" class="headerlink" title="5. cdn缓存的原理"></a>5. cdn缓存的原理</h4><p> 推荐看<a href="https://www.cnblogs.com/SkySoot/p/6119356.html" target="_blank" rel="noopener">CDN技术详解</a>这篇博客，博主对于CDN的相关知识点确实讲解的比较到位了</p>
<h4 id="6-事件捕获和事件冒泡"><a href="#6-事件捕获和事件冒泡" class="headerlink" title="6. 事件捕获和事件冒泡"></a>6. 事件捕获和事件冒泡</h4><p>贴一张图大家感受一下<br><img src="/img/event.png" alt="事件机制"></p>
<h4 id="7-阻止冒泡事件和默认事件"><a href="#7-阻止冒泡事件和默认事件" class="headerlink" title="7. 阻止冒泡事件和默认事件"></a>7. 阻止冒泡事件和默认事件</h4><p>event.stopPropagation()：这是阻止事件的冒泡方法，不让事件向documen上蔓延，但是默认事件任然会执行，当你掉用这个方法的时候，如果点击一个连接，这个连接仍然会被打开<br>event.preventDefault()：这是阻止默认事件的方法，调用此方法是，连接不会被打开，但是会发生冒泡，冒泡会传递到上一层的父元素；<br>IE下：<br>window.event.cancelBubble = true;//停止冒泡<br>window.event.returnValue = false;//阻止事件的默认行为</p>
<h4 id="8-前端优化"><a href="#8-前端优化" class="headerlink" title="8. 前端优化"></a>8. 前端优化</h4><p><a href="https://blog.csdn.net/mahoking/article/details/51472697" target="_blank" rel="noopener">Web前端性能优化总结</a></p>
<h4 id="9-CSS文件为什么要放在文档头部？js文件为什么放在底部？"><a href="#9-CSS文件为什么要放在文档头部？js文件为什么放在底部？" class="headerlink" title="9. CSS文件为什么要放在文档头部？js文件为什么放在底部？"></a>9. CSS文件为什么要放在文档头部？js文件为什么放在底部？</h4><h4 id="10-HTML5引入的新特性"><a href="#10-HTML5引入的新特性" class="headerlink" title="10. HTML5引入的新特性"></a>10. HTML5引入的新特性</h4><h4 id="11-HTTP缓存机制"><a href="#11-HTTP缓存机制" class="headerlink" title="11. HTTP缓存机制"></a>11. HTTP缓存机制</h4><p><a href="https://www.cnblogs.com/chenqf/p/6386163.html" target="_blank" rel="noopener">彻底弄懂HTTP缓存机制及原理</a></p>
<h4 id="12-cache-control的属性（no-cache和no-store的区别）"><a href="#12-cache-control的属性（no-cache和no-store的区别）" class="headerlink" title="12. cache-control的属性（no-cache和no-store的区别）"></a>12. cache-control的属性（no-cache和no-store的区别）</h4><p><a href="https://blog.csdn.net/eroswang/article/details/8302191" target="_blank" rel="noopener">浏览器缓存详解:expires,cache-control,last-modified,etag详细说明</a><br>Cache-Control: no-cache：这个很容易让人产生误解，使人误以为是响应不被缓存。实际上Cache-Control: no-cache是会被缓存的，只不过每次在向客户端（浏览器）提供响应数据时，缓存都要向服务器评估缓存响应的有效性。<br>Cache-Control: no-store：这个才是响应不被缓存的意思。</p>
<h4 id="13-Http状态码（403、304是什么）"><a href="#13-Http状态码（403、304是什么）" class="headerlink" title="13. Http状态码（403、304是什么）"></a>13. Http状态码（403、304是什么）</h4><p><a href="https://blog.csdn.net/dufufd/article/details/53112184" target="_blank" rel="noopener">常见的HTTP状态码(HTTP Status Code)说明</a></p>
<h4 id="14-jsonp的实现原理"><a href="#14-jsonp的实现原理" class="headerlink" title="14. jsonp的实现原理"></a>14. jsonp的实现原理</h4><p><a href="https://blog.csdn.net/u011897301/article/details/52679486" target="_blank" rel="noopener">简单透彻理解JSONP原理及使用</a></p>
<h4 id="15-xss、cors？以及如何防范？sql注入？？"><a href="#15-xss、cors？以及如何防范？sql注入？？" class="headerlink" title="15. xss、cors？以及如何防范？sql注入？？"></a>15. xss、cors？以及如何防范？sql注入？？</h4><ul>
<li><p>XSS：跨站脚本攻击<br>它允许用户将恶意代码植入到提供给其他用户使用的页面中，可以简单的理解为一种javascript代码注入。<br>XSS的防御措施：</p>
<ul>
<li>过滤转义输入输出</li>
<li>避免使用eval、new Function等执行字符串的方法，除非确定字符串和用户输入无关</li>
<li>使用cookie的httpOnly属性，加上了这个属性的cookie字段，js是无法进行读写的</li>
<li>使用innerHTML、document.write的时候，如果数据是用户输入的，那么需要对象关键字符进行过滤与转义</li>
</ul>
</li>
<li><p>CSRF：跨站请求伪造<br>其实就是网站中的一些提交行为，被黑客利用，在你访问黑客的网站的时候进行操作，会被操作到其他网站上<br>CSRF防御措施：</p>
<ul>
<li>检测http referer是否是同域名</li>
<li>避免登录的session长时间存储在客户端中</li>
<li>关键请求使用验证码或者token机制</li>
</ul>
</li>
</ul>
<h4 id="16-setTimeout的执行原理以及什么时候回调函数会加入到任务队列中？与Promise执行机制上有什么不同？"><a href="#16-setTimeout的执行原理以及什么时候回调函数会加入到任务队列中？与Promise执行机制上有什么不同？" class="headerlink" title="16. setTimeout的执行原理以及什么时候回调函数会加入到任务队列中？与Promise执行机制上有什么不同？"></a>16. setTimeout的执行原理以及什么时候回调函数会加入到任务队列中？与Promise执行机制上有什么不同？</h4><p><a href="https://blog.csdn.net/qq_31628337/article/details/71056294" target="_blank" rel="noopener">JS：事件循环机制、调用栈以及任务队列</a></p>
<h4 id="17-postMessage的实现，跨域请求的实现"><a href="#17-postMessage的实现，跨域请求的实现" class="headerlink" title="17. postMessage的实现，跨域请求的实现"></a>17. postMessage的实现，跨域请求的实现</h4><p><a href="http://blog.csdn.net/ligang2585116/article/details/73072868" target="_blank" rel="noopener">八种方式实现跨域请求</a><br><a href="https://segmentfault.com/a/1190000011145364" target="_blank" rel="noopener">前端常见跨域解决方案</a></p>
<h4 id="18-Web-Storage的方法（setItem、getItem、removeItem、clear）"><a href="#18-Web-Storage的方法（setItem、getItem、removeItem、clear）" class="headerlink" title="18. Web Storage的方法（setItem、getItem、removeItem、clear）"></a>18. Web Storage的方法（setItem、getItem、removeItem、clear）</h4><p><a href="https://blog.csdn.net/shenzhennba/article/details/8480756" target="_blank" rel="noopener">HTML5本地存储之Web Storage篇</a></p>
<h4 id="19-页面重绘和重排，如何减少重排？如何减少对DOM的操作"><a href="#19-页面重绘和重排，如何减少重排？如何减少对DOM的操作" class="headerlink" title="19. 页面重绘和重排，如何减少重排？如何减少对DOM的操作"></a>19. 页面重绘和重排，如何减少重排？如何减少对DOM的操作</h4><p><a href="https://www.cnblogs.com/nightstarsky/p/5853978.html" target="_blank" rel="noopener">JS对DOM的操作优化法则</a></p>
<h4 id="20-CSS有哪些选择器？优先级"><a href="#20-CSS有哪些选择器？优先级" class="headerlink" title="20. CSS有哪些选择器？优先级"></a>20. CSS有哪些选择器？优先级</h4><h4 id="21-如何添加元素，创建元素（除了createElement和createTextNode还有什么）"><a href="#21-如何添加元素，创建元素（除了createElement和createTextNode还有什么）" class="headerlink" title="21. 如何添加元素，创建元素（除了createElement和createTextNode还有什么）"></a>21. 如何添加元素，创建元素（除了createElement和createTextNode还有什么）</h4><p><a href="https://blog.csdn.net/u010582082/article/details/70196854" target="_blank" rel="noopener">js创建dom节点之最容易被忽略的createDocumentFragment()方法</a></p>
<h4 id="22-怎么选取DOM元素（DOM元素选择的方式）"><a href="#22-怎么选取DOM元素（DOM元素选择的方式）" class="headerlink" title="22. 怎么选取DOM元素（DOM元素选择的方式）"></a>22. 怎么选取DOM元素（DOM元素选择的方式）</h4><p><a href="https://www.cnblogs.com/wangshengli520/p/7737058.html" target="_blank" rel="noopener">JS选取DOM元素的方法</a></p>
<h4 id="23-call和apply的区别，bind方法"><a href="#23-call和apply的区别，bind方法" class="headerlink" title="23. call和apply的区别，bind方法"></a>23. call和apply的区别，bind方法</h4><p><a href="https://www.cnblogs.com/Shd-Study/archive/2017/03/16/6560808.html" target="_blank" rel="noopener">javascript中call()、apply()、bind()的用法终于理解</a><br><a href="http://blog.csdn.net/java_zhaoyanli/article/details/50891305" target="_blank" rel="noopener">bind方法</a></p>
<h4 id="24-块级作用域及其应用场景"><a href="#24-块级作用域及其应用场景" class="headerlink" title="24. 块级作用域及其应用场景"></a>24. 块级作用域及其应用场景</h4><p><a href="https://blog.csdn.net/github_26672553/article/details/53534436" target="_blank" rel="noopener">块级作用域</a></p>
<h4 id="25-let和var的区别（除了变量提升，还有什么）"><a href="#25-let和var的区别（除了变量提升，还有什么）" class="headerlink" title="25. let和var的区别（除了变量提升，还有什么）"></a>25. let和var的区别（除了变量提升，还有什么）</h4><p><a href="http://blog.csdn.net/nfer_zhuang/article/details/48781671" target="_blank" rel="noopener">js中let和var定义变量的区别</a></p>
<h4 id="26-HTTP2-0的特性"><a href="#26-HTTP2-0的特性" class="headerlink" title="26. HTTP2.0的特性"></a>26. HTTP2.0的特性</h4><p><a href="http://blog.csdn.net/sysuzhyupeng/article/details/56508111" target="_blank" rel="noopener">HTTP 2.0带来哪些新特性</a></p>
<h4 id="27-对象复制（深浅拷贝）Object-assign"><a href="#27-对象复制（深浅拷贝）Object-assign" class="headerlink" title="27. 对象复制（深浅拷贝）Object.assign"></a>27. 对象复制（深浅拷贝）Object.assign</h4><p><a href="https://www.cnblogs.com/shiyou00/p/6379170.html" target="_blank" rel="noopener">javascript对象的深浅拷贝浅析</a></p>
<h4 id="28-innerHTML和outerHTML"><a href="#28-innerHTML和outerHTML" class="headerlink" title="28. innerHTML和outerHTML"></a>28. innerHTML和outerHTML</h4><h4 id="29-null和undefined的区别"><a href="#29-null和undefined的区别" class="headerlink" title="29. null和undefined的区别"></a>29. null和undefined的区别</h4><ul>
<li>undefined一般用于抛出异常</li>
<li>typeof null =&gt; object; typeof undefined =&gt; undefined</li>
<li>Number(null) = 0; Number(undefined) = NaN</li>
<li>正确使用null，可以有效清除引用，用于垃圾回收</li>
<li>null instanceof Object // false</li>
</ul>
<h4 id="30-https为什么是安全的？SSL是怎么加密的？"><a href="#30-https为什么是安全的？SSL是怎么加密的？" class="headerlink" title="30. https为什么是安全的？SSL是怎么加密的？"></a>30. https为什么是安全的？SSL是怎么加密的？</h4><p><a href="https://blog.csdn.net/wx_962464/article/details/51043069" target="_blank" rel="noopener">详解HTTPS是如何确保安全性的</a></p>
<h4 id="31-缓存过期时间的设置（除了expires和max-age还有什么）"><a href="#31-缓存过期时间的设置（除了expires和max-age还有什么）" class="headerlink" title="31. 缓存过期时间的设置（除了expires和max-age还有什么）"></a>31. 缓存过期时间的设置（除了expires和max-age还有什么）</h4><h4 id="32-什么是同源策略？怎样属于同源（同协议同域名同端口）"><a href="#32-什么是同源策略？怎样属于同源（同协议同域名同端口）" class="headerlink" title="32. 什么是同源策略？怎样属于同源（同协议同域名同端口）"></a>32. 什么是同源策略？怎样属于同源（同协议同域名同端口）</h4><h4 id="33-vue-router对history的操作"><a href="#33-vue-router对history的操作" class="headerlink" title="33. vue-router对history的操作"></a>33. vue-router对history的操作</h4><h4 id="34-对json方法的了解（son-stringify和json-parseJSON）"><a href="#34-对json方法的了解（son-stringify和json-parseJSON）" class="headerlink" title="34. 对json方法的了解（son.stringify和json.parseJSON）"></a>34. 对json方法的了解（son.stringify和json.parseJSON）</h4><h4 id="35-还有什么要问我的吗？"><a href="#35-还有什么要问我的吗？" class="headerlink" title="35. 还有什么要问我的吗？"></a>35. 还有什么要问我的吗？</h4><h1 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h1><p>二面时间不长，大概20分钟左右，因为是晚上下课后打来的电话，所以问的内容也不算多</p>
<h4 id="1-http协议的请求头内容"><a href="#1-http协议的请求头内容" class="headerlink" title="1. http协议的请求头内容"></a>1. http协议的请求头内容</h4><p><a href="https://blog.csdn.net/u010256388/article/details/68491509" target="_blank" rel="noopener">HTTP请求行、请求头、请求体详解</a></p>
<h4 id="2-cache-control-是什么？以及它的取值有哪些"><a href="#2-cache-control-是什么？以及它的取值有哪些" class="headerlink" title="2. cache-control 是什么？以及它的取值有哪些"></a>2. cache-control 是什么？以及它的取值有哪些</h4><h4 id="3-http1-1有哪些不足"><a href="#3-http1-1有哪些不足" class="headerlink" title="3. http1.1有哪些不足"></a>3. http1.1有哪些不足</h4><p><a href="https://www.zhihu.com/question/34074946" target="_blank" rel="noopener">HTTP/2.0 相比1.0有哪些重大改进？</a></p>
<h4 id="4-快速排序的思想"><a href="#4-快速排序的思想" class="headerlink" title="4. 快速排序的思想"></a>4. 快速排序的思想</h4><p>排序算法可以参考我上一篇博客<a href="http://qiuruolin.cn/2018/02/17/algorithm-sort/" target="_blank" rel="noopener">算法之排序</a></p>
<h4 id="5-事件捕获和事件冒泡"><a href="#5-事件捕获和事件冒泡" class="headerlink" title="5. 事件捕获和事件冒泡"></a>5. 事件捕获和事件冒泡</h4><h4 id="6-怎么阻止事件冒泡？怎么在事件捕获阶段阻止事件冒泡"><a href="#6-怎么阻止事件冒泡？怎么在事件捕获阶段阻止事件冒泡" class="headerlink" title="6. 怎么阻止事件冒泡？怎么在事件捕获阶段阻止事件冒泡"></a>6. 怎么阻止事件冒泡？怎么在事件捕获阶段阻止事件冒泡</h4><h4 id="7-对ES6的了解"><a href="#7-对ES6的了解" class="headerlink" title="7. 对ES6的了解"></a>7. 对ES6的了解</h4><p>我提了Promise，后来就一直问的是Promise的知识：Promise有哪几种状态(pending, fulfilled, rejected)，状态之间的转换<br>new Promise(function(){<br>    resolve();<br>}).then(function(){<br>    //问此处的then可不可以被执行<br>})<br>事件监听器在事件点击之后监听是无效的，Promise和它有什么区别？<br><a href="https://segmentfault.com/a/1190000007678185" target="_blank" rel="noopener">promise介绍–基础篇</a></p>
<h4 id="8-如果有一个箱子里有100个苹果，一次可以拿1或2个，问有多少种方法将100个苹果移到另一个箱子中"><a href="#8-如果有一个箱子里有100个苹果，一次可以拿1或2个，问有多少种方法将100个苹果移到另一个箱子中" class="headerlink" title="8. 如果有一个箱子里有100个苹果，一次可以拿1或2个，问有多少种方法将100个苹果移到另一个箱子中"></a>8. 如果有一个箱子里有100个苹果，一次可以拿1或2个，问有多少种方法将100个苹果移到另一个箱子中</h4><h1 id="三面"><a href="#三面" class="headerlink" title="三面"></a>三面</h1><p>三面是对我平时如何学习前端以及对我的学习兴趣做了进一步的了解</p>
<h4 id="1-平时是如何学习的"><a href="#1-平时是如何学习的" class="headerlink" title="1. 平时是如何学习的"></a>1. 平时是如何学习的</h4><h4 id="2-如何进行沟通，有没有自己的一套沟通方案"><a href="#2-如何进行沟通，有没有自己的一套沟通方案" class="headerlink" title="2. 如何进行沟通，有没有自己的一套沟通方案"></a>2. 如何进行沟通，有没有自己的一套沟通方案</h4><h4 id="3-有没有好奇心？"><a href="#3-有没有好奇心？" class="headerlink" title="3. 有没有好奇心？"></a>3. 有没有好奇心？</h4><h4 id="4-平时写代码的时间有多少"><a href="#4-平时写代码的时间有多少" class="headerlink" title="4. 平时写代码的时间有多少"></a>4. 平时写代码的时间有多少</h4><h1 id="四面-HR面"><a href="#四面-HR面" class="headerlink" title="四面(HR面)"></a>四面(HR面)</h1><p>四面就是腾讯云招聘经理来的面试电话，也就是HR面，了解了一下个人的发展方向，家庭情况之类的<br>我觉得HR面其实也需要好好准备一下的，第一次HR面是在CVTE，挂了CVTE之后就对HR面有点阴影了，十分感谢我的老大在腾讯HR面前一天晚上顶着疲惫不堪的身心还特地打电话给我，教我如何回答得更理想～<br>拿到口头Offer后就回家过清明节了～</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>其实能够拿到腾讯实习Offer很大一部分是因为运气，希望小菜鸟的我和腾讯的缘分一直走下去～实习加油！！<br>啰啰嗦嗦说了很多，希望对大家有所帮助！</p>
]]></content>
      
        <categories>
            
            <category> 面经 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 面经 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[算法之排序]]></title>
      <url>/2018/02/17/algorithm-sort/</url>
      <content type="html"><![CDATA[<blockquote>
<p>算法的学习总是断断续续的，总算看完了排序算法这一章节的内容，排序思想大概都已经能理解了，奈何编程水平恐怕不是很高，部分算法仍旧不能自己独立的去实现～怕是要继续增强自己的编程能力了～<br>此篇博文主要是记录与排序算法相关的知识点，如果在某些地方表述不正确的，还希望大家能够指出，共同进步～</p>
</blockquote>
<h1 id="基于比较思想的排序算法"><a href="#基于比较思想的排序算法" class="headerlink" title="基于比较思想的排序算法"></a>基于比较思想的排序算法</h1><p>首先为了减少代码的重复性，抽离出实现代码中经常使用到的交换函数：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static void swap(int[] arr, int index1, int index2) &#123;</span><br><span class="line">    int tmp = arr[index1];</span><br><span class="line">    arr[index1] = arr[index2];</span><br><span class="line">    arr[index2] = tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public int[] bubbleSort(int[] A, int n) &#123; //n表示数组长度</span><br><span class="line">    // write code here</span><br><span class="line">    <span class="keyword">for</span>(int i = n - 1; i &gt;= 0; i--)&#123;</span><br><span class="line">        <span class="keyword">for</span>(int j = 0; j &lt; i; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(A[j] &gt; A[j + 1])&#123;</span><br><span class="line">                swap(A, j, j + 1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> A;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主要思想：使用<strong>两层嵌套循环</strong>比较，内层循环比较相邻的元素，如果第一个比第二个大，则交换两个元素。一次内循环比较结束后，最大的元素将会被交换到<strong>n-1</strong>的位置上，缩小范围继续执行外循环，依次会将剩下元素中相对最大的元素置换到<strong>n-2</strong>、<strong>n-3</strong> … <strong>1</strong>的位置上，数组排序完成。<br>冒泡排序因为使用了两层嵌套循环，所以其<strong>时间复杂度</strong>为<strong>O(N^2)</strong>。<br>举个简单的例子：<br>首先考察<strong>n-1</strong>范围<br><img src="/img/sort/bubble1.png" alt="bubble"><br>比较相邻两个元素之间的大小，发现6比3大，则交换两个元素<br><img src="/img/sort/bubble2.png" alt="bubble"><br><img src="/img/sort/bubble3.png" alt="bubble"><br>继续比较相邻元素<br><img src="/img/sort/bubble4.png" alt="bubble"><br><img src="/img/sort/bubble5.png" alt="bubble"><br>经过一轮循环比较相邻元素后，最大的元素会被交换到<strong>n-1</strong>位置上<br><img src="/img/sort/bubble6.png" alt="bubble"><br>接着将范围缩小至<strong>n-2</strong><br><img src="/img/sort/bubble7.png" alt="bubble"><br>重复上述比较过程，数组排序完毕。</p>
<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public int[] selectionSort(int[] A, int n) &#123;</span><br><span class="line">    // write code here</span><br><span class="line">    int index = 0;</span><br><span class="line">    <span class="keyword">for</span>(int i = 0; i &lt; n - 1; i++)&#123;</span><br><span class="line">        index = i;</span><br><span class="line">        <span class="keyword">for</span>(int j = i + 1; j &lt; n; j++)&#123;</span><br><span class="line">            index = A[index] &gt; A[j]? j : index;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(A, i, index);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> A;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主要思想：选择排序使用<strong>两层嵌套循环</strong>比较，外层循环记录结果元素需要放置的位置，内层循环选择剩下元素中相对最小的元素。经过一次内循环后选择出最小的元素与i为0位置上的元素交换，即作为第一个元素，一次进行下去，剩下元素中相对较小的元素就放在了<strong>1</strong>,<strong>2</strong>…<strong>n-1</strong>位置上，数组排序完成。<br>选择排序因为使用了两层嵌套循环，所以其<strong>时间复杂度</strong>也为<strong>O(N^2)</strong>。<br>举个简单的🌰：<br>首先考察<strong>0～n-1</strong>范围<br><img src="/img/sort/select1.png" alt="select"><br>在<strong>0～n-1</strong>范围内选出<strong>最小的元素</strong>，与数组中第一个元素交换<br><img src="/img/sort/select2.png" alt="select"><br><img src="/img/sort/select3.png" alt="select"><br>继续考察<strong>1～n-1</strong>范围，在<strong>1～n-1</strong>范围内选出<strong>最小的元素</strong>，与数组中第二个元素交换<br><img src="/img/sort/select4.png" alt="select"><br><img src="/img/sort/select5.png" alt="select"><br>重复上述比较过程，数组排序完毕。</p>
<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> public int[] insertionSort(int[] A, int n) &#123;</span><br><span class="line">    // write code here</span><br><span class="line">    int index = 0;</span><br><span class="line">    <span class="keyword">for</span>(int i = 1; i &lt; n; i++)&#123;</span><br><span class="line">        index = i;</span><br><span class="line">        <span class="keyword">while</span>(index &gt; 0)&#123;</span><br><span class="line">            <span class="keyword">if</span>(A[index] &lt; A[index - 1])&#123;</span><br><span class="line">                swap(A, index, index - 1);</span><br><span class="line">                index--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> A;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主要思想：使用<strong>两层嵌套循环</strong>比较，将数组中的每一个元素进行向前比较，如果该元素小于前一个元素，则两个元素交换位置<strong>index–</strong>，继续与前一个元素比较，知道<strong>index=0</strong>，该元素放在大小合适的位置上。依次循环比较数组中的每一个元素，直至<strong>i=n-1</strong>，数组排序完成。<br>举个简单的🌰：<br>首先考察数组的第二个元素，与第一个元素进行比较，5比6小，则交换两个元素<br><img src="/img/sort/insert1.png" alt="insert"><br><img src="/img/sort/insert2.png" alt="insert"><br>接着考察数组中的第三个元素，先与第二个元素进行比较，小于则交换两个元素，接着再与第一个元素比较，小于则再交换两个元素。<br><img src="/img/sort/insert3.png" alt="insert"><br><img src="/img/sort/insert4.png" alt="insert"><br><img src="/img/sort/insert5.png" alt="insert"><br>根据此过程依次考察数组中的所有元素，数组排序完毕。<br>插入排序<strong>时间复杂度为O(N^2)</strong>。</p>
<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">public int[] mergeSort(int[] A, int n) &#123;</span><br><span class="line">    // write code here</span><br><span class="line">    <span class="keyword">if</span> (A == null || n &lt; 2) &#123;</span><br><span class="line">        <span class="built_in">return</span> null;</span><br><span class="line">    &#125;</span><br><span class="line">    process(A, 0, n - 1);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line">public static void process(int[] arr, int left, int right) &#123;</span><br><span class="line">    <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">        <span class="built_in">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    int mid = (left + right) / 2;</span><br><span class="line">    process(arr, left, mid);</span><br><span class="line">    process(arr, mid + 1, right);</span><br><span class="line">    merge(arr, left, mid, right);</span><br><span class="line">&#125;</span><br><span class="line">public static void merge(int[] arr, int left, int mid, int right) &#123;</span><br><span class="line">    int[] <span class="built_in">help</span> = new int[right - left + 1];</span><br><span class="line">    int l = left;</span><br><span class="line">    int r = mid + 1;</span><br><span class="line">    int index = 0;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= mid &amp;&amp; r &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[l] &lt;= arr[r]) &#123;</span><br><span class="line">            <span class="built_in">help</span>[index++] = arr[l++];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">help</span>[index++] = arr[r++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= mid) &#123;</span><br><span class="line">        <span class="built_in">help</span>[index++] = arr[l++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (r &lt;= right) &#123;</span><br><span class="line">        <span class="built_in">help</span>[index++] = arr[r++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (int i = 0; i &lt; help.length; i++) &#123;</span><br><span class="line">        arr[left + i] = <span class="built_in">help</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主要思想：首先将数组划分为<strong>单位长度为1的有序区间</strong>，然后把相邻的长度为1的有序区间进行<strong>合并</strong>，得到最大长度为2的有序区间，接下来再把相邻长度的有序区间合并得到长度为4的有序区间，依次这样进行下去，<strong>直到让数组中所有的数合并为一个有序区间</strong>，数组排序完毕，过程结束。<br>归并排序的过程：<br><img src="/img/sort/merge1.png" alt="merge"><br><img src="/img/sort/merge2.png" alt="merge"><br><img src="/img/sort/merge3.png" alt="merge"><br><img src="/img/sort/merge4.png" alt="merge"><br>根据此过程直到让数组中所有的数合并为一个有序区间，数组排序完毕。<br>归并排序<strong>时间复杂度为O(NlogN)</strong>。</p>
<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public int[] quickSort(int[] arr, int n) &#123;</span><br><span class="line">    // write code here</span><br><span class="line">    <span class="keyword">if</span> (arr == null || n &lt; 2) &#123;</span><br><span class="line">        <span class="built_in">return</span> null;</span><br><span class="line">    &#125;</span><br><span class="line">    process(arr, 0, n - 1);</span><br><span class="line">    <span class="built_in">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line">public static void process(int[] arr, int left, int right)&#123;</span><br><span class="line">    <span class="keyword">if</span>(left &lt; right)&#123;</span><br><span class="line">        int random = left + (int) (Math.random() * (right - left + 1));</span><br><span class="line">        swap(arr, random, right);</span><br><span class="line">        int mid = partition(arr, left, right);</span><br><span class="line">        process(arr, left, mid - 1);</span><br><span class="line">        process(arr, mid + 1, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public static int partition(int[] arr, int left, int right)&#123;</span><br><span class="line">    int pivot = left - 1;</span><br><span class="line">    int index = left;</span><br><span class="line">    <span class="keyword">while</span> (index &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[index] &lt;= arr[right]) &#123;</span><br><span class="line">            swap(arr, ++pivot, index);</span><br><span class="line">        &#125;</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> pivot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主要思想：随机选中一个<strong>划分值</strong>，将小于等于划分值的元素放在元素的左边，大于划分值的元素放在元素的右边，再对左右两部分分别<strong>递归地</strong>调用快速排序的过程，数组排序完毕，过程结束。<br>快速排序的过程：<br><img src="/img/sort/quick1.png" alt="quick"><br><img src="/img/sort/quick2.png" alt="quick"><br><img src="/img/sort/quick3.png" alt="quick"><br>一次<strong>划分过程</strong>，即选择一个划分值之后小于等于划分值的数是如何放在元素的左边，大于划分值的数如何放在元素的右边：<br>首先令划分值放在数组最后的位置，然后我们设置一个小于等于的区间，区间的<strong>初始长度为0</strong>，放在整个数组的左边<br><img src="/img/sort/quick4.png" alt="quick"><br>接下来从左到右遍历数组中的元素，如果当前元素大于划分值，则继续遍历下一个值<br><img src="/img/sort/quick5.png" alt="quick"><br>如果当前元素小于等于划分值，则把当前数与小于等于区间的下一个数进行交换，然后令小于等于区间右扩一个长度<br><img src="/img/sort/quick6.png" alt="quick"><br><img src="/img/sort/quick7.png" alt="quick"><br><img src="/img/sort/quick8.png" alt="quick"><br>在遍历完所有元素，直到最后的元素时，将最后的元素即划分值与小于等于区间的下一个数进行交换，这样就完成了一次完整的划分过程。<br><img src="/img/sort/quick9.png" alt="quick"><br>快速排序<strong>时间复杂度为O(NlogN)</strong>。</p>
<h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public int[] heapSort(int[] arr, int n) &#123;</span><br><span class="line">        // write code here</span><br><span class="line">        <span class="keyword">for</span> (int i = 0; i &lt; n; i++) &#123;  </span><br><span class="line">        createMaxdHeap(arr, n - 1 - i);  </span><br><span class="line">        swap(arr, 0, n - 1 - i);    </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="built_in">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">public static void createMaxdHeap(int[] data, int lastIndex) &#123;  </span><br><span class="line">    <span class="keyword">for</span> (int i = (lastIndex - 1) / 2; i &gt;= 0; i--) &#123;  </span><br><span class="line">        // 保存当前正在判断的节点  </span><br><span class="line">        int k = i;  </span><br><span class="line">        // 若当前节点的子节点存在  </span><br><span class="line">        <span class="keyword">while</span> (2 * k + 1 &lt;= lastIndex) &#123;  </span><br><span class="line">            // biggerIndex总是记录较大节点的值,先赋值为当前判断节点的左子节点  </span><br><span class="line">            int biggerIndex = 2 * k + 1;  </span><br><span class="line">            <span class="keyword">if</span> (biggerIndex &lt; lastIndex) &#123;  </span><br><span class="line">                // 若右子节点存在，否则此时biggerIndex应该等于 lastIndex  </span><br><span class="line">                <span class="keyword">if</span> (data[biggerIndex] &lt; data[biggerIndex + 1]) &#123;  </span><br><span class="line">                    // 若右子节点值比左子节点值大，则biggerIndex记录的是右子节点的值  </span><br><span class="line">                    biggerIndex++;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">if</span> (data[k] &lt; data[biggerIndex]) &#123;  </span><br><span class="line">                // 若当前节点值比子节点最大值小，则交换2者得值，交换后将biggerIndex值赋值给k  </span><br><span class="line">                swap(data, k, biggerIndex);  </span><br><span class="line">                k = biggerIndex;  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                <span class="built_in">break</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主要思想：首先将数组中的n个数建成一个大小为n的<strong>大根堆</strong>，堆顶是整个数组中的最大值，将堆顶元素与<strong>堆的最后一个元素交换位置</strong>，然后将最大值脱离出堆的整个结构，放在数组最后的位置，接下来将<strong>n-1</strong>大小的堆进行大根堆的调整，调整出n-1大根堆的最大值放在堆顶，再把堆顶位置的值与整个堆的最后元素交换，将最大值脱离出堆的整个结构，放在数组相对最后的位置。依次重复步骤，<strong>直到堆的大小减为1</strong>为止，整个数组就变为有序数组，过程结束。<br>堆排序的过程：<br><img src="/img/sort/heap1.png" alt="heap"><br><img src="/img/sort/heap2.png" alt="heap"><br><img src="/img/sort/heap3.png" alt="heap"><br><img src="/img/sort/heap4.png" alt="heap"><br>堆排序<strong>时间复杂度为O(NlogN)</strong>。</p>
<h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public int[] shellSort(int[] arr, int n) &#123;</span><br><span class="line">    // write code here</span><br><span class="line">    <span class="keyword">if</span>(arr == null || n &lt; 2)&#123;</span><br><span class="line">        <span class="built_in">return</span> null;</span><br><span class="line">    &#125;</span><br><span class="line">    int feet = n / 2;</span><br><span class="line">    int index = 0;</span><br><span class="line">    <span class="keyword">while</span>(feet &gt; 0)&#123;</span><br><span class="line">        <span class="keyword">for</span>(int i = feet; i &lt; n; i++)&#123;</span><br><span class="line">            index = i;</span><br><span class="line">            <span class="keyword">while</span>(index &gt;= feet)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[index - feet] &gt; arr[index])&#123;</span><br><span class="line">                    swap(arr, index - feet, index);</span><br><span class="line">                    index -= feet;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        feet /= 2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主要思想：希尔排序是插入排序的一个<strong>改良算法</strong>，插入排序步长为1，希尔排序<strong>步长可调整</strong>。<br>举个🌰来说明：<br>初始步长为3时，数组前3个数6 5 3是不需要考虑的<br><img src="/img/sort/shell1.png" alt="shell"><br>从1开始，1向前跳3位来到了6的数上，1和6进行比较发现1比6小，则两个元素交换位置<br><img src="/img/sort/shell2.png" alt="shell"><br>接下来1就来到了位置0，往前跳3位，则已经越界，所以交换的过程停止，然后继续考察下一位数，直到数组末尾，步长为3的插入排序结束<br><img src="/img/sort/shell3.png" alt="shell"><br><strong>调整步长</strong>继续进行插入排序的过程，希尔排序最终都会以步长为1的情况结束<br><img src="/img/sort/shell4.png" alt="shell"><br>希尔排序的关键是<strong>步长的选择</strong>，<strong>时间复杂度为O(NlogN)</strong>。</p>
<h1 id="基于桶排序的排序算法"><a href="#基于桶排序的排序算法" class="headerlink" title="基于桶排序的排序算法"></a>基于桶排序的排序算法</h1><h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> public int[] countingSort(int[] arr, int n)&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr == null || n &lt; 2) &#123;</span><br><span class="line">        <span class="built_in">return</span> null;</span><br><span class="line">    &#125;</span><br><span class="line">    int min = arr[0];</span><br><span class="line">    int max = arr[0];</span><br><span class="line">    <span class="keyword">for</span> (int i = 1; i &lt; n; i++) &#123;</span><br><span class="line">        min = Math.min(arr[i], min);</span><br><span class="line">        max = Math.max(arr[i], max);</span><br><span class="line">    &#125;</span><br><span class="line">    int[] countArr = new int[max - min + 1];</span><br><span class="line">    <span class="keyword">for</span> (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">        countArr[arr[i] - min]++;</span><br><span class="line">    &#125;</span><br><span class="line">    int index = 0;</span><br><span class="line">    <span class="keyword">for</span> (int i = 0; i &lt; countArr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (countArr[i]-- &gt; 0) &#123;</span><br><span class="line">            arr[index++] = i + min;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> arr;//将排序好的数组返回，完成排序  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主要思想：根据数组中的元素<strong>建桶</strong>，将数组中的元素依次<strong>放入对应的桶中</strong>，当所有元素进入桶之后，从最小的桶<strong>依次倒出</strong>桶中的元素，直到最大的桶号为止，此时，元素被倒出的顺序就是数组排序之后的顺序。上例实现中为了节省内存的开销，记录了数组元素中的<strong>最大值</strong>以及<strong>最小值</strong>，并以此来建立最大桶以及最小桶，要注意的是，要考虑存在相等元素的情况，因此要记录<strong>每个桶中的元素个数</strong>。<br>举个简单的🌰：<br>对员工身高进行排序，因为成年人的身高在100cm-300cm之间，所以将桶定义为100-300<br><img src="/img/sort/count1.png" alt="count"><br><img src="/img/sort/count2.png" alt="count"><br>将员工身高放入相应的桶号中<br><img src="/img/sort/count3.png" alt="count"><br>从100开始倒出元素，数组排序完毕。<br><img src="/img/sort/count4.png" alt="count"><br>计数排序的<strong>时间复杂度为O(N)</strong>。</p>
<h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public int[] radixSort(int[] array, int n)&#123;</span><br><span class="line">    <span class="keyword">if</span> (array == null || n &lt; 2) &#123;</span><br><span class="line">        <span class="built_in">return</span> null;</span><br><span class="line">    &#125;</span><br><span class="line">    int d = 10000;   </span><br><span class="line">    int m = 1;//代表位数对应的数：1,10,100...</span><br><span class="line">    int k = 0;//保存每一位排序后的结果用于下一位的排序输入n</span><br><span class="line">    int[][] bucket = new int[10][n];//排序桶用于保存每次排序后的结果，这一位上排序结果相同的数字放在同一个桶里</span><br><span class="line">    int[] order = new int[n];//用于保存每个桶里有多少个数字</span><br><span class="line">    <span class="keyword">while</span>(m &lt; d)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(int num : array) //将数组array里的每个数字放在相应的桶里</span><br><span class="line">        &#123;</span><br><span class="line">            int digit = (num / m) % 10;</span><br><span class="line">            bucket[digit][order[digit]++] = num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(int i = 0; i &lt; n; i++)//将前一个循环生成的桶里的数据覆盖到原数组中用于保存这一位的排序结果</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(order[i] &gt; 0)//这个桶里有数据，从上到下遍历这个桶并将数据保存到原数组中</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(int j = 0;j &lt; order[i]; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    array[k++] = bucket[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            order[i] = 0;//将桶里计数器置0，用于下一次位排序</span><br><span class="line">        &#125;</span><br><span class="line">        m *= 10;</span><br><span class="line">        k = 0;//将k置0，用于下一轮保存位排序结果</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>举个简单的🌰来说明基数排序的主要思想：<br><img src="/img/sort/radix1.png" alt="radix"><br>准备0-9号桶<br><img src="/img/sort/radix2.png" alt="radix"><br>接下来根据每一个元素个位上的数字，将元素放入对应的桶号中<br><img src="/img/sort/radix3.png" alt="radix"><br>所有元素进桶后再从9号桶至0号桶依次倒出桶内的元素，组成了一个新序列<br><img src="/img/sort/radix4.png" alt="radix"><br>根据每一个元素十位上的数字，将新序列中元素放入对应的桶号中<br><img src="/img/sort/radix5.png" alt="radix"><br>所有元素进桶后再从9号桶至0号桶依次倒出桶内的元素，组成了一个新序列<br><img src="/img/sort/radix6.png" alt="radix"><br>根据每一个元素百位上的数字，将新序列中元素放入对应的桶号中<br><img src="/img/sort/radix7.png" alt="radix"><br>所有元素进桶后再从9号桶至0号桶依次倒出桶内的元素，组成了一个新序列<br><img src="/img/sort/radix8.png" alt="radix"><br>依次迭代下去，最后根据最高位数值选择进入对应的桶中，最后一次倒出的序列就是整个数组排序的结果，过程结束。<br>基数排序的<strong>时间复杂度为O(N)</strong></p>
<h1 id="排序算法的比较"><a href="#排序算法的比较" class="headerlink" title="排序算法的比较"></a>排序算法的比较</h1><p><img src="/img/sort/compare.png" alt="compare"><br><strong>稳定性</strong>：假定待排序的记录序列中，存在多个具有相同的关键字的记录，若经过排序，这些记录的相对次序不变，则称这种排序算法是稳定的，否则称为不稳定的。</p>
<h1 id="排序算法典型案例"><a href="#排序算法典型案例" class="headerlink" title="排序算法典型案例"></a>排序算法典型案例</h1><h2 id="小范围排序"><a href="#小范围排序" class="headerlink" title="小范围排序"></a>小范围排序</h2><p>已知一个几乎有序的数组，几乎有序是指，如果把数组排好顺序的话，每个元素移动的距离可以不超过k，并且k相对于数组来说比较小。请选择一个合适的排序算法针对这个数据进行排序。<br>选择<strong>改进后的堆排序算法</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">public int[] sortElement(int[] A, int n, int k) &#123;</span><br><span class="line">    <span class="keyword">if</span> (A == null || A.length == 0 || n &lt; k) &#123;</span><br><span class="line">        <span class="built_in">return</span> A;</span><br><span class="line">    &#125;</span><br><span class="line">    int[] heap = getKHeap(A, k);</span><br><span class="line">    <span class="keyword">for</span>(int i = k; i &lt; n; i++)&#123;</span><br><span class="line">        A[i - k] = heap[0];</span><br><span class="line">        heap[0] = A[i];</span><br><span class="line">        heapify(heap, 0, k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(int i = n - k; i &lt; n; i++)&#123;</span><br><span class="line">        A[i] = heap[0];</span><br><span class="line">        heap[0] = heap[k - 1];</span><br><span class="line">        heapify(heap, 0, --k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> A;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">public int[] getKHeap(int[] A, int k)&#123;</span><br><span class="line">    int[] heap = new int[k];</span><br><span class="line">    <span class="keyword">for</span>(int i = 0; i &lt; k; i++)&#123;</span><br><span class="line">        heapInsert(heap, A[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> heap;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">public void heapInsert(int[]A, int value, int index)&#123;</span><br><span class="line">    A[index] = value;</span><br><span class="line">    <span class="keyword">while</span>(index != 0)&#123;</span><br><span class="line">        int parent = (index - 1) / 2;</span><br><span class="line">        <span class="keyword">if</span>(A[parent] &gt; A[index])&#123;</span><br><span class="line">            swap(A, parent, index);</span><br><span class="line">            index = parent;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">public  void heapify(int[] arr, int index, int heapSize) &#123;</span><br><span class="line">    int left = index * 2 + 1;</span><br><span class="line">    int right = index * 2 + 2;</span><br><span class="line">    int smallest = index;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; heapSize) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[left] &lt; arr[index]) &#123;</span><br><span class="line">            smallest = left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (right &lt; heapSize &amp;&amp; arr[right] &lt; arr[smallest]) &#123;</span><br><span class="line">            smallest = right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (smallest != index) &#123;</span><br><span class="line">            swap(arr, smallest, index);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        index = smallest;</span><br><span class="line">        left = index * 2 + 1;</span><br><span class="line">        right = index * 2 + 2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>说明：<br>整个数组的最小值肯定是在0~k-1这个区间内的<br><img src="/img/sort/li1-1.png" alt="li1"><br>将a[0]~a[k-1]建立小根堆，将栈顶元素放在数组的第一个位置上<br><img src="/img/sort/li1-2.png" alt="li1"><br>然后将元素组的下一个元素放入小根堆，并对小根堆进行调整<br><img src="/img/sort/li1-3.png" alt="li1"><br>将栈顶元素放在数组的第二个位置上<br><img src="/img/sort/li1-4.png" alt="li1"><br>依次重复步骤，数组排序完毕。<br><strong>时间复杂度为O(NlogK)</strong></p>
<h2 id="重复值判断"><a href="#重复值判断" class="headerlink" title="重复值判断"></a>重复值判断</h2><p>请设计一个高效算法，判断数组中是否有重复值。必须保证额外空间复杂度为O(1)。<br>如果没有空间复杂度的限制，用<strong>哈希表</strong>实现，此题采用<strong>先排序后判断</strong>的方法，采用<strong>非递归的堆排序</strong>实现排序。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">public boolean checkDuplicate(int[] a, int n) &#123;</span><br><span class="line">    // write code here</span><br><span class="line">    a = heapSort(a, n);</span><br><span class="line">    <span class="keyword">for</span>(int i = 0; i &lt; n - 1; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] == a[i + 1])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">public int[] heapSort(int[] A, int n) &#123;</span><br><span class="line">        // write code here</span><br><span class="line">        <span class="keyword">for</span> (int i = 0; i &lt; n; i++) &#123;  </span><br><span class="line">        createMaxdHeap(A, n - 1 - i);  </span><br><span class="line">        swap(A, 0, n - 1 - i);    </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="built_in">return</span> A;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void createMaxdHeap(int[] data, int lastIndex) &#123;  </span><br><span class="line">    <span class="keyword">for</span> (int i = (lastIndex - 1) / 2; i &gt;= 0; i--) &#123;  </span><br><span class="line">        // 保存当前正在判断的节点  </span><br><span class="line">        int k = i;  </span><br><span class="line">        // 若当前节点的子节点存在  </span><br><span class="line">        <span class="keyword">while</span> (2 * k + 1 &lt;= lastIndex) &#123;  </span><br><span class="line">            // biggerIndex总是记录较大节点的值,先赋值为当前判断节点的左子节点  </span><br><span class="line">            int biggerIndex = 2 * k + 1;  </span><br><span class="line">            <span class="keyword">if</span> (biggerIndex &lt; lastIndex) &#123;  </span><br><span class="line">                // 若右子节点存在，否则此时biggerIndex应该等于 lastIndex  </span><br><span class="line">                <span class="keyword">if</span> (data[biggerIndex] &lt; data[biggerIndex + 1]) &#123;  </span><br><span class="line">                    // 若右子节点值比左子节点值大，则biggerIndex记录的是右子节点的值  </span><br><span class="line">                    biggerIndex++;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">if</span> (data[k] &lt; data[biggerIndex]) &#123;  </span><br><span class="line">                // 若当前节点值比子节点最大值小，则交换2者得值，交换后将biggerIndex值赋值给k  </span><br><span class="line">                swap(data, k, biggerIndex);  </span><br><span class="line">                k = biggerIndex;  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                <span class="built_in">break</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="有序数组合并"><a href="#有序数组合并" class="headerlink" title="有序数组合并"></a>有序数组合并</h2><p>有两个从小到大排序以后的数组A和B，其中A的末端有足够的缓冲空容纳B。请编写一个方法，将B合并入A并排序。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> public int[] mergeAB(int[] A, int[] B, int n, int m) &#123;</span><br><span class="line">    // write code here</span><br><span class="line">    <span class="keyword">while</span>(m != 0)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == 0)&#123;</span><br><span class="line">            A[m - 1] = B[m - 1];</span><br><span class="line">            m--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            A[m + n - 1] = A[n - 1] &gt; B[m - 1]? A[--n] : B[--m];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> A;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>举个🌰来说明：<br>首先比较数组A和数组B最后的元素<br><img src="/img/sort/li3-1.png" alt="li3"><br>发现6比5大，所以将6拷贝至数组A最后的位置<br><img src="/img/sort/li3-2.png" alt="li3"><br>接着比较数组A倒数第二个元素4和数组B最后一个元素5，发现5比4大，则将5拷贝至数组A倒数第二个位置<br><img src="/img/sort/li3-3.png" alt="li3"><br>依次比较所有的数，直到有序数组B完成拷贝至数组A中为止，那么数组A就是整个合并后的结果。<br>关键在于<strong>从后往前覆盖数组A</strong></p>
<h2 id="三色排序"><a href="#三色排序" class="headerlink" title="三色排序"></a>三色排序</h2><p>有一个只由0，1，2三种元素构成的整数数组，请使用交换、原地排序而不是使用计数进行排序。<br>本题主要过程<strong>与快速排序划分过程类似</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public int[] sortThreeColor(int[] A, int n) &#123;</span><br><span class="line">    // write code here</span><br><span class="line">    <span class="keyword">if</span> (A == null || n &lt; 2) &#123;</span><br><span class="line">        <span class="built_in">return</span> A;</span><br><span class="line">    &#125;</span><br><span class="line">    int left = -1;</span><br><span class="line">    int right = n;</span><br><span class="line">    int index = 0;</span><br><span class="line">    <span class="keyword">while</span>(index &lt; right)&#123;</span><br><span class="line">        <span class="keyword">if</span>(A[index] == 0)&#123;</span><br><span class="line">            swap(A, ++left, index++);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(A[index] == 2)&#123;</span><br><span class="line">            swap(A, index, ++right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> A;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>举个🌰：<br>因为此过程与快速排序划分过程很类似，这里就不做详细说明了<br><img src="/img/sort/li4-1.png" alt="li4"><br><img src="/img/sort/li4-2.png" alt="li4"><br><img src="/img/sort/li4-3.png" alt="li4"><br><img src="/img/sort/li4-4.png" alt="li4"><br><img src="/img/sort/li4-5.png" alt="li4"><br><img src="/img/sort/li4-6.png" alt="li4"><br><img src="/img/sort/li4-7.png" alt="li4"><br><img src="/img/sort/li4-8.png" alt="li4"></p>
<h2 id="有序矩阵查找"><a href="#有序矩阵查找" class="headerlink" title="有序矩阵查找"></a>有序矩阵查找</h2><p>现在有一个行和列都排好序的矩阵，请设计一个高效算法，快速查找矩阵中是否含有值x。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public boolean findX(int[][] mat, int n, int m, int x) &#123;</span><br><span class="line">    int a = 0;</span><br><span class="line">    int b = m - 1;</span><br><span class="line">    <span class="keyword">while</span>(a &lt; n &amp;&amp; b &gt;= 0)&#123;</span><br><span class="line">        <span class="keyword">if</span> (mat[a][b] == x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">true</span> ;</span><br><span class="line">        &#125;     </span><br><span class="line">        <span class="keyword">if</span> (mat[a][b] &lt; x)&#123;</span><br><span class="line">            a++ ;</span><br><span class="line">        &#125;     </span><br><span class="line">        <span class="keyword">if</span> (mat[a][b] &gt; x)</span><br><span class="line">        &#123;</span><br><span class="line">            b--;</span><br><span class="line">        &#125;                </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>举个🌰来说明：<br>从二维数组的右上角开始<br><img src="/img/sort/li5-1.png" alt="li5"><br>如果当前数大于需要找的数，因为整个二维数组中每一列都是有序的，所以当前数下面的所有数都比需要找的数大，此时向左移动<br><img src="/img/sort/li5-2.png" alt="li5"><br>如果当前数小于需要找的数，因为整个二维数组中每一行都是有序的，所以当前数左边的所有数都比需要找的数小，此时向下移动<br><img src="/img/sort/li5-3.png" alt="li5"><br><img src="/img/sort/li5-4.png" alt="li5"><br>每一个当前数都根据以上的逻辑进行判断，如果在移动的过程中找到了我们需要找的数，返回<strong>true</strong>，整个过程结束，如果一直到越界还未找到，则返回<strong>false</strong>。</p>
<h2 id="最短子数组"><a href="#最短子数组" class="headerlink" title="最短子数组"></a>最短子数组</h2><p>对于一个数组，请设计一个高效算法计算需要排序的最短子数组的长度。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"> public int shortestSubsequence(int[] A, int n) &#123;</span><br><span class="line">    // write code here</span><br><span class="line">    int max = A[0];</span><br><span class="line">    int min = A[n - 1];</span><br><span class="line">    int left = 0;</span><br><span class="line">    int right = 0;</span><br><span class="line">    <span class="keyword">for</span>(int i = 1; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(A[i] &gt; max)</span><br><span class="line">        &#123;</span><br><span class="line">            max = A[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(A[i] &lt; max)</span><br><span class="line">        &#123;</span><br><span class="line">            right = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(int i = n - 2; i &gt;= 0; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(A[i] &lt; min)</span><br><span class="line">        &#123;</span><br><span class="line">            min = A[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(A[i] &gt; min)</span><br><span class="line">        &#123;</span><br><span class="line">            left = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">return</span> ((right-left) == 0) ? 0 : ((right - left) + 1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>举个🌰来说明：<br>首先<strong>从左到右</strong>遍历整个数组，使用单独的变量来记录遍历过的元素的<strong>最大值</strong>，我们只关注于一种情况：<strong>遍历过部分的最大值大于当前数的情况</strong>，这种情况发生的时候，在真实的排序之后，最大值起码会在<strong>当前数的位置或者更右的位置</strong>。从左到右遍历的过程中，我们只记录发生这种情况的<strong>最右位置</strong>；<br><img src="/img/sort/li7-1.png" alt="li7"><br>接下来是<strong>从右往左</strong>遍历整个数组，使用单独的变量来记录遍历过的元素的<strong>最小值</strong>，我们依然只关注于一种情况：<strong>遍历过部分的最小值小于当前数的情况</strong>，这种情况发生的时候，在真实的排序之后，最小值起码会在<strong>当前数的位置或者更左的位置</strong>。从右到左遍历的过程中，我们只记录发生这种情况的<strong>最左位置</strong>；<br><img src="/img/sort/li7-2.png" alt="li7"><br><strong>最左位置和最右位置中间的范围就是需要排序的最短子数组</strong><br><img src="/img/sort/li7-3.png" alt="li7"></p>
<h2 id="相邻两数最大差值"><a href="#相邻两数最大差值" class="headerlink" title="相邻两数最大差值"></a>相邻两数最大差值</h2><p>有一个整形数组A，请设计一个复杂度为O(n)的算法，算出排序后相邻两数的最大差值。<br><strong>来自桶排序思想</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">public int maxGap(int[] nums, int n) &#123;</span><br><span class="line">    // write code here</span><br><span class="line">    <span class="keyword">if</span> (nums == null || n &lt; 2) &#123;</span><br><span class="line">        <span class="built_in">return</span> 0;</span><br><span class="line">    &#125;</span><br><span class="line">n		int min = Integer.MAX_VALUE;</span><br><span class="line">    int max = Integer.MIN_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">        min = Math.min(min, nums[i]);</span><br><span class="line">        max = Math.max(max, nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (min == max) &#123;</span><br><span class="line">        <span class="built_in">return</span> 0;</span><br><span class="line">    &#125;</span><br><span class="line">    boolean[] hasNum = new boolean[len + 1];</span><br><span class="line">    int[] maxs = new int[len + 1];</span><br><span class="line">    int[] mins = new int[len + 1];</span><br><span class="line">    int bid = 0;</span><br><span class="line">    <span class="keyword">for</span> (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">        bid = bucket(nums[i], n, min, max); // 算出桶号</span><br><span class="line">        mins[bid] = hasNum[bid] ? Math.min(mins[bid], nums[i]) : nums[i];</span><br><span class="line">        maxs[bid] = hasNum[bid] ? Math.max(maxs[bid], nums[i]) : nums[i];</span><br><span class="line">        hasNum[bid] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    int res = 0;</span><br><span class="line">    int lastMax = 0;</span><br><span class="line">    int i = 0;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hasNum[i++]) &#123; // 找到第一个不空的桶</span><br><span class="line">            lastMax = maxs[i - 1];</span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hasNum[i]) &#123;</span><br><span class="line">            res = Math.max(res, mins[i] - lastMax);</span><br><span class="line">            lastMax = maxs[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">public int bucket(long num, long len, long min, long max) &#123;</span><br><span class="line">    <span class="built_in">return</span> (int) ((num - min) * len / (max - min));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>说明：</p>
<ul>
<li>首先遍历数组，找到数组的<strong>最小值</strong>和<strong>最大值</strong>，在最小值和最大值范围上等量地分成<strong>n个区间</strong>（n为整个数组的长度）</li>
<li>每个区间分别对应一个桶，每个数根据自己的对应区间进入相应的桶，将最大值单独放在<strong>n+1</strong>号桶中，桶的数量一共有n+1个，而数组元素只有n个，所以在中间必然会出现空桶</li>
<li>我们可以很容易知道，在同一个桶中相邻元素的差值不会大于桶区间，而来自<strong>空桶两侧的相邻数的最大差值肯定大于桶区间</strong>，所以我们<strong>只需考虑桶间相邻数的差值</strong>，也就是<strong>后一个桶的最小值减去前一个桶的最大值</strong></li>
<li>接下来我们只需要考虑每一个桶中的最小值与上一个非空桶的最大值的差值，并记录下其中的最大差值，也就是整个数组在排序之后相邻两数的最大差值。</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>排序算法到这里算是告一段落了，最后的排序案例很是经典，我碰到过好几次，排序算法是算法中重要的一部分知识点，希望自己以后能够将所有的排序算法自主编程实现～继续加油～</p>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 排序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript设计模式之结构型设计模式]]></title>
      <url>/2018/02/06/js-structural-pattern/</url>
      <content type="html"><![CDATA[<blockquote>
<p>继上篇创建型设计模式之后，此篇博文主要记录结构型设计模式的学习过程，如果在某些地方表述不正确的，还希望大家能够指出，共同进步～</p>
</blockquote>
<h1 id="结构型设计模式"><a href="#结构型设计模式" class="headerlink" title="结构型设计模式"></a>结构型设计模式</h1><p>结构型设计模式是一类关注于如何将类或对象组合成更大、更复杂的结构的设计模式，主要应用于对象的组合。包括<strong>外观模式</strong>、<strong>适配器模式</strong>、<strong>代理模式</strong>、<strong>装饰者模式</strong>、<strong>桥接模式</strong>、<strong>组合模式</strong>以及<strong>享元模式</strong>。</p>
<h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><p><strong>外观模式</strong>，为一组复杂的子系统接口提供一个更高级的<strong>统一接口</strong>，通过这个接口使得对子系统接口的访问更加容易。<br><a id="more"></a><br><img src="/img/structual/外观模式.png" alt="外观模式"></p>
<ul>
<li><p>外观模式<strong>简化底层接口复杂性</strong>，比如可以用来简化我们事件的绑定</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> addEvent(dom, <span class="built_in">type</span>, fn)&#123;</span><br><span class="line">    <span class="keyword">if</span>(dom.addEventListener)&#123;</span><br><span class="line">        dom.addEventListener(<span class="built_in">type</span>, fn, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(dom.attachEvent)&#123;</span><br><span class="line">        dom.attachEvent(<span class="string">'on'</span> + <span class="built_in">type</span>, fn);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        dom[<span class="string">'on'</span> + <span class="built_in">type</span>] = fn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>可以实现<strong>小型代码库</strong>，通过使用外观模式来封装多个功能，简化底层操作方法。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">var A = &#123;</span><br><span class="line">    g: <span class="keyword">function</span>(id)&#123;</span><br><span class="line">        <span class="built_in">return</span> document.getElementById(id);</span><br><span class="line">    &#125;,</span><br><span class="line">    css: <span class="keyword">function</span>(id, key, value)&#123;</span><br><span class="line">        document.getElementById(id).style[key] = value;</span><br><span class="line">    &#125;,</span><br><span class="line">    attr: <span class="keyword">function</span>(id, key, value)&#123;</span><br><span class="line">        document.getElementById(id)[key] = value;</span><br><span class="line">    &#125;,</span><br><span class="line">    html: <span class="keyword">function</span>(id, html)&#123;</span><br><span class="line">        document.getElementById(id).innerHTML = html;</span><br><span class="line">    &#125;,</span><br><span class="line">    on: <span class="keyword">function</span>(id, <span class="built_in">type</span>, fn)&#123;</span><br><span class="line">        document.getElementById(id)[<span class="string">'on'</span> + <span class="built_in">type</span>] = fn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// Test</span><br><span class="line">A.css(<span class="string">'box'</span>, <span class="string">'background'</span>, <span class="string">'red'</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>当一个复杂的系统提供一系列复杂的接口方法时，为系统的管理方便会造成接口方法的使用极其复杂，我们可以通过使用外观模式封装隐藏其复杂性，并简化其使用。</p>
<h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><p><strong>适配器模式</strong>，将一个类（对象）的接口（方法或者属性）转化成另外一个接口，以满足用户需求。</p>
<ul>
<li><p>适配异类框架</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//定义框架</span><br><span class="line">var A = A || &#123;&#125;;</span><br><span class="line">A.g = <span class="keyword">function</span>(id)&#123;</span><br><span class="line">    <span class="built_in">return</span> document.getElementById(id);</span><br><span class="line">&#125;</span><br><span class="line">A.on = <span class="keyword">function</span>(id, <span class="built_in">type</span>, fn)&#123;</span><br><span class="line">    var dom = typeof id === <span class="string">'string'</span>? this.g(id) : id;</span><br><span class="line">    <span class="keyword">if</span>(dom.addEventListener)&#123;</span><br><span class="line">        dom.addEventListener(<span class="built_in">type</span>, fn, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(dom.attachEvent)&#123;</span><br><span class="line">        dom.attachEvent(<span class="string">'on'</span> + <span class="built_in">type</span>, fn);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        dom[<span class="string">'on'</span> + <span class="built_in">type</span>] = fn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//适配JQuery</span><br><span class="line">A.g = <span class="keyword">function</span>(id)&#123;</span><br><span class="line">    <span class="built_in">return</span> $(id).get(0);</span><br><span class="line">&#125;</span><br><span class="line">A.on = <span class="keyword">function</span>(id, <span class="built_in">type</span>, fn)&#123;</span><br><span class="line">    var dom = typeof id === <span class="string">'string'</span>? $(<span class="string">'#'</span> + id) : $(id);</span><br><span class="line">    dom.on(<span class="built_in">type</span>, fn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>参数适配器，用适配器来适配传入的参数对象</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 适配参数</span><br><span class="line"><span class="keyword">function</span> doSomeThing(obj)&#123;</span><br><span class="line">    var _adapter = &#123;</span><br><span class="line">        name: <span class="string">'qiuqiu'</span>,</span><br><span class="line">        title: <span class="string">'js'</span>,</span><br><span class="line">        age: <span class="string">'20'</span>,</span><br><span class="line">        color: <span class="string">'pink'</span>,</span><br><span class="line">        size: 100,</span><br><span class="line">        prize: 50</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(var i <span class="keyword">in</span> _adapter)&#123;</span><br><span class="line">        _adapter[i] = obj[i] || _adapter[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>数据适配，将数组转换为对象形式</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 数据适配</span><br><span class="line"><span class="keyword">function</span> arrToObjAdapter(arr)&#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">        name: arr[0],</span><br><span class="line">        <span class="built_in">type</span>: arr[1],</span><br><span class="line">        title: arr[2],</span><br><span class="line">        data: arr[3]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>在JavaScipt中，适配器模式<strong>不仅仅可以适配两个类接口不兼容的问题，还可以用于适配两个代码库，适配前后端数据等</strong>。</p>
<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p><strong>代理模式</strong>，由于一个对象不能直接引用另一个对象，所以需要通过代理对象在这两个对象之间起到中介的作用。<br><img src="/img/structual/proxy.png" alt="proxy"><br>在JavaScript中，代理模式往往用于解决跨域请求问题。</p>
<h2 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h2><p><strong>装饰者模式</strong>，在不改变原对象的基础上，通过对其进行包装拓展（添加属性或者方法）使原有对象可以满足用户的更复杂需求。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 装饰者模式</span><br><span class="line">// 装饰者</span><br><span class="line">var decorator = <span class="keyword">function</span>(input, fn)&#123;</span><br><span class="line">    var input = document.getElementById(input);</span><br><span class="line">    <span class="keyword">if</span>(typeof input.onclick === <span class="string">'function'</span>)&#123;</span><br><span class="line">        var oldClickFn = input.onclick;</span><br><span class="line">        input.onclick = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">            oldClickFn();</span><br><span class="line">            fn();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        input.onclick = fn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Test</span><br><span class="line">decorator(<span class="string">'tel-input'</span>, <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    document.getElementById(<span class="string">'tel_demo_text'</span>).style.display = <span class="string">'none'</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>适配器方法是对原有对象适配，添加的方法与原有方法功能大致相似，装饰者模式提供的方法与原来的方法功能是<strong>有一定区别</strong>的，在装饰者模式中，<strong>不需要了解对象原有的功能</strong>就可以对功能进行拓展。<br>装饰者模式对对象的拓展是一种<strong>良性拓展</strong>，不用了解其具体实现，只是在外部进行了一次封装，这又是对原有功能<strong>完整性</strong>的一种保护。</p>
<h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h2><p><strong>桥接模式</strong>，在系统沿着多个维度变化的同时，又不增加其复杂度并已达到解耦。<br><img src="/img/structual/bridge-1.png" alt="bridge-1"><br><img src="/img/structual/桥接模式1.png" alt="桥接模式"><br>多维度：<br><img src="/img/structual/桥接模式.png" alt="桥接模式"><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">// 桥接模式</span><br><span class="line">// 运动单元</span><br><span class="line"><span class="keyword">function</span> Speed(x, y)&#123;</span><br><span class="line">    this.x = x;</span><br><span class="line">    this.y = y;</span><br><span class="line">&#125;</span><br><span class="line">Speed.prototype.run = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    console.log(<span class="string">"运动起来"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 着色单元</span><br><span class="line"><span class="keyword">function</span> Color(cl)&#123;</span><br><span class="line">    this.color = cl;</span><br><span class="line">&#125;</span><br><span class="line">Color.prototype.draw = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    console.log(<span class="string">"绘制色彩"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 说话单元</span><br><span class="line"><span class="keyword">function</span> Speak(wd)&#123;</span><br><span class="line">    this.word = wd;</span><br><span class="line">&#125;</span><br><span class="line">Speak.prototype.say = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    console.log(<span class="string">"书写字体"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> Ball(x, y, c) &#123;</span><br><span class="line">    this.speed = new Speed(x, y);</span><br><span class="line">    this.color = new Color(c);</span><br><span class="line">&#125;</span><br><span class="line">Ball.prototype.init = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    this.speed.run();</span><br><span class="line">    this.color.draw();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> People(x, y, f)&#123;</span><br><span class="line">    this.speed = new Speed(x, y);</span><br><span class="line">    this.speak = new Speak(f);</span><br><span class="line">&#125;</span><br><span class="line">People.prototype.init = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    this.speed.run();</span><br><span class="line">    this.speak.say();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Test</span><br><span class="line">var ball = new Ball(2, 5, <span class="string">'red'</span>);</span><br><span class="line">ball.init();</span><br></pre></td></tr></table></figure></p>
<p><img src="/img/structual/bridge.png" alt="bridge"><br>桥接模式<strong>先抽象提取共用部分</strong>，然后将实现与抽象通过桥接方法链接在一起，来实现解耦的作用。如我们创建实体<strong>Ball</strong>时，将需要的每个抽象动作单元<strong>Speed</strong>和<strong>Color</strong>通过桥接，链接在一起运作，这样它们之间不会相互影响并且该方式降低了它们之间的耦合。<br>桥接模式最主要的特点是将<strong>实现层</strong>（如元素绑定的事件）与<strong>抽象层</strong>（如修饰页面UI逻辑）解耦分离，使两部分可以独立变化。</p>
<h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><p><strong>组合模式</strong>，又称为部分-整体模式，将对象组合成树形结构以表示“部分整体”的层次结构。使得用户对单个对象和组合对象的使用具有一致性。<br><img src="/img/structual/组合模式.png" alt="组合模式"><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line">// 组合模式</span><br><span class="line">// 寄生组合式继承：寄生式继承＋构造函数继承</span><br><span class="line"><span class="keyword">function</span> inheritObject(o)&#123;</span><br><span class="line">    // 声明一个过渡对象</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">F</span></span>()&#123;&#125;;</span><br><span class="line">    // 过渡对象的原型继承父对象</span><br><span class="line">    F.prototype = o;</span><br><span class="line">    // 返回过渡对象的实例，该实例的原型继承了父对象</span><br><span class="line">    <span class="built_in">return</span> new F();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 处理的不是对象，而是类的原型</span><br><span class="line"><span class="keyword">function</span> inheritPrototype(subClass, superClass)&#123;</span><br><span class="line">    // 复制一份父类的原型副本保存在变量中</span><br><span class="line">    var p = new inheritObject(superClass.prototype);</span><br><span class="line">    // 修正因为重写子类类型导致子类的constructor属性被修改</span><br><span class="line">    p.constructor = subClass;</span><br><span class="line">    // 设置子类的原型</span><br><span class="line">    subClass.prototype = p;</span><br><span class="line">&#125;</span><br><span class="line">// 虚拟父类</span><br><span class="line">var News = <span class="function"><span class="title">function</span></span> ()&#123;</span><br><span class="line">    this.children = [];</span><br><span class="line">    this.element = null;</span><br><span class="line">&#125;</span><br><span class="line">News.prototype = &#123;</span><br><span class="line">    init: <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        throw new Error(<span class="string">"请重写你的方法"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    add: <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        throw new Error(<span class="string">"请重写你的方法"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    getElement: <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        throw new Error(<span class="string">"请重写你的方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 容器类</span><br><span class="line">var Container = <span class="keyword">function</span>(iid, parent)&#123;</span><br><span class="line">    News.call(this);</span><br><span class="line">    this.id = id;</span><br><span class="line">    this.parent = parent;</span><br><span class="line">    this.init();</span><br><span class="line">&#125;</span><br><span class="line">inheritPrototype(Container, News);</span><br><span class="line">Container.prototype.init = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    this.element = document.createElement(<span class="string">'ul'</span>);</span><br><span class="line">    this.element.id = this.id;</span><br><span class="line">    this.element.className = <span class="string">'new-container'</span>;</span><br><span class="line">&#125;</span><br><span class="line">Container.prototype.add = <span class="keyword">function</span>(child)&#123;</span><br><span class="line">    this.children.push(child);</span><br><span class="line">    // 插入当前组件元素树中</span><br><span class="line">    this.element.appendChild(child.getElement());</span><br><span class="line">    <span class="built_in">return</span> this;</span><br><span class="line">&#125;</span><br><span class="line">Container.prototype.getElement = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    <span class="built_in">return</span> this.element;</span><br><span class="line">&#125;</span><br><span class="line">Container.prototype.show = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    this.parent.appendChild(this.element);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var Item = <span class="keyword">function</span>(classname)&#123;</span><br><span class="line">    News.call(this);</span><br><span class="line">    this.classname = classname || <span class="string">''</span>;</span><br><span class="line">    this.init();</span><br><span class="line">&#125;</span><br><span class="line">inheritPrototype(Item, News);</span><br><span class="line">Item.prototype.init = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    this.element = document.createElement(<span class="string">'li'</span>);</span><br><span class="line">    this.element.className = this.classname;</span><br><span class="line">&#125;</span><br><span class="line">Item.prototype.add = <span class="keyword">function</span>(child)&#123;</span><br><span class="line">    this.children.push(child);</span><br><span class="line">    // 插入当前组件元素树中</span><br><span class="line">    this.element.appendChild(child.getElement());</span><br><span class="line">    <span class="built_in">return</span> this;</span><br><span class="line">&#125;</span><br><span class="line">Item.prototype.getElement = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    <span class="built_in">return</span> this.element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 叶子节点类</span><br><span class="line">var ImageNews = <span class="keyword">function</span> (url, href, classname) &#123;</span><br><span class="line">    News.call(this);</span><br><span class="line">    this.url = url || <span class="string">''</span>;</span><br><span class="line">    this.href = href || <span class="string">'#'</span>;</span><br><span class="line">    this.classname = classname || <span class="string">''</span>;</span><br><span class="line">    this.init();</span><br><span class="line">&#125;</span><br><span class="line">inheritPrototype(ImageNews, News);</span><br><span class="line">ImageNews.prototype.init = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    this.element = document.createElement(<span class="string">'a'</span>);</span><br><span class="line">    var img = new Image();</span><br><span class="line">    img.src = this.url;</span><br><span class="line">    this.element.appendChild(img);</span><br><span class="line">    this.element.className = <span class="string">'image-news'</span> + this.classname;</span><br><span class="line">    this.element.href = this.href;</span><br><span class="line">&#125;</span><br><span class="line">ImageNews.prototype.add = <span class="function"><span class="title">function</span></span>()&#123;&#125;</span><br><span class="line">ImageNews.prototype.getElement = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    <span class="built_in">return</span> this.element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var IconNews = <span class="keyword">function</span> (text, href, <span class="built_in">type</span>) &#123;</span><br><span class="line">    News.call(this);</span><br><span class="line">    this.text = text || <span class="string">''</span>;</span><br><span class="line">    this.href = href || <span class="string">'#'</span>;</span><br><span class="line">    this.type = <span class="built_in">type</span> || <span class="string">'video'</span>;</span><br><span class="line">    this.init();</span><br><span class="line">&#125;</span><br><span class="line">inheritPrototype(IconNews, News);</span><br><span class="line">IconNews.prototype.init = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    this.element = document.createElement(<span class="string">'a'</span>);</span><br><span class="line">    this.element.innerHTML = this.text;</span><br><span class="line">    this.element.className = <span class="string">'icon'</span> + this.type;</span><br><span class="line">    this.element.href = this.href;</span><br><span class="line">&#125;</span><br><span class="line">IconNews.prototype.add = <span class="function"><span class="title">function</span></span>()&#123;&#125;</span><br><span class="line">IconNews.prototype.getElement = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    <span class="built_in">return</span> this.element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Test</span><br><span class="line">var news1 = new Container(<span class="string">'news'</span>, document.body);</span><br><span class="line">news1.add(</span><br><span class="line">    new Item(<span class="string">'normal'</span>).add(</span><br><span class="line">        new IconNews(<span class="string">'lalala'</span>, <span class="string">'#'</span>, <span class="string">'video'</span>)</span><br><span class="line">    )</span><br><span class="line">).add(</span><br><span class="line">    new Item(<span class="string">'normal'</span>).add(</span><br><span class="line">        new IconNews(<span class="string">'aiaia'</span>, <span class="string">'#'</span>, <span class="string">'live'</span>)</span><br><span class="line">    )</span><br><span class="line">).add(</span><br><span class="line">    new Item(<span class="string">'normal'</span>).add(</span><br><span class="line">        new ImageNews(<span class="string">'img/test1.png'</span>, <span class="string">'#'</span>, <span class="string">'small'</span>)</span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>
<p>组合模式的约束要求是<strong>接口的统一</strong>，上面的例子中，我们让所有的新闻都继承了一个新闻虚拟父类<strong>News</strong>，其中在虚拟类的构造函数中定义了两个特权变量，是因为后面的所有继承子类都要声明这两个变量，为了简化子类我们也可以将这些共有的变量<strong>提前声明在父类中</strong>，相当于Java语言中<strong>protected</strong>关键字的作用。<br>组合模式能够给我们提供一个<strong>清晰的组成结构</strong>，组合对象类<strong>通过继承同一个父类使其具有统一的方法</strong>，这样也方便了我们统一管理与使用。</p>
<h2 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h2><p><strong>享元模式</strong>，运用共享技术有效地支持大量的细粒度的对象，避免对象间拥有相同内容造成多余的开销。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">// 享元模式</span><br><span class="line">// 通用享元类</span><br><span class="line">var FlyWeight = &#123;</span><br><span class="line">    moveX: <span class="keyword">function</span>(x)&#123;</span><br><span class="line">        this.x = x;</span><br><span class="line">    &#125;,</span><br><span class="line">    moveY: <span class="keyword">function</span>(y)&#123;</span><br><span class="line">        this.y = y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var Player = <span class="keyword">function</span>(x, y, c)&#123;</span><br><span class="line">    this.x = x;</span><br><span class="line">    this.y = y;</span><br><span class="line">    this.c = c;</span><br><span class="line">&#125;</span><br><span class="line">Player.prototype = FlyWeight;</span><br><span class="line">Player.prototype.changeC = <span class="keyword">function</span>(c)&#123;</span><br><span class="line">    this.c = c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var Spirit = <span class="keyword">function</span>(x, y, r)&#123;</span><br><span class="line">    this.x = x;</span><br><span class="line">    this.y = y;</span><br><span class="line">    this.r = r;</span><br><span class="line">&#125;</span><br><span class="line">Spirit.prototype = FlyWeight;</span><br><span class="line">Spirit.prototype.changeR = <span class="keyword">function</span>(r)&#123;</span><br><span class="line">    this.r = r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Test</span><br><span class="line">var player = new Player(5, 6, <span class="string">'red'</span>);</span><br><span class="line">console.log(player);</span><br><span class="line">player.moveX(6);</span><br><span class="line">player.moveY(8);</span><br><span class="line">player.changeC(<span class="string">'green'</span>);</span><br><span class="line">console.log(player)</span><br><span class="line"></span><br><span class="line">var spirit = new Spirit(2, 3, 4);</span><br><span class="line">console.log(spirit);</span><br><span class="line">spirit.moveX(3);</span><br><span class="line">spirit.moveY(4);</span><br><span class="line">spirit.changeR(5);</span><br><span class="line">console.log(spirit)</span><br></pre></td></tr></table></figure></p>
<p><img src="/img/structual/flyWeight.png" alt="flyWeight"><br>我们将人物类<strong>Player</strong>以及精灵类<strong>Spirit</strong>中的内部方法（移动方法）提取出来，实现公有，减少其它类重写时造成的不必要的开销。<br>享元模式主要是<strong>对其数据、方法共享分离</strong>，它将数据和方法分成<strong>内部数据</strong>、<strong>内部方法</strong>和<strong>外部数据</strong>、<strong>外部方法</strong>。内部方法与内部数据指的是相似或者共有的数据和方法。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>JavaScript设计模式之结构型设计模式到此也就告一段落了，因为其中有部分设计模式之前因为时间不足未曾深入学习，所以可能有些理解的不够透彻，如果有存在描述不当的地方，欢迎大家指出～共同进步～</p>
<p>下一篇我将记录JavaScript设计模式中行为型设计模式的学习过程～加油加油～</p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript之设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript设计模式之创建型设计模式]]></title>
      <url>/2018/01/31/js-creational-pattern/</url>
      <content type="html"><![CDATA[<blockquote>
<p>这段时间沉迷于学习JavaScript的设计模式，于是想着与之前所学的设计模式联系起来，对比学习。因为之前有了Java设计模式的部分基础，所以在学习JavaScript设计模式时会进行一些简单的比较记忆，主要的内容安排是模式的定义、模式对应的类图以及模式的简单实现。此篇博文主要记录创建型设计模式的学习过程，如果在某些地方表述不正确的，还希望大家能够指出，共同进步～</p>
</blockquote>
<h1 id="创建型设计模式"><a href="#创建型设计模式" class="headerlink" title="创建型设计模式"></a>创建型设计模式</h1><p>创建型设计模式是一类处理对象创建的设计模式，主要应用于创建对象。包括<strong>简单工厂模式</strong>、<strong>工厂方法模式</strong>、<strong>抽象工厂模式</strong>、<strong>建造者模式</strong>、<strong>原型模式</strong>以及<strong>单例模式</strong>。</p>
<h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><p><strong>简单工厂模式</strong>，又叫静态工厂方法，由一个工厂对象决定创建某一种产品对象类的实例。</p>
<a id="more"></a>
<p>Java语言简单工厂模式的类图表达为：<br><img src="/img/simple-factory-class.png" alt="simple-factory-class"><br>我们可以仿照Java语言的类图绘制类图为：<br><img src="/img/简单工厂模式.png" alt="简单工厂模式"><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">// 简单工厂模式</span><br><span class="line">var Ball = <span class="function"><span class="title">function</span></span>()&#123;&#125;</span><br><span class="line">Ball.prototype = &#123;</span><br><span class="line">    getMember: <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        throw new Error(<span class="string">"抽象方法不能调用"</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    getBallSize: <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        console.log(<span class="string">"抽象方法不能调用"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var Basketball = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    this.intro = <span class="string">"篮球盛行于美国"</span>;</span><br><span class="line">&#125;</span><br><span class="line">Basketball.prototype = new Ball();</span><br><span class="line">Basketball.prototype = &#123;</span><br><span class="line">    getMember: <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        console.log(<span class="string">"每个队伍需要5名队员"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    getBallSize: <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        console.log(<span class="string">"篮球很大"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var Football = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    this.intro = <span class="string">"足球在世界范围内流行"</span>;</span><br><span class="line">&#125;</span><br><span class="line">Football.prototype = new Ball();</span><br><span class="line">Football.prototype = &#123;</span><br><span class="line">    getMember: <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        console.log(<span class="string">"每个队伍需要11名队员"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    getBallSize: <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        console.log(<span class="string">"足球很大"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var Tennis = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    this.intro = <span class="string">"每年有很多网球系列赛"</span>;</span><br><span class="line">&#125;</span><br><span class="line">Tennis.prototype = new Ball();</span><br><span class="line">Tennis.prototype = &#123;</span><br><span class="line">    getMember: <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        console.log(<span class="string">"每个队伍需要1名队员"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    getBallSize: <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        console.log(<span class="string">"网球很小"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 运动工厂</span><br><span class="line">var SportsFactory = <span class="function"><span class="title">function</span></span>()&#123;&#125;</span><br><span class="line">SportsFactory.prototype = &#123;</span><br><span class="line">    getSport: <span class="keyword">function</span>(name)&#123;</span><br><span class="line">        switch(name)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'NBA'</span>:</span><br><span class="line">                <span class="built_in">return</span> new Basketball();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'wordCup'</span>:</span><br><span class="line">                <span class="built_in">return</span> new Football();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'FrenchOpen'</span>:</span><br><span class="line">                <span class="built_in">return</span> new Tennis();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Test</span><br><span class="line">var factory = new SportsFactory();</span><br><span class="line">var footnall = factory.getSport(<span class="string">"wordCup"</span>);</span><br><span class="line">console.log(footnall);</span><br><span class="line">console.log(footnall.intro);</span><br><span class="line">footnall.getMember();</span><br></pre></td></tr></table></figure></p>
<p><img src="/img/simple-factory.png" alt="simple-factory"></p>
<p>简单工厂模式最主要的是所创建的工厂对象<strong>SportsFactory</strong>，工厂函数getSport()根据<strong>传入参数的不同返回不同类的实例</strong>。在此例中Football、Basketball、Tennis都继承了<strong>抽象类Ball</strong>，Ball中定义了两个抽象方法getMember()和getBallSize()，在具体类中重写这两个方法，若子类为重写父类中的抽象方法则会抛出异常：<br><img src="/img/simple-error.png" alt="simple-error"></p>
<p>当然因为JavaScript的特性，我们可以不需要Ball类，在Java语言中引入抽象类，主要是在客户端使用过程中，可以使用父类对象来替代具体的子类对象（里氏代换原则），如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Ball ball; </span><br><span class="line">ball = factory.getSport(<span class="string">"wordCup"</span>);</span><br></pre></td></tr></table></figure></p>
<p>在JavaScript语言中，你还可以使用一个对象来代替多个类<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// 寄生方式</span><br><span class="line">// 使用一个对象代替多个类，提取相似</span><br><span class="line"><span class="keyword">function</span> createSports(<span class="built_in">type</span>, intro, member, size)&#123;</span><br><span class="line">    var o = new Object();</span><br><span class="line">    o.intro = intro;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">type</span> == <span class="string">'football'</span>)&#123;</span><br><span class="line">        console.log(<span class="string">"foolball"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">type</span> == <span class="string">'basketball'</span>)&#123;</span><br><span class="line">        console.log(<span class="string">"basketball"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">type</span> == <span class="string">'tennis'</span>)&#123;</span><br><span class="line">        console.log(<span class="string">"tennis"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    o.getMember = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        console.log(member);</span><br><span class="line">    &#125;</span><br><span class="line">    o.getBallSize = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        console.log(size);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line">// Test</span><br><span class="line">var basketball = createSports(<span class="string">"basketball"</span>, <span class="string">"This is a Basketball"</span>, <span class="string">"5"</span>, <span class="string">"big"</span>);</span><br><span class="line">console.log(basketball);</span><br><span class="line">console.log(basketball.intro);</span><br><span class="line">basketball.getMember();</span><br></pre></td></tr></table></figure></p>
<p><img src="/img/simple-factory2.png" alt="simple-factory2"></p>
<p>这种方式将相似的部分提出，不相似的部分进行针对性的处理。</p>
<p>这两种方式存在一定的差异，第一种方式是<strong>通过类实例化对象创建</strong>的，第二种方式是<strong>通过创建一个新对象然后包装增强其属性和功能来实现</strong>的。选择哪种工厂方式来实现你的需求还要看你是如何分析你的需求的。</p>
<h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><p><strong>工厂方法模式</strong>，通过对产品类的抽象使其创建业务主要负责用于创建多类产品的实例。<br>Java语言工厂方法模式类图表示为：<br><img src="/img/工厂方法模式.png" alt="工厂方法模式"><br>工厂方法模式<strong>让子类决定将哪一种产品实例化，让一个类的实例化延迟到其子类</strong>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">// 工厂方法模式</span><br><span class="line">// 使用安全模式创建工厂类</span><br><span class="line">var Factory = <span class="keyword">function</span>(<span class="built_in">type</span>, content)&#123;</span><br><span class="line">    <span class="keyword">if</span>(this instanceof Factory)&#123;</span><br><span class="line">        var s = new this[<span class="built_in">type</span>](content);</span><br><span class="line">        <span class="built_in">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">return</span> new Factory(<span class="built_in">type</span>, content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 工厂原型中设置创建所有类型数据对象的基类</span><br><span class="line">Factory.prototype = &#123;</span><br><span class="line">    Java: <span class="keyword">function</span>(content)&#123;</span><br><span class="line">        // 具体创建产品的过程</span><br><span class="line">        console.log(content);</span><br><span class="line">    &#125;,</span><br><span class="line">    JavaScript: <span class="keyword">function</span>(content)&#123;</span><br><span class="line">        console.log(content);</span><br><span class="line">    &#125;,</span><br><span class="line">    UI: <span class="keyword">function</span>(content)&#123;</span><br><span class="line">        console.log(content);</span><br><span class="line">    &#125;,</span><br><span class="line">    PHP: <span class="keyword">function</span>(content)&#123;</span><br><span class="line">        console.log(content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Test</span><br><span class="line">var data = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">type</span>: <span class="string">'JavaScript'</span>,</span><br><span class="line">        content: <span class="string">'javascript'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">type</span>: <span class="string">'Java'</span>,</span><br><span class="line">        content: <span class="string">'java'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">type</span>: <span class="string">'UI'</span>,</span><br><span class="line">        content: <span class="string">'UI'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">type</span>: <span class="string">'PHP'</span>,</span><br><span class="line">        content: <span class="string">'PHP'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">type</span>: <span class="string">'JavaScript'</span>,</span><br><span class="line">        content: <span class="string">'other javascript'</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(var d of data)&#123;</span><br><span class="line">    Factory(d.type, d.content)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="/img/factory-method.png" alt="factory-method"></p>
<p>在实现工厂方法模式时，采用了<strong>安全模式</strong>创建工厂类，安全模式可以避免用户使用类时缺少<strong>new</strong>关键词而导致的错误。<br>JavaScript中使用安全模式创建工厂类，在工厂原型中创建所有类型数据对象的基类，通过使用时向工厂类传递<strong>数据类型</strong>和<strong>数据内容</strong>两个参数，来动态的实例化相应的产品类。<br>使用工厂方法模式可以避免使用者和对象类之间的耦合。</p>
<h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><p><strong>抽象工厂模式</strong>，通过对类的工厂抽象使其业务用于对<strong>产品类簇</strong>的创建，而不负责创建某一类产品的实例。<br>JavaScript语言虽然保留<strong>abstract</strong>关键字，但目前来说还不能像Java语言那样轻松地创建。我们可以在类的方法中手动地抛出错误来模拟抽象类。<br><img src="/img/抽象工厂模式.png" alt="抽象工厂模式"><br>抽象工厂模式涉及的对象比较多，使用UML类图可以表示为：<br><img src="/img/抽象工厂模式2.png" alt="抽象工厂模式2"><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line">// 抽象工厂模式</span><br><span class="line">var Vehicle = <span class="keyword">function</span>(subType, superType)&#123;</span><br><span class="line">    // 判断抽象产品类中是否有该抽象类</span><br><span class="line">    <span class="keyword">if</span>(typeof Vehicle[superType] === <span class="string">'function'</span>)&#123;</span><br><span class="line">        <span class="keyword">function</span> <span class="function"><span class="title">F</span></span>()&#123;&#125;;</span><br><span class="line">        // 继承父类的属性和方法</span><br><span class="line">        F.prototype = new Vehicle[superType]();</span><br><span class="line">        // 将子类constructor属性指向子类</span><br><span class="line">        subType.constructor = subType;</span><br><span class="line">        // 子类原型继承父类</span><br><span class="line">        subType.prototype = new F();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        throw new Error(<span class="string">"未创建该抽象类"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 小汽车抽象类</span><br><span class="line">Vehicle.Car =  <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    this.type = <span class="string">'car'</span>;</span><br><span class="line">&#125;</span><br><span class="line">Vehicle.Car.prototype = &#123;</span><br><span class="line">    getPrice: <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        <span class="built_in">return</span> new Error(<span class="string">"抽象方法不能调用"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 公共汽车抽象类</span><br><span class="line">Vehicle.Bus =  <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    this.type = <span class="string">'bus'</span>;</span><br><span class="line">&#125;</span><br><span class="line">Vehicle.Bus.prototype = &#123;</span><br><span class="line">    getPrice: <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        <span class="built_in">return</span> new Error(<span class="string">"抽象方法不能调用"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 汽车具体类——宝马汽车</span><br><span class="line">var BMWCar = <span class="keyword">function</span>(price)&#123;</span><br><span class="line">    this.price = price;</span><br><span class="line">&#125;</span><br><span class="line">Vehicle(BMWCar, <span class="string">'Car'</span>);</span><br><span class="line">BMWCar.prototype.getPrice = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    <span class="built_in">return</span> this.price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 汽车具体类——兰博基尼汽车</span><br><span class="line">var LamborghiniCar = <span class="keyword">function</span>(price)&#123;</span><br><span class="line">    this.price = price;</span><br><span class="line">&#125;</span><br><span class="line">Vehicle(LamborghiniCar, <span class="string">'Car'</span>);</span><br><span class="line">LamborghiniCar.prototype.getPrice = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    <span class="built_in">return</span> this.price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 公共汽车具体类——宝马公共汽车</span><br><span class="line">var BMWBus = <span class="keyword">function</span>(price)&#123;</span><br><span class="line">    this.price = price;</span><br><span class="line">&#125;</span><br><span class="line">Vehicle(BMWBus, <span class="string">'Bus'</span>);</span><br><span class="line">BMWBus.prototype.getPrice = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    <span class="built_in">return</span> this.price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 公共汽车具体类——兰博基尼公共汽车</span><br><span class="line">var LamborghiniBus = <span class="keyword">function</span>(price)&#123;</span><br><span class="line">    this.price = price;</span><br><span class="line">&#125;</span><br><span class="line">Vehicle(LamborghiniBus, <span class="string">'Bus'</span>);</span><br><span class="line">LamborghiniBus.prototype.getPrice = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        <span class="built_in">return</span> this.price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 抽象工厂</span><br><span class="line">var VehicleFactory = <span class="keyword">function</span>(subType, superType)&#123;</span><br><span class="line">    // 判断抽象工厂中是否有该抽象类</span><br><span class="line">    <span class="keyword">if</span>(typeof VehicleFactory[superType] === <span class="string">'function'</span>)&#123;</span><br><span class="line">        <span class="keyword">function</span> <span class="function"><span class="title">F</span></span>()&#123;&#125;;</span><br><span class="line">        // 继承父类的属性和方法</span><br><span class="line">        F.prototype = new VehicleFactory[superType]();</span><br><span class="line">        // 将子类constructor属性指向子类</span><br><span class="line">        subType.constructor = subType;</span><br><span class="line">        // 子类原型继承父类</span><br><span class="line">        subType.prototype = new F();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        throw new Error(<span class="string">"未创建该抽象类"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 宝马工厂</span><br><span class="line">VehicleFactory.BMW = <span class="keyword">function</span>(<span class="built_in">type</span>)&#123;</span><br><span class="line">    this.factory = <span class="string">'宝马'</span></span><br><span class="line">&#125;</span><br><span class="line">VehicleFactory.BMW.prototype = &#123;</span><br><span class="line">    create: <span class="keyword">function</span>(<span class="built_in">type</span>)&#123;</span><br><span class="line">        <span class="built_in">return</span> new Error(<span class="string">"抽象方法不能调用"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 兰博基尼工厂</span><br><span class="line">VehicleFactory.Lamborghini = <span class="keyword">function</span>(<span class="built_in">type</span>)&#123;</span><br><span class="line">    this.factory = <span class="string">'兰博基尼'</span></span><br><span class="line">&#125;</span><br><span class="line">VehicleFactory.Lamborghini.prototype = &#123;</span><br><span class="line">    create: <span class="keyword">function</span>(<span class="built_in">type</span>)&#123;</span><br><span class="line">        <span class="built_in">return</span> new Error(<span class="string">"抽象方法不能调用"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 具体工厂——宝马工厂</span><br><span class="line">var BMWFactory = <span class="function"><span class="title">function</span></span>()&#123;&#125;</span><br><span class="line">VehicleFactory(BMWFactory, <span class="string">'BMW'</span>);</span><br><span class="line">BMWFactory.prototype = &#123;</span><br><span class="line">    create: <span class="keyword">function</span>(<span class="built_in">type</span>)&#123;</span><br><span class="line">        console.log(<span class="string">"宝马工厂生产"</span> + <span class="built_in">type</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 具体工厂——兰博基尼工厂</span><br><span class="line">var LamborghiniFactory = <span class="function"><span class="title">function</span></span>()&#123;&#125;</span><br><span class="line">VehicleFactory(LamborghiniFactory, <span class="string">'Lamborghini'</span>);</span><br><span class="line">LamborghiniFactory.prototype = &#123;</span><br><span class="line">    create: <span class="keyword">function</span>(<span class="built_in">type</span>)&#123;</span><br><span class="line">        console.log(<span class="string">"兰博基尼工厂生产"</span> + <span class="built_in">type</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Test</span><br><span class="line">var testCar = new BMWCar(10000);</span><br><span class="line">var testBus = new BMWBus(100);</span><br><span class="line">var testBMW = new BMWFactory();</span><br><span class="line">testBMW.create(testCar.type);</span><br><span class="line">testBMW.create(testBus.type)</span><br></pre></td></tr></table></figure></p>
<p><img src="/img/abstract-factory.png" alt="abstract-factory"><br>首先定义了抽象汽车类<strong>Car</strong>和抽象公共汽车类<strong>Bus</strong>，创建了<strong>Car</strong>抽象汽车的具体产品汽车子类宝马汽车子类<strong>BMWCar</strong>和兰博基尼汽车子类<strong>LamborghiniCar</strong>，<strong>Bus</strong>抽象公共汽车的具体产品公共汽车子类宝马公共汽车子类<strong>BMWBus</strong>和兰博基尼公共汽车子类<strong>LamborghiniBus</strong>，然后定义了抽象工厂类<strong>VehicleFactory</strong>，创建了具体工厂子类宝马工厂<strong>BMWFactory</strong>和兰博基尼工厂<strong>VehicleFactory</strong>。<br>一个工厂负责创建一个产品族中的产品，<strong>BMWCar</strong>和<strong>LamborghiniCar</strong>同属于<strong>Car</strong>的产品等级结构中，一个工厂等级结构可以创建出分属于不同产品等级结构的一个产品族中的所有对象，</p>
<h2 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h2><p><strong>建造者模式</strong>，将一个复杂对象的<strong>构建层</strong>与其<strong>表示层</strong>相互分离，同样的构建过程可采用不同的表示。<br>建造者模式关注的是<strong>对象创建的细节</strong>，使用UML类图表示类之间的关系如下：<br><img src="/img/建造者模式.png" alt="建造者模式"><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">// 建造者模式——关心对象创建的整个过程</span><br><span class="line">// 应聘者类</span><br><span class="line">var Human = <span class="keyword">function</span>(param)&#123;</span><br><span class="line">    this.skill = param &amp;&amp; param.skill || <span class="string">'保密'</span>;</span><br><span class="line">    this.hobby = param &amp;&amp; param.hobby || <span class="string">'保密'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Human.prototype = &#123;</span><br><span class="line">    getSkill: <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        <span class="built_in">return</span> this.skill;</span><br><span class="line">    &#125;,</span><br><span class="line">    getHobby: <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        <span class="built_in">return</span> this.hobby;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 实例化姓名类</span><br><span class="line">var Named = <span class="keyword">function</span>(name)&#123;</span><br><span class="line">    var that = this;</span><br><span class="line">    (<span class="keyword">function</span>(name, that)&#123;</span><br><span class="line">        that.wholeName = name;</span><br><span class="line">        <span class="keyword">if</span>(name.indexOf(<span class="string">' '</span> &gt; -1))&#123;</span><br><span class="line">            that.firstName = name.slice(0, name.indexOf(<span class="string">' '</span>));</span><br><span class="line">            that.secondName = name.slice(name.indexOf(<span class="string">' '</span>) + 1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)(name, that);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 实例化职位类</span><br><span class="line">var Work = <span class="keyword">function</span>(work)&#123;</span><br><span class="line">    var that = this;</span><br><span class="line">    (<span class="keyword">function</span>(work, that)&#123;</span><br><span class="line">        switch(work)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'code'</span>:</span><br><span class="line">                that.work = <span class="string">'工程师'</span>;</span><br><span class="line">                that.workDescript = <span class="string">'每天沉醉于编程'</span>;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'UE'</span>:</span><br><span class="line">                that.work = <span class="string">'设计师'</span>;</span><br><span class="line">                that.workDescript = <span class="string">'设计更似一种艺术'</span>;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'teach'</span>:</span><br><span class="line">                that.work = <span class="string">'教师'</span>;</span><br><span class="line">                that.workDescript = <span class="string">'分享也是一种快乐'</span>;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            default:</span><br><span class="line">                that.work = work;</span><br><span class="line">                that.workDescript = <span class="string">'not know'</span>;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)(work, that);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Work.prototype = &#123;</span><br><span class="line">    changeWork: <span class="keyword">function</span>(work)&#123;</span><br><span class="line">        this.work = work;</span><br><span class="line">    &#125;,</span><br><span class="line">    changeDescript: <span class="keyword">function</span>(setence)&#123;</span><br><span class="line">        this.workDescript = setence;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 应聘者建造者</span><br><span class="line">var Person = <span class="keyword">function</span>(name, work)&#123;</span><br><span class="line">    var _person = new Human();</span><br><span class="line">    _person.name = new Named(name);</span><br><span class="line">    _person.work = new Work(work);</span><br><span class="line">    <span class="built_in">return</span> _person;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Test</span><br><span class="line">var person = new Person(<span class="string">'xiao ming'</span>, <span class="string">'code'</span>);</span><br><span class="line">console.log(person.skill);</span><br><span class="line">console.log(person.name.firstName);</span><br><span class="line">console.log(person.name.secondName);</span><br><span class="line">console.log(person.work.work);</span><br><span class="line">console.log(person.work.workDescript);</span><br><span class="line">person.work.changeDescript(<span class="string">'更改职位描述！'</span>);</span><br><span class="line">console.log(person.work.workDescript);</span><br></pre></td></tr></table></figure></p>
<p><img src="/img/builder.png" alt="builder"><br>在事例代码中应聘者<strong>Human</strong>类充当UML类图中的<strong>Product</strong>类，应聘者建造者<strong>Person</strong>类充当UML类图中的<strong>ConcreteBUilder</strong>类，测试代码部分可以看作是UML类图中的<strong>Director</strong>类，实例化职位类<strong>Work</strong>和实例化姓名类<strong>Named</strong>是Human的<strong>创建过程</strong>。<br>建造者模式可以看作是为一个对象添加新的信息后返回新对象的过程。</p>
<h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><p><strong>原型模式</strong>，用原型实例指向创建对象的类，使用于创建新的对象的类共享原型对象的属性以及方法。<br>原型模式在于通过复制这个原型来创建新的对象，可以<strong>复制原型对象的属性及方法</strong>来创建。<br>下例代码实现了使用原型模式来复制多个原型对象来对新对象的创建<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">// 对象复制方法</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">prototypeExtend</span></span>()&#123;</span><br><span class="line">    var F = <span class="function"><span class="title">function</span></span>()&#123;&#125;,</span><br><span class="line">        args = arguments,</span><br><span class="line">        len = args.length,</span><br><span class="line">        i = 0;</span><br><span class="line">    <span class="keyword">for</span>(; i &lt; len; i++)&#123;</span><br><span class="line">        // 遍历每个模版对象中的属性</span><br><span class="line">        <span class="keyword">for</span>(var j <span class="keyword">in</span> args[i])&#123;</span><br><span class="line">            // 将属性复制到缓存类原型中</span><br><span class="line">            F.prototype[j] = args[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> new F();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Test</span><br><span class="line">var penguin = prototypeExtend(</span><br><span class="line">    &#123;</span><br><span class="line">        speed: 20,</span><br><span class="line">        swim: <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">            console.log(<span class="string">"游泳速度："</span> + this.speed);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        run: <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">            console.log(<span class="string">"奔跑速度："</span> + this.speed);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        jump: <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">            console.log(<span class="string">"跳跃动作"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">penguin.swim();</span><br><span class="line">penguin.run(10);</span><br><span class="line">penguin.jump();</span><br></pre></td></tr></table></figure></p>
<p><img src="/img/prototype.png" alt="prototype"></p>
<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p><strong>单例模式</strong>，又称为单体模式，是只允许实例化一次的对象类。</p>
<ul>
<li><p>用途一： 定义<strong>命名空间</strong>，下例代码中Qiu即为命名空间，使用其中方法时需<strong>Qiu.xx()</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 单例模式</span><br><span class="line">var Qiu = &#123;</span><br><span class="line">    g: <span class="keyword">function</span>(id)&#123;</span><br><span class="line">        <span class="built_in">return</span> document.getElementById(id);</span><br><span class="line">    &#125;,</span><br><span class="line">    css: <span class="keyword">function</span>(id, key, value)&#123;</span><br><span class="line">        this.g(id).style[key] = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>用途二： 管理<strong>静态变量</strong>——只能访问不能修改</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var Conf = (<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    // 私有变量</span><br><span class="line">    var conf = &#123;</span><br><span class="line">        MAX_NUM: 100,</span><br><span class="line">        MIN_NUM: 1,</span><br><span class="line">        COUNT: 1000</span><br><span class="line">    &#125;</span><br><span class="line">    // 返回取值器对象</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">        get: <span class="keyword">function</span>(name)&#123;</span><br><span class="line">            <span class="built_in">return</span> conf[name]? conf[name]: null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line">var count = Conf.get(<span class="string">'COUNT'</span>);</span><br><span class="line">console.log(count);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="/img/singleton-count.png" alt="singleton-count"></p>
<ul>
<li>用途三： <strong>惰性单例</strong><br><img src="/img/单例模式.png" alt="单例模式"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 惰性单例</span><br><span class="line">var LazySingle = (<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    var _instance = null;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">Single</span></span>()&#123;</span><br><span class="line">        // 定义私有属性和方法</span><br><span class="line">        <span class="built_in">return</span> &#123;</span><br><span class="line">            publicMethod: <span class="function"><span class="title">function</span></span>()&#123;&#125;,</span><br><span class="line">            publicProperty: <span class="string">'1.0'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 获取单例对象接口</span><br><span class="line">    <span class="built_in">return</span> <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        <span class="keyword">if</span>(!_instance)&#123;</span><br><span class="line">            _instance = Single();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> _instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line">console.log(LazySingle().publicProperty);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="/img/lazysingleton.png" alt="lazysingleton"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>JavaScript设计模式之创建型设计模式到此也就告一段落了，因为其中有部分设计模式之前因为时间不足未曾深入学习，所以可能有些理解的不够透彻，如果有存在描述不当的地方，欢迎大家指出～共同进步～</p>
<p>下一篇我将记录JavaScript设计模式中结构型设计模式的学习过程～加油加油～</p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript之设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript之继承]]></title>
      <url>/2018/01/30/js-herit/</url>
      <content type="html"><![CDATA[<blockquote>
<p>这段时间主要学习了JavaScript的知识，不得不感慨js语言的强大与灵活。此次主要是对JavaScript中的继承进行学习记录与总结，但免不了涉及到面向对象编程、封装以及多态的相应知识。接下来我将先介绍什么是面向对象编程以及为什么要采用面向对象来进行编程，接着介绍一下面向对象中的重要特性——封装，然后介绍js实现继承的六种方法，最后简单介绍一下js实现多态的方式。此篇博文主要目的是想将此次的学习过程记录下来，以便进行后续的深入学习，如果在理解上有偏差的话，还请大家不吝赐教～</p>
</blockquote>
<h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><h3 id="什么是面向对象编程"><a href="#什么是面向对象编程" class="headerlink" title="什么是面向对象编程"></a>什么是面向对象编程</h3><p>面向对象编程通俗来说，就是将你的需求抽象成一个对象，然后针对这个对象分析其特征（属性）和动作（方法）。<br> 在Java语言中通过class关键字就可以很方便地声明一个对象，但在JavaScript语言中因为没有通过class实现类封装的方法，所以通常是通过一些特性模仿实现的，但这也带来了极高的灵活性，使我们编写的代码更自由。<br><a id="more"></a></p>
<h3 id="为什么要引入面向对象的思想"><a href="#为什么要引入面向对象的思想" class="headerlink" title="为什么要引入面向对象的思想"></a>为什么要引入面向对象的思想</h3><p>由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统更加灵活、更加易于维护，代码复用性强，能够在很大程度上促进团队的协同合作。</p>
<h2 id="前置要点"><a href="#前置要点" class="headerlink" title="前置要点"></a>前置要点</h2><p>在JavaScript中创建一个类很容易，首先声明一个函数保存在一个变量中，然后在函数（类）的内部通过对<strong>this</strong>变量添加属性或者方法来实现对类添加属性或者方法，例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var Book = <span class="keyword">function</span>(id, bookName, price)&#123;</span><br><span class="line">    this.id = id;</span><br><span class="line">    this.bookName = bookName;</span><br><span class="line">    this.price = price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>因为类是一个对象，有一个原型<strong>prototype</strong>用于指向其继承的属性和方法，所以也可以通过在类的原型上添加属性或方法。但通过this定义的属性和方法是该对象自身拥有的属性和方法，而prototype指向的是其继承的属性和方法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Book.prototype.display = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    //展示这本书</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>或<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Book.prototype = &#123;</span><br><span class="line">    display: <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        //展示这本书</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>但两种方式不要混用。<br>当创建一个函数或者对象时都会为其创建一个原型对象prototype，在prototype中又会像创建this一样创建一个<strong>constructor</strong>属性，指向拥有整个原型对象的函数或对象，也就是🌰中的Book对象。</p>
<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>封装（Encapsulation）是面向对象方法的重要特性，就是把对象的属性和方法结合为一个独立的整体，并尽可能隐藏对象的内部实现细节。</p>
<ul>
<li>由于JavaScript的函数级作用域，声明在函数内部的变量以及方法在外界是访问不到的，通过此特性即可创建类的<strong>私有变量</strong>以及<strong>私有方法</strong>。</li>
<li>在函数内部通过<strong>this</strong>创建的属性和方法，在类创建对象时，每个对象自身都拥有一份并且可以在外部访问到，因此可以通过<strong>this</strong>创建对象的<strong>公有属性</strong>和<strong>公有方法</strong>。</li>
<li>通过<strong>this</strong>创建的方法，不但可以访问这些对象的公有属性和公有方法，还可以访问到其私有属性和私有方法，所以又称这些方法为<strong>特权方法</strong></li>
<li>类外面通过点语法定义的属性以及方法被称为<strong>类的静态公有属性</strong>和<strong>类的静态公有方法</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">var Book = <span class="keyword">function</span>(id, name, price)&#123;</span><br><span class="line">    // 私有属性</span><br><span class="line">    var num = 1;</span><br><span class="line">    // 私有方法</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">checkId</span></span>()&#123;&#125;</span><br><span class="line">    // 特权方法</span><br><span class="line">    this.getName = <span class="function"><span class="title">function</span></span>()&#123;&#125;;</span><br><span class="line">    this.getPrice = <span class="function"><span class="title">function</span></span>()&#123;&#125;;</span><br><span class="line">    this.setName = <span class="function"><span class="title">function</span></span>()&#123;&#125;;</span><br><span class="line">    this.setPrice = <span class="function"><span class="title">function</span></span>()&#123;&#125;;</span><br><span class="line">    // 对象公有属性</span><br><span class="line">    this.id = id;</span><br><span class="line">    // 对象公有方法</span><br><span class="line">    this.copy = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        console.log(num)</span><br><span class="line">    &#125;;</span><br><span class="line">    // 构造器</span><br><span class="line">    this.setName(name);</span><br><span class="line">    this.setPrice(price);</span><br><span class="line">&#125;</span><br><span class="line">// 类静态公有属性（对象不能访问）</span><br><span class="line">Book.isChinese = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">// 类静态公有方法（对象不能访问）</span><br><span class="line">Book.resetTime = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    console.log(<span class="string">'new time'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var book = new Book(11, <span class="string">'JavaScript 设计模式'</span>, 50);</span><br><span class="line">console.log(book.num);</span><br><span class="line">book.copy();</span><br><span class="line">console.log(book.id);</span><br><span class="line">console.log(book.isJSBook);</span><br><span class="line">console.log(book.isChinese);</span><br><span class="line">console.log(Book.isChinese);</span><br><span class="line">Book.resetTime();</span><br></pre></td></tr></table></figure></p>
<p>运行结果为：<br><img src="/img/encapsulate.png" alt="encapsulate"></p>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p><strong>继承</strong>是从已有的类中派生出新的类，新的类能吸收已有类的数据属性和行为，并能扩展新的能力。<br>JavaScript中并没有实现继承的现有机制，接下来我将会介绍JavaScript中实现继承的几种方法。</p>
<h3 id="方法一：-类式继承"><a href="#方法一：-类式继承" class="headerlink" title="方法一： 类式继承"></a>方法一： 类式继承</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// 类式继承</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">SuperClass</span></span>()&#123;</span><br><span class="line">    this.superValue = <span class="literal">true</span>;</span><br><span class="line">    this.book = [<span class="string">'JavaScrpt'</span>, <span class="string">'html'</span>, <span class="string">'css'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperClass.prototype.getSuperValue = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    <span class="built_in">return</span> this.superValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">SubClass</span></span>()&#123;</span><br><span class="line">    this.subValue = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 继承父类</span><br><span class="line">SubClass.prototype = new SuperClass();</span><br><span class="line"></span><br><span class="line">//继承之后再添加子类公有方法</span><br><span class="line">SubClass.prototype.getSubValue = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    <span class="built_in">return</span> this.subValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var instance = new SubClass();</span><br><span class="line">console.log(instance.getSubValue());</span><br><span class="line">console.log(instance.getSuperValue());</span><br></pre></td></tr></table></figure>
<p><img src="/img/class-inherit.png" alt="class-inherit"></p>
<p>类式继承中实现继承的主要方法是<strong>SubClass.prototype = new SuperClass();</strong>SubClass的原型被赋予了SuperClass的实例，因而SubClass的原型继承了SuperClass。<br>类式继承存在两个缺点：</p>
<ul>
<li>由于子类通过其原型prototype对父类实例化，继承了父类。所以说父类中的公有属性要是引用类型，就会在子类中被所有实例共用，因此一个子类的实例更改子类原型从父类构造函数中继承来的公有属性就会直接影响到其他子类。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var instance1 = new SubClass();</span><br><span class="line">var instance2 = new SubClass();</span><br><span class="line">console.log(instance2.book);</span><br><span class="line">instance1.book.push(<span class="string">'设计模式'</span>);</span><br><span class="line">console.log(instance2.book);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="/img/class-dis.png" alt="class-dis"></p>
<ul>
<li>由于子类实现的继承是靠其原型prototype对父类的实例化实现的，因此在创建父类的时候，是无法向父类传递参数的，因而在实例化父类的时候也无法对父类构造函数内的属性进行初始化。</li>
</ul>
<p>因为类式继承存在的两个缺点，所以引出了第二种继承方法——构造函数继承</p>
<h3 id="方法二：-构造函数继承"><a href="#方法二：-构造函数继承" class="headerlink" title="方法二： 构造函数继承"></a>方法二： 构造函数继承</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 构造函数继承</span><br><span class="line"><span class="keyword">function</span> SuperClass(id)&#123;</span><br><span class="line">    this.id = id;</span><br><span class="line">    this.books = [<span class="string">'JavaScrpt'</span>, <span class="string">'html'</span>, <span class="string">'css'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperClass.prototype.showBooks = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    console.log(this.books);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> SubClass(id)&#123;</span><br><span class="line">    // 构造函数继承，使用call来更改函数的作用环境</span><br><span class="line">    SuperClass.call(this, id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var instance1 = new SubClass(10);</span><br><span class="line">var instance2 = new SubClass(20);</span><br><span class="line"></span><br><span class="line">instance1.books.push(<span class="string">"Java"</span>);</span><br><span class="line">console.log(instance1.id);</span><br><span class="line">console.log(instance1.books);</span><br><span class="line">console.log(instance2.id)</span><br><span class="line">console.log(instance2.books);</span><br></pre></td></tr></table></figure>
<p><img src="/img/construct-inherit.png" alt="construct-inherit"></p>
<p><strong>SuperClass.call(this, id);</strong>这条语句是构造函数继承的精华，call方法可以更改函数的执行环境，因此在子类中，对SuperClass调用这个方法就是将子类中的变量在父类中执行一遍，由于父类中是给<strong>this</strong>绑定属性的，因此子类自然就继承了父类的公有属性。<br>由于构造函数继承没有涉及原型prototype，所以父类的原型方法自然不会被子类继承。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">instance1.showBooks();</span><br></pre></td></tr></table></figure></p>
<p><img src="/img/constructor-dis.png" alt="constructor-dis"></p>
<p>因而引出了第三种继承方法——组合继承</p>
<h3 id="方法三：-组合继承"><a href="#方法三：-组合继承" class="headerlink" title="方法三： 组合继承"></a>方法三： 组合继承</h3><p>组合继承是将<strong>类式继承</strong>和<strong>构造函数继承</strong>组合起来实现继承的一种方式。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">// 组合继承</span><br><span class="line"><span class="keyword">function</span> SuperClass(name)&#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.books = [<span class="string">'JavaScrpt'</span>, <span class="string">'html'</span>, <span class="string">'css'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperClass.prototype= &#123;</span><br><span class="line">    getName: <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        console.log(this.name);</span><br><span class="line">    &#125;,</span><br><span class="line">    showBooks: <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        console.log(this.books);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> SubClass(name, time)&#123;</span><br><span class="line">    // 调用父类构造函数</span><br><span class="line">    SuperClass.call(this, name);</span><br><span class="line"></span><br><span class="line">    this.time = time;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SubClass.prototype = new SuperClass();</span><br><span class="line"></span><br><span class="line">SubClass.prototype.getTime = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    console.log(this.time);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var instance1 = new SubClass(<span class="string">'js book'</span>, 2010);// 调用父类构造函数</span><br><span class="line">instance1.books.push(<span class="string">"Java"</span>);</span><br><span class="line">instance1.showBooks();</span><br><span class="line">instance1.getName();</span><br><span class="line">instance1.getTime();</span><br><span class="line"></span><br><span class="line">var instance2 = new SubClass(<span class="string">'css book'</span>, 2021);</span><br><span class="line">instance2.showBooks();</span><br><span class="line">instance2.getName();</span><br><span class="line">instance2.getTime();</span><br></pre></td></tr></table></figure></p>
<p><img src="/img/combine-inherit.png" alt="combine-inherit"></p>
<p>组合继承解决了类式继承和构造函数继承存在的问题，但仍然不是完美的继承方法，因为在组合继承中<strong>调用了两次父类构造函数</strong>，在使用构造函数继承时执行了一遍父类的构造函数，而在实现子类原型的类式继承时又调用了一遍父类构造函数。</p>
<p>最完美的继承方法是——寄生组合式继承，在学习寄生组合式继承之前，我们需要了解原型式继承、寄生式继承方法的实现。</p>
<h3 id="方法四：-原型式继承"><a href="#方法四：-原型式继承" class="headerlink" title="方法四： 原型式继承"></a>方法四： 原型式继承</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// 原型式继承</span><br><span class="line"><span class="keyword">function</span> inheritObject(o)&#123;</span><br><span class="line">    // 声明一个过渡对象</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">F</span></span>()&#123;&#125;;</span><br><span class="line">    // 过渡对象的原型继承父对象</span><br><span class="line">    F.prototype = o;</span><br><span class="line">    // 返回过渡对象的实例，该实例的原型继承了父对象</span><br><span class="line">    <span class="built_in">return</span> new F();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var book = &#123;</span><br><span class="line">    name: <span class="string">"js book"</span>,</span><br><span class="line">    alikeBook: [<span class="string">"css book"</span>, <span class="string">"html book"</span>]</span><br><span class="line">&#125;</span><br><span class="line">var newBook = inheritObject(book);</span><br><span class="line">newBook.name = <span class="string">"ajax book"</span>;</span><br><span class="line">newBook.alikeBook.push(<span class="string">"xml book"</span>);</span><br><span class="line"></span><br><span class="line">var otherBook = inheritObject(book);</span><br><span class="line">otherBook.name = <span class="string">"flash book"</span>;</span><br><span class="line">otherBook.alikeBook.push(<span class="string">"as book"</span>);</span><br><span class="line"></span><br><span class="line">// 存在同类式继承一样的问题：共享属性</span><br><span class="line">console.log(newBook.name);</span><br><span class="line">console.log(newBook.alikeBook);</span><br><span class="line">console.log(otherBook.name);</span><br><span class="line">console.log(otherBook.alikeBook);</span><br><span class="line">console.log(book.name);</span><br><span class="line">console.log(book.alikeBook);</span><br></pre></td></tr></table></figure>
<p><img src="/img/prototype-inherit.png" alt="prototype-inherit"></p>
<p>原型式继承引入一个<strong>过渡对象</strong>，通过过渡对象的原型继承父对象，返回过渡对象的实例来实现继承。<br>原型式继承是对<strong>类式继承的一次封装</strong>，所以类式继承的问题在原型式继承中也会出现。</p>
<h3 id="方法五：-寄生式继承"><a href="#方法五：-寄生式继承" class="headerlink" title="方法五： 寄生式继承"></a>方法五： 寄生式继承</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">// 寄生式继承——对原型继承的第二次封装</span><br><span class="line"><span class="keyword">function</span> inheritObject(o)&#123;</span><br><span class="line">    // 声明一个过渡对象</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">F</span></span>()&#123;&#125;;</span><br><span class="line">    // 过渡对象的原型继承父对象</span><br><span class="line">    F.prototype = o;</span><br><span class="line">    // 返回过渡对象的实例，该实例的原型继承了父对象</span><br><span class="line">    <span class="built_in">return</span> new F();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var book = &#123;</span><br><span class="line">    name: <span class="string">"js book"</span>,</span><br><span class="line">    alikeBook: [<span class="string">"css book"</span>, <span class="string">"html book"</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 二次封装 优点：对继承的对象进行了拓展</span><br><span class="line"><span class="keyword">function</span> createBook(obj)&#123;</span><br><span class="line">    var o = new inheritObject(obj);</span><br><span class="line">    // 拓展新对象</span><br><span class="line">    o.getName = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        console.log(this.name);</span><br><span class="line">    &#125;;</span><br><span class="line">    // 返回拓展后的新对象</span><br><span class="line">    <span class="built_in">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line">var newBook = createBook(book);</span><br><span class="line">var otherBook = createBook(book);</span><br><span class="line">newBook.getName();</span><br><span class="line">console.log(newBook.alikeBook);</span><br><span class="line">newBook.alikeBook.push(<span class="string">'Java'</span>);</span><br><span class="line">console.log(otherBook.alikeBook);</span><br></pre></td></tr></table></figure>
<p><img src="/img/parastic-inherit.png" alt="parastic-inherit"></p>
<p>寄生式继承是对<strong>原型式继承的第二次封装</strong>，并且在这第二次封装过程中对继承的对象进行了拓展。<br>仍然存在属性共享的问题。</p>
<h3 id="方法六：-终极继承者——寄生组合式继承"><a href="#方法六：-终极继承者——寄生组合式继承" class="headerlink" title="方法六： 终极继承者——寄生组合式继承"></a>方法六： 终极继承者——寄生组合式继承</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">// 寄生组合式继承：寄生式继承＋构造函数继承</span><br><span class="line"><span class="keyword">function</span> inheritObject(o)&#123;</span><br><span class="line">    // 声明一个过渡对象</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">F</span></span>()&#123;&#125;;</span><br><span class="line">    // 过渡对象的原型继承父对象</span><br><span class="line">    F.prototype = o;</span><br><span class="line">    // 返回过渡对象的实例，该实例的原型继承了父对象</span><br><span class="line">    <span class="built_in">return</span> new F();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 处理的不是对象，而是类的原型</span><br><span class="line"><span class="keyword">function</span> inheritPrototype(subClass, superClass)&#123;</span><br><span class="line">    // 复制一份父类的原型副本保存在变量中</span><br><span class="line">    var p = new inheritObject(superClass.prototype);</span><br><span class="line">    // 修正因为重写子类类型导致子类的constructor属性被修改</span><br><span class="line">    p.constructor = subClass;</span><br><span class="line">    // 设置子类的原型</span><br><span class="line">    subClass.prototype = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> SuperClass(name)&#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.colors = [<span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"yellow"</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperClass.prototype.getName = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    console.log(this.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> SubClass(name, time)&#123;</span><br><span class="line">    SuperClass.call(this, name);</span><br><span class="line">    this.time = time;</span><br><span class="line">&#125;</span><br><span class="line">inheritObject(SubClass, SuperClass);</span><br><span class="line"></span><br><span class="line">SubClass.prototype.getTime = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    console.log(this.time);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Test</span><br><span class="line">var instance1 = new SubClass(<span class="string">'js book'</span>, 2014);</span><br><span class="line">var instance2 = new SubClass(<span class="string">'css book'</span>, 2020);</span><br><span class="line">instance1.colors.push(<span class="string">"grown"</span>);</span><br><span class="line">console.log(instance1.colors);</span><br><span class="line">console.log(instance2.colors);</span><br><span class="line">instance1.getTime();</span><br><span class="line">instance2.getTime();</span><br></pre></td></tr></table></figure>
<p><img src="/img/parastic-combine.png" alt="parastic-combine"></p>
<p>寄生组合式继承是将<strong>寄生式继承</strong>和<strong>构造函数继承</strong>组合在一起的继承方法。</p>
<p>通过寄生式继承重新继承<strong>父类的原型</strong>。我们继承的仅仅是父类的原型，不再需要调用父类的构造函数。因为在构造函数继承中我们已经调用了父类的构造函数，所以我们需要的就是父类的原型对象的一个<strong>副本</strong>，而这个副本我们通过<strong>原型继承</strong>，即<strong>inheritObject()方法</strong>便可得到。因为对父类原型对象复制得到的复制对象p中的<strong>constructor</strong>指向的不是<strong>subClass子类对象</strong>，因此寄生式继承中要对复制对象p做一次增强，修复<strong>constructor指向不正确的问题</strong>，最后将得到的复制对象p赋值给子类的原型，这样，子类的原型就继承了父类的原型并且没有执行父类的构造函数。</p>
<p>寄生组合式继承是JavaScript实现继承的<strong>终极继承方式</strong>，也就是说，使用寄生组合式继承可以解决类式继承共享属性的问题、构造函数继承无法继承原型prototype上的属性的问题以及组合继承调用两次父类构造函数的问题。但是寄生组合式继承也比较不好理解，我已经在代码部分都写上了注释，供大家参考理解～</p>
<h2 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h2><p>当前流行的用于继承单对象属性的extends方法，是通过对对象中<strong>属性的复制</strong>来实现的。<br>JavaScript也可以使用属性复制的方式来实现多继承：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 多继承——对对象中的属性的一个复制过程</span><br><span class="line">Object.prototype.mix = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    var i = 0,</span><br><span class="line">        len = arguments.length,</span><br><span class="line">        arg;</span><br><span class="line">    <span class="keyword">for</span>(; i &lt; len; i++)&#123;</span><br><span class="line">        arg = arguments[i];</span><br><span class="line">        <span class="keyword">for</span>(var property <span class="keyword">in</span> arg)&#123;</span><br><span class="line">            this[property] = arg[property];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>多态通俗来说就是<strong>同一个方法多种调用方式</strong>。在JavaScript中通过对传入的参数进行判断来实现多种调用方式。如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 多态</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">add</span></span>()&#123;</span><br><span class="line">    var arg = arguments,</span><br><span class="line">        len = arg.length;</span><br><span class="line">    switch(len)&#123;</span><br><span class="line">        <span class="keyword">case</span> 0:</span><br><span class="line">            <span class="built_in">return</span> 10;</span><br><span class="line">        <span class="keyword">case</span> 1:</span><br><span class="line">            <span class="built_in">return</span> 10 + arg[0];</span><br><span class="line">        <span class="keyword">case</span> 2:</span><br><span class="line">            <span class="built_in">return</span> arg[0] + arg[1];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Test</span><br><span class="line">console.log(add());</span><br><span class="line">console.log(add(5));</span><br><span class="line">console.log(add(1, 7));</span><br></pre></td></tr></table></figure></p>
<p><img src="/img/polymorphism.png" alt="polymorphism"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>封装、继承</strong>与<strong>多态</strong>是面向对象中的重要特性，从JavaScript的角度上实现这三个特性，让我感受到JavaScript的灵活与强大。因为本学期上了伟帅的设计模式的课，对设计模式颇有兴趣，接下来我将会学习<strong>JavaScript中的设计模式</strong>，并将学习过程记录下来～</p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript之继承 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[webpack，一个广泛应用的模块打包器（二）——资源管理模块]]></title>
      <url>/2017/11/20/webpack-guide/</url>
      <content type="html"><![CDATA[<blockquote>
<p>继上一篇博文<a href="http://qiuruolin.cn/2017/11/03/webpack/" target="_blank" rel="noopener">webpack，一个广泛应用的模块打包器（一）——概念篇</a>完成之后，时隔一段时间没有学习webpack了，主要是最近有点小忙耽搁了。此篇博文主要是作为webpack的学习指南，理解和掌握webpack提供的各种工具和特性，主要目的是想将此次的学习过程记录下来，以便进行后续的深入学习，如果在理解上有偏差的话，还请大家不吝赐教～</p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先需要你下载安装<strong>node.js</strong> <a href="http://nodejs.cn/download/" target="_blank" rel="noopener">还没有下载安装？戳这里进入Node.js中文网进行下载安装</a>，在使用webpack的过程中我们需要大量的使用node中的<strong>npm</strong>包管理工具，npm主要的使用场景有：</p>
<ul>
<li>用户可以在npm服务器上下载别人编写的第三方包到本地使用;</li>
<li>用户可以在npm服务器上下载并安装别人编写的命令行程序到本地使用;</li>
<li>还可以将自己编写的包或命令行程序上传到npm服务器供他人使用。</li>
</ul>
<a id="more"></a>
<p>这里建议大家可以下载安装一下cnpm淘宝npm镜像，因为npm安装插件是从国外服务器下载，受网络影响大，可能出现异常，使用cnpm的话可以在一定程度上提高我们模块的下载安装速度<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p>
<h3 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --global webpack</span><br></pre></td></tr></table></figure>
<p>全局安装将使webpack在全局环境下可用，但不推荐全局安装 webpack。这会将你项目中的 webpack 锁定到指定版本，并且在使用不同的 webpack 版本的项目中，可能会导致构建失败。</p>
<h3 id="本地安装"><a href="#本地安装" class="headerlink" title="本地安装"></a>本地安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack</span><br></pre></td></tr></table></figure>
<p>对于大多数项目，我们建议本地安装。这可以使我们在引入破坏式变更的依赖时，更容易分别升级项目。通常，webpack 通过运行一个或多个 npm scripts，会在本地 node_modules 目录中查找安装的 webpack。</p>
<h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><p>为了后续更好的进行知识点的演示，我们先进行简单的项目准备。我在常用的工作目录下新建了一个名为<strong>webpack-blog</strong>的文件夹。命令行进入<strong>webpack-blog</strong>的工作目录执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//初始化并创建package.json文件</span><br><span class="line">$ npm init </span><br><span class="line">//在项目中安装webpack依赖包</span><br><span class="line">$ cnpm install --save-dev webpack</span><br></pre></td></tr></table></figure></p>
<p>在根目录下创建名为<strong>webpack.config.js</strong>的文件以及我们的入口文件<strong>/src/main.js</strong>文件，<strong>webpack.config.js</strong>是我们这次主要的文件，是webpack的配置文件。<br>构建好工作目录后，我们来根据上一节简述过的webpack核心知识来简单使用一下webpack。<br>首先，我们在src目录下的<strong>main.js</strong>文件中编写简单的js代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(<span class="string">"Welcome to your first webpack test!"</span>);</span><br></pre></td></tr></table></figure></p>
<p>接着，我们来到<strong>webpack.config.js</strong>文件，并设置webpack打包所需的入口起点以及输出文件配置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var path = require(<span class="string">'path'</span>);</span><br><span class="line">var webpack = require(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./src/main.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">        filename: <span class="string">'webpack.bundle.js'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>简单介绍一下上述代码，<strong>entry</strong>是模块打包的入口起点，它指示webpack根据<strong>src</strong>目录下的<strong>main.js</strong>文件来构建工程的依赖图；<strong>require()</strong>是node.js中常用的一个导入模块的操作，<strong>path.resolve()</strong>是获取绝对路径的方法，<strong>__dirname</strong> 用于获取当前文件所在目录的完整目录名。此代码用于查找<strong>dist</strong>文件夹，如果目录下没有<strong>dist</strong>文件夹则新建，并将通过打包创建后的<strong>webpack.bundle.js</strong>文件放入<strong>dist</strong>文件夹中。</p>
<p>接着，我们执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ webpack</span><br></pre></td></tr></table></figure></p>
<p>命令，对工程进行打包构建，执行成功后，我们可以在根目录下看到新建的dist文件夹下有一个新建的<strong>webpack.bundle.js</strong>文件，有点绕～</p>
<p>最后，我们在<strong>src</strong>目录下新建一个名为<strong>index.html</strong>的文件，并以<strong>script</strong>标签的形式引入生成的<strong>webpack.bundle.js</strong>文件，在浏览器中打开index.html，你会发现页面上空空如也，什么都没有～别着急，打开浏览器的控制台，你可以看到在控制台中输出了<strong>“Welcome to your first webpack test!”</strong>，我们对webpack的第一次简单应用就成功啦。</p>
<p>当然这只是一个超简单的例子，接下来我们将对这个例子进行扩充，进而展示webpack强大的功能。</p>
<h2 id="管理资源"><a href="#管理资源" class="headerlink" title="管理资源"></a>管理资源</h2><h3 id="加载CSS"><a href="#加载CSS" class="headerlink" title="加载CSS"></a>加载CSS</h3><p>为了从 JavaScript 模块中 import 一个 CSS 文件，你需要在 module 配置中 安装并添加 style-loader 和 css-loader：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install --save-dev style-loader css-loader</span><br></pre></td></tr></table></figure></p>
<p>安装成功后可以在package.json文件中的<strong>devDependencies</strong>项中看到新安装的<strong>style-loader</strong>和<strong>css-loader</strong>模块。<br>接着，我们在<strong>webpack.config.js</strong>文件中配置模块的使用规则：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">test</span>: /\.css$/,</span><br><span class="line">            use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>简单介绍以上代码，<strong>test</strong>用于识别出应该被对应的loader进行转换的文件，以上代码表示loader需要识别<strong>.css</strong>为后缀的文件，<strong>use</strong>属性转换这些文件，从而使其能够被添加到依赖图中（并且最终添加到 bundle 中）。</p>
<p>下一步，我们尝试一下在项目<strong>src</strong>目录下添加<strong>style.css</strong>文件，并将其导入我们的入口文件<strong>main.js</strong>中<br>我们修改<strong>main,js</strong>文件中的内容，以便于在页面中更直观地看到效果。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var element = document.createElement(<span class="string">'div'</span>);</span><br><span class="line">element.setAttribute(<span class="string">"class"</span>, <span class="string">"hello"</span>);</span><br><span class="line">element.innerHTML = <span class="string">"Welcome to your first webpack test!"</span>;</span><br><span class="line">document.body.appendChild(element);</span><br></pre></td></tr></table></figure></p>
<p>此时经过<strong>$ webpack</strong>命令打包后，在浏览器打开<strong>index.html</strong>文件可以看到，页面结构为<br><img src="/img/main_html.png" alt="main_html"><br>页面效果为：<br><img src="/img/main_result.png" alt="main_result"></p>
<p>接下来我们在创建的<strong>style.css</strong>文件中写入简单的样式来验证webpack加载CSS的功能<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.hello&#123;</span><br><span class="line">    color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在<strong>main.js</strong>文件中引入<strong>style.css</strong>文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import <span class="string">'./style.css'</span>;</span><br></pre></td></tr></table></figure></p>
<p>再次使用<strong>$ webpack</strong>命令打包后，我们在浏览器中打开<strong>index.html</strong>文件，我们可以看到Welcome to your first webpack test!输出为红色。<br><img src="/img/main_red.png" alt="main_red"></p>
<p>查看页面的head标签，可以发现页面已经包含了我们在<strong>main.js</strong>文件中导入的<strong>style.css</strong>文件。<br><img src="/img/main_head.png" alt="main_head"></p>
<h3 id="加载图片"><a href="#加载图片" class="headerlink" title="加载图片"></a>加载图片</h3><p>使用 file-loader，我们可以轻松地将页面中需要的背景图片或者图标混合到 CSS 中，首先还是要安装模块依赖包：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install --save-dev file-loader</span><br></pre></td></tr></table></figure></p>
<p>同样的，我们需要在<strong>webpack.config.js</strong>文件中配置应用规则：<br><img src="/img/file-loader.png" alt="file-loader"></p>
<p>此段规则表明程序可以加载以<strong>.png .svg .jpg .gif</strong>为后缀名的文件。<br>我们可以直接在<strong>style.css</strong>文件中添加<strong>background</strong>样式来引入图片，为了让背景图片完整地显示出来，我们为<strong>hello</strong>这个div设置了300px的高度<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.hello&#123;</span><br><span class="line">	height: 300px;</span><br><span class="line">    color: red;</span><br><span class="line">    background: url(<span class="string">'./logo.png'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>重新执行<strong>$ webpack</strong>命令，我们可以看到页面效果为：<br><img src="/img/main-logo-re.png" alt="main-logo-re"></p>
<p>图片稀缺，就拿了一张之前工程中现有的vue框架的logo来用～<br>如果你检查img元素，你将看到实际的文件名已更改为像 82b9c7a5a3f405032b1db71a25f67021.png 一样。这意味着 webpack 在 src 文件夹中找到我们的文件，并成功处理过它了！</p>
<h3 id="加载字体"><a href="#加载字体" class="headerlink" title="加载字体"></a>加载字体</h3><p> 加载字体与加载图片相同，也使用的是<strong>file-loader</strong>来加载字体文件，加载字体使用的正则规则如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test</span>: /\.(woff|woff2|eot|ttf|otf)$/</span><br></pre></td></tr></table></figure></p>
<p>与加载图片文件相同，加载字体需要在<strong>css</strong>文件中引入字体文件，可以通过一个 @font-face 声明引入。用法如下：<br><img src="/img/font-loader.png" alt="font-loader"></p>
<h3 id="加载数据"><a href="#加载数据" class="headerlink" title="加载数据"></a>加载数据</h3><p>在我们实际运用中，不仅仅要加载图片及字体文件，还可能需要加载有用的资源还有数据，如 JSON 文件，CSV、TSV 和 XML。JSON 支持实际上是内置的，也就是说 import Data from ‘./data.json’ 默认将正常运行。而要导入 CSV、TSV 和 XML类型的数据，就需要我们安装<strong>csv-loader</strong>和<strong>xml-loader</strong>模块来进行加载数据。<br>首先，我们还是需要在项目中安装相关模块：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install --save-dev csv-loader xml-loader</span><br></pre></td></tr></table></figure></p>
<p>接着，我们同样需要在<strong>webpack.config.js</strong>文件中配置相关的应用规则，规则如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">    <span class="built_in">test</span>: /\.(csv|tsv)$/,</span><br><span class="line">    use: [<span class="string">'csv-loader'</span>]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">test</span>: /\.xml$/,</span><br><span class="line">    use: [<span class="string">'xml-loader'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>接下来，我们在<strong>src</strong>目录下添加名为<strong>data.xml</strong>的数据文件，<strong>data.xml</strong>内容如下：<br><img src="/img/data_xml.png" alt="data_xml"></p>
<p>我们在<strong>main.js</strong>文件中解析<strong>data.xml</strong>文件中的数据，主要增加以下两行代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import Data from <span class="string">'./data.xml'</span>;</span><br><span class="line">console.log(Data);</span><br></pre></td></tr></table></figure></p>
<p>再次执行<strong>$ webpack</strong>命令后，再次在浏览器上打开<strong>index.html</strong>文件，我们可以在控制台输出了<strong>data.xml</strong>文件解析后的数据：<br><img src="/img/data_result.png" alt="data_result"></p>
<h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><h3 id="Source-Map"><a href="#Source-Map" class="headerlink" title="Source Map"></a>Source Map</h3><p>当 webpack 打包源代码时，可能会很难追踪到错误和警告在源代码中的原始位置。例如，如果将三个源文件（a.js, b.js 和 c.js）打包到一个 bundle（bundle.js）中，而其中一个源文件包含一个错误，那么堆栈跟踪就会简单地指向到 bundle.js。这并通常没有太多帮助，因为你可能需要准确地知道错误来自于哪个源文件。<br>为了更容易地追踪错误和警告，JavaScript 提供了 source map 功能，将编译后的代码映射回原始源代码。如果一个错误来自于 b.js，source map 就会明确的告诉你。<br>我们只需要在<strong>webpack.config.js</strong>文件中写入以下代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">devtool: <span class="string">'inline-source-map'</span></span><br></pre></td></tr></table></figure></p>
<p>就可以追踪源文件中错误和警告的功能。</p>
<h3 id="使用观察模式"><a href="#使用观察模式" class="headerlink" title="使用观察模式"></a>使用观察模式</h3><p>根据此博文一步一步构建下来的萌友会发现，每次修改源文件后，都要重新使用<strong>$ webpack</strong>命令对文件重新进行打包构建，这在一定程度上增加了我们的重复工作。使用观察模式，你可以指示 webpack “watch” 依赖图中的所有文件以进行更改。如果其中一个文件被更新，代码将被重新编译，所以你不必手动运行整个构建。<br>你需要在<strong>package.json</strong>文件中引入执行命令：<br><img src="/img/package-watch.png" alt="package-watch"></p>
<p>接着，你可以在命令行中执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run watch</span><br></pre></td></tr></table></figure></p>
<p>执行成功后，你会看到 webpack 编译代码，然而却不会退出命令行。这是因为 script 脚本还在观察文件，此时修改<strong>main.js</strong>文件的内容，你会发现不需要重新手动构建程序，代码已经被重新编译了。</p>
<h3 id="使用webpack-dev-server"><a href="#使用webpack-dev-server" class="headerlink" title="使用webpack-dev-server"></a>使用<strong>webpack-dev-server</strong></h3><p>webpack-dev-server 提供了一个简单的 web 服务器，能够实时重新加载。<br>首先，我们需要下载安装模块<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install --save-dev webpack-dev-server</span><br></pre></td></tr></table></figure></p>
<p>安装成功后，我们需要在<strong>webpack.config.js</strong>文件中告诉开发服务器，去哪里加载文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">   contentBase: <span class="string">'./dist'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p> 以上配置告知 webpack-dev-server，在 localhost:8080 下建立服务，将 dist 目录下的文件，作为可访问文件。<br> 接着，让我们在<strong>package.json</strong>文件中添加一个 script 脚本，可以直接运行开发服务器：<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"start"</span>: <span class="string">"webpack-dev-server --open"</span></span><br></pre></td></tr></table></figure></p>
<p> 现在，我们在命令行中运行<strong>$ npm start</strong>，就会看到浏览器自动加载页面。如果现在修改和保存任意源文件，web 服务器就会自动重新加载编译后的代码。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>webpack的学习时间跨度很长，webpack要学习的东西很多，继续加油吧～</p>
]]></content>
      
        <categories>
            
            <category> 打包工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[webpack，一个广泛应用的模块打包器（一）——概念篇]]></title>
      <url>/2017/11/03/webpack/</url>
      <content type="html"><![CDATA[<blockquote>
<p>鉴于我在学习的过程使用webpack的频率较高，所以想着要记录一下webpack的一些核心的知识点，此博文涉及的知识点可能不深，但涵盖了webpack的主要内容，主要目的是想将此次的学习过程记录下来，以便进行后续的深入学习，如果在理解上有偏差的话，还请大家不吝赐教～</p>
</blockquote>
<h2 id="概念篇"><a href="#概念篇" class="headerlink" title="概念篇"></a>概念篇</h2><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><p>webpack 是一个现代JavaScript应用程序的模块打包器。当webpack 处理应用程序时，它会递归地构建一个依赖关系图，其中包含应用程序需要的每个模块，然后将所有这些模块打包成少量的bundle - 通常只有一个，由浏览器加载。在开始之前，我们需要先理解四个核心概念：入口(entry)、输出(output)、loader、插件(plugins)。</p>
<a id="more"></a>
<h3 id="入口-Entry"><a href="#入口-Entry" class="headerlink" title="入口(Entry)"></a>入口(Entry)</h3><p>webpack创建应用程序所依赖的关系图时，图的起点就是我们的入口起点。入口起点告诉webpack从哪里开始，可以认为是app的第一个启动文件。</p>
<ul>
<li><p>单入口语法，用法：entry: string|Array<string></string></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    entry: <span class="string">'.src/app.js'</span> //将src目录下的app.js文件作为入口文件</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>对象语法，用法：entry: {[entryChunkName: string]: string|Array<string>}<br>对象语法常用于：多页面应用程序，如</string></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    pageOne: <span class="string">'./src/pageOne/index.js'</span>,</span><br><span class="line">    pageTwo: <span class="string">'./src/pageTwo/index.js'</span>,</span><br><span class="line">    pageThree: <span class="string">'./src/pageThree/index.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>表面上告诉我们，webpack需要创建3个依赖图，这些依赖图彼此之间完成分离，互相独立的。由于入口起点增多，多页应用能够复用入口起点之间的大量代码/模块，从而可以极大地从这些技术中受益。</p>
<h3 id="出口-Output"><a href="#出口-Output" class="headerlink" title="出口(Output)"></a>出口(Output)</h3><p>将所有文件归拢后，我们需要告诉webpack<strong>如何处理这些归拢在一起的文件</strong>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const path = require(<span class="string">'path'</span>); //引入path对象</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: <span class="string">'.src/app.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'webpack.bundle.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p><strong>多个入口起点</strong>：出口处应该使用占位符来确保每个文件具有唯一的名称。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">  	app: __dirname + <span class="string">'.src/app.js'</span>,</span><br><span class="line">  	search: __dirname + <span class="string">'./src/search.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: __dirname + <span class="string">'/dist'</span>,</span><br><span class="line">    filename: <span class="string">'bundle-[name].js'</span> //dist目录下将生成<span class="string">"bundle-app.js"</span>和<span class="string">"bundle-search.js"</span>文件</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>我们通过output.filename和output.path属性，来告诉输出文件的名称以及路径。</p>
<h3 id="Loader"><a href="#Loader" class="headerlink" title="Loader"></a>Loader</h3><p>webpack把每个文件(.css, .html, .less, .scss, .jpg等)都作为模块处理，然而 webpack 自身只理解 JavaScript。loader 可以使你在 import 或”加载”模块时预处理文件。<br><strong>loader在文件被添加到依赖图中时，将文件转换为模块。</strong></p>
<ul>
<li>识别出应该被对应的loader进行转换的文件。(test属性)</li>
<li>转换这些文件，从而使其能够被添加到依赖图中（并且最终添加到 bundle 中）。(use属性)</li>
</ul>
<p>在使用前，我们需要提前安装相对应的loader，如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install --save-dev vue-loader</span><br></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const path = require(<span class="string">'path'</span>); //引入path对象</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: <span class="string">'.src/app.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'webpack.bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123; <span class="built_in">test</span>: /\.vue$/,loader: <span class="string">'vue-loader'</span> &#125; //用来解析vue后缀的文件</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>在应用程序中，我们有三种使用loader的方法：</p>
<ul>
<li>配置（推荐）：在<strong>webpack.config.js</strong>文件中指定loader。</li>
<li><p>内联：在每个 import 语句中显式指定 loader，如：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import Styles from <span class="string">'style-loader!css-loader?modules!./styles.css'</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>CLI：在 shell 命令中指定它们，如：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack --module-bind jade-loader --module-bind <span class="string">'css=style-loader!css-loader'</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="插件-Plugins"><a href="#插件-Plugins" class="headerlink" title="插件(Plugins)"></a>插件(Plugins)</h3><p>由于loader仅在每个文件的基础上执行转换，而插件更常用于（但不限于）在打包模块的 “compilation” 和 “chunk” 生命周期执行操作和自定义功能。想要使用一个插件，你只需要 require() 它，然后把它添加到 plugins 数组中，多数插件可以通过选项(option)自定义。插件目的在于解决loader无法实现的其他事。<br>由于插件可以携带参数/选项，你必须在webpack配置中，向plugins属性传入 new 实例。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">const HtmlWebpackPlugin = require(<span class="string">'html-webpack-plugin'</span>); //通过 npm 安装</span><br><span class="line">const webpack = require(<span class="string">'webpack'</span>); //访问内置的插件</span><br><span class="line">const path = require(<span class="string">'path'</span>); //引入path对象</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: <span class="string">'.src/app.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'webpack.bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123; <span class="built_in">test</span>: /\.vue$/,loader: <span class="string">'vue-loader'</span> &#125; //用来解析vue后缀的文件</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">  	new webpack.optimize.UglifyJsPlugin(),</span><br><span class="line">    new HtmlWebpackPlugin(&#123;template: <span class="string">'./src/index.html'</span>&#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h3 id="模块-Modules"><a href="#模块-Modules" class="headerlink" title="模块(Modules)"></a>模块(Modules)</h3><p>在模块化编程中，开发者将程序分解成离散功能块，并称之为模块，每个模块具有比完整程序更小的接触面，使得校验、调试、测试轻而易举。<br>对比Node.js模块，webpack模块能够以各种方式表达它们的依赖关系，如：</p>
<ul>
<li>ES2015 import语句</li>
<li>CommonJS require()语句</li>
<li>AMD define和require语句</li>
<li>css/sass/less 文件中的 @import 语句</li>
<li>样式(url(…))或 HTML 文件img标签中的图片链接</li>
</ul>
<p>webpack 通过 loader 可以支持各种语言和预处理器编写模块。</p>
<h3 id="模块解析"><a href="#模块解析" class="headerlink" title="模块解析"></a>模块解析</h3><p>resolver是一个库，用于帮助找到模块的绝对路径。<br>使用enhanced-resolve，webpack 能够解析三种文件路径：</p>
<ul>
<li>绝对路径<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import <span class="string">"C:\\Users\\user\\file"</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>由于我们已经取得了文件的绝对路径，因此不需要进一步在做解析。</p>
<ul>
<li>相对路径<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import <span class="string">"../src/file1"</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>在这种情况下，使用import或require的资源文件所在的目录被认为是上下文目录，在import/require中给定的相对路径，会添加此上下文路径，以产生模块的绝对路径。</p>
<ul>
<li>模块路径<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import <span class="string">"module/lib/file"</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>模块将在resolve.modules中指定的所有目录内搜索。 </p>
<h3 id="构建目标-Targets"><a href="#构建目标-Targets" class="headerlink" title="构建目标(Targets)"></a>构建目标(Targets)</h3><p>因为服务器和浏览器代码都可以用JavaScript编写，所以webpack提供了多种构建目标。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  target: <span class="string">'node'</span> //webpack会编译为用于「类Node.js」环境</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p><strong>多个Target</strong>：尽管webpack不支持向target传入多个字符串，你可以通过打包两份分离的配置来创建同构的库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">const path = require(<span class="string">'path'</span>);</span><br><span class="line">const serverConfig = &#123;</span><br><span class="line">  target: <span class="string">'node'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'lib.node.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">  //…</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const clientConfig = &#123;</span><br><span class="line">  target: <span class="string">'web'</span>, // 默认是 <span class="string">'web'</span>，可省略</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'lib.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">  //…</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">module.exports = [ serverConfig, clientConfig ];</span><br></pre></td></tr></table></figure></p>
<p>上面的例子将在你的dist文件夹下创建lib.js和lib.node.js文件。</p>
<h3 id="模块热替换"><a href="#模块热替换" class="headerlink" title="模块热替换"></a>模块热替换</h3><p>模块热替换功能会在应用程序运行过程中替换、添加或删除模块，而无需重新加载整个页面。主要是通过以下几种方式，来显著加快开发速度：</p>
<ul>
<li>保留在完全重新加载页面时丢失的应用程序状态。</li>
<li>只更新变更内容，以节省宝贵的开发时间。</li>
<li>调整样式更加快速 - 几乎相当于在浏览器调试器中更改样式。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>webpack概念篇就差不多结束啦，其中包含webpack中核心的几个概念以及各自的用法，接下来我将继续记录webpack管理资源的相关知识点，希望能对大家有所帮助～</p>
]]></content>
      
        <categories>
            
            <category> 打包工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[babel，一个广泛使用的转码器]]></title>
      <url>/2017/11/01/babel/</url>
      <content type="html"><![CDATA[<blockquote>
<p>随着JavaScript的飞速发展，浏览器的发展速度却不能与之相匹配，为了能够在现有的浏览器上使用js新的语法和新的数据类型，这时我们便需要一个转码器。<br>Babel是一个广泛使用的转码器，可以将ES6代码转为ES5代码。Babel能将最新标准的JavaScript代码向下编译成浏览器普遍支持的版本，实现了“源码到源码”编译。比如，Babel能将新的ES2015的箭头函数语法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const area = n =&gt; n * n;</span><br></pre></td></tr></table></figure></p>
<p>转译为<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const area = <span class="keyword">function</span> area(n)&#123;</span><br><span class="line">	<span class="built_in">return</span> n * n;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>因为在学习Vue等过程中涉及到Babel的一些知识点，所以想着大概了解一下Babel的主要内容以及基本用法，文章内容涉及不深，如果在理解和用法上有偏差的话，还请大家不吝赐教～</p>
<a id="more"></a>
<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><p>在习惯的工作目录下新建一个文件夹，我取名为<strong>babel-blog</strong>，使用命令行进入<strong>babel-blog</strong>的工作目录，执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm init // 初始化并创建package.json文件</span><br></pre></td></tr></table></figure></p>
<p>可以看到在<strong>babel-blog</strong>项目的根目录下创建了名为package.json的文件。</p>
<h3 id="安装Babel命令行工具"><a href="#安装Babel命令行工具" class="headerlink" title="安装Babel命令行工具"></a>安装Babel命令行工具</h3><p>安装babel的命令行工具的目的是为了在命令行中使用babel。babel命令行工具可以全局安装也可以本地安装，官方文档推荐本地安装，原因有2点：</p>
<ul>
<li>本地安装不同的项目可以使用不同版本的babel，你也可以单独对某个项目的babel进行升级等操作</li>
<li>每个项目单独安装的意味着对计算机环境没有依赖，便于移植</li>
</ul>
<p>这里建议大家可以下载安装一下cnpm淘宝npm镜像，因为npm安装插件是从国外服务器下载，受网络影响大，可能出现异常，使用cnpm的话可以在一定程度上提高我们模块的下载安装速度<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p>
<p>接下来我们在<strong>babel-blog</strong>项目中安装babel命令行工具<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install --save-dev babel-cli</span><br></pre></td></tr></table></figure></p>
<p>安装成功后，可以在package.json文件中看到名为<strong>babel-cli</strong>的依赖包<br><img src="/img/babel-package.png" alt="package.json"></p>
<p>本地安装的babel是不能够在直接命令行中运行的，为了在命令行中运行babel，我们可以配置package.json文件下的script选项<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"build"</span>: <span class="string">"babel src -d lib"</span></span><br></pre></td></tr></table></figure></p>
<p><img src="/img/babel-script.png" alt="package.json"></p>
<p>配置成功后，当我们在终端运行<strong>npm run build</strong>时就会在命令行执行<strong>babel src -d lib</strong>，这也意味着我们要创建一个名为src的文件夹（ps：如果现在执行的话，项目会报错，它会提示我们src不存在，因为我们除了安装了babel-cli其他都还没有做呢～）</p>
<h3 id="babelrc配置文件"><a href="#babelrc配置文件" class="headerlink" title=".babelrc配置文件"></a>.babelrc配置文件</h3><p>Babel的配置文件是.babelrc，存放在项目的根目录下。使用Babel的第一步，就是配置这个文件。该文件用来设置转码规则和插件，基本格式如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [],</span><br><span class="line">  <span class="string">"plugins"</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>presets字段设定转码规则，在这里我们需要在项目中安装ES2015的转码规则<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ES2015转码规则</span></span><br><span class="line">$ cnpm install --save-dev babel-preset-es2015</span><br></pre></td></tr></table></figure></p>
<p>然后将安装的规则加入.babelrc文件中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"presets"</span>: [<span class="string">"es2015"</span>],</span><br><span class="line">    <span class="string">"plugins"</span>: []</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<p>接下来我们在项目根目录下创建名为src的文件夹，其中创建一个名为index.js文件，我们就拿最开始的area箭头函数来进行演示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const area = n =&gt; n * n;</span><br><span class="line"></span><br><span class="line">console.log(area(4));</span><br></pre></td></tr></table></figure></p>
<p>接下来，你就可以在命令行执行<strong>npm run build</strong>命令了，执行成功后你可以发现，在根目录下生成了一个名为lib的文件夹，其中有一个index.js文件，内容就是src下index.js通过babel转码生成的代码<br><img src="/img/lib-index.png" alt="lib下index.js文件"></p>
<p>到这里我们就已经学会了使用babel来进行简单的转码功能。是不是觉得很简单呢～</p>
<h2 id="Babel扩展"><a href="#Babel扩展" class="headerlink" title="Babel扩展"></a>Babel扩展</h2><p>Babel中有很多包，常用的包有<strong>babel-node</strong>, <strong>babel-register</strong>, <strong>babel-core</strong>, <strong>babel-polyfill</strong>等，这些在实际应用中用的频率都是很高的。</p>
<h3 id="babel-node"><a href="#babel-node" class="headerlink" title="babel-node"></a>babel-node</h3><p>bable-node是babel-cli自带的命令，提供了一个支持ES6的REPL环境，它支持node的REPL环境的所有功能，而且可以直接运行ES6代码。<br>首先我们需要全局安装babel-cli。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install --save-dev -g babel-cli</span><br></pre></td></tr></table></figure></p>
<p>安装成功后，输入babel-node,PEPL环境<br><img src="/img/babel-node.png" alt="babel-node"><br>或者直接执行js文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ babel-node 文件路径/文件名.后缀</span><br></pre></td></tr></table></figure></p>
<h3 id="babel-register"><a href="#babel-register" class="headerlink" title="babel-register"></a>babel-register</h3><p>babel-register模块改写require命令，为它加上一个钩子。此后，每当使用require加载.js、.jsx、.es和.es6后缀名的文件，就会先用Babel进行转码。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install --save-dev babel-register</span><br></pre></td></tr></table></figure></p>
<p>为了方便，我直接在刚刚新建的<strong>babel-blog</strong>项目中src文件夹下新建一个register.js文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(<span class="string">"Hello babel-register!"</span>);</span><br></pre></td></tr></table></figure></p>
<p>如果我们用 node register.js 来运行它是不会使用 Babel 来编译的。所以我们需要设置 babel-register，我们在项目的根目录下创建一个名为console.js的文件，并引入babel-register以及register.js文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">require(<span class="string">"babel-register"</span>);</span><br><span class="line">require(<span class="string">"./src/register"</span>);</span><br></pre></td></tr></table></figure></p>
<p>此时执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node console.js</span><br></pre></td></tr></table></figure></p>
<p>可以发现命令行输出了register.js文件中的内容 “Hello babel-register!”。这样做可以把 Babel 注册到 Node 的模块系统中并开始编译其中 require 的所有文件。</p>
<h3 id="babel-core"><a href="#babel-core" class="headerlink" title="babel-core"></a>babel-core</h3><p>如果某些代码需要调用Babel的API进行转码，就要使用babel-core模块。<br>借用阮一峰老师的例子：(字符串转码)<br><img src="/img/babel-core.png" alt="babel-core"><br>transform方法的第一个参数是一个字符串，表示需要转换的ES6代码，第二个参数是转换的配置对象。</p>
<h3 id="babel-polyfill"><a href="#babel-polyfill" class="headerlink" title="babel-polyfill"></a>babel-polyfill</h3><p>Babel默认只转换新的JavaScript句法（syntax），而不转换新的API，为了解决这个问题，必须要使用babel-polyfill，为当前环境提供一个垫片。</p>
<h2 id="Babel与其他工具集成"><a href="#Babel与其他工具集成" class="headerlink" title="Babel与其他工具集成"></a>Babel与其他工具集成</h2><p>Babel可以与很多构建工具（如 Browserify、Grunt、Gulp、Webpack等）进行集成。<br>关于babel与Webpack构建工具的集成，在我<a href="http://localhost:4000/2017/10/25/webpack-vue/" target="_blank" rel="noopener">使用webpack搭建vue项目——入门</a>博客中就有使用到。</p>
<h3 id="集成Webpack"><a href="#集成Webpack" class="headerlink" title="集成Webpack"></a>集成Webpack</h3><ul>
<li>babel-preset-env，转译器，最常用的转译器。通过在.babelrc中配置env选项，可以让代码兼容不同版本的浏览器或者node。</li>
</ul>
<p>这里我将使用原先的<strong>babel-blog</strong>项目，并将lib文件夹，src文件夹下的文件删除仅保留开始的index.js文件，当前目录结构如下：<br><img src="/img/babel-webpack.png" alt="babel-webpack"></p>
<p>进入项目工作目录，安装webpack，babel-preset-env和babel-loader<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install --save-dev webpack</span><br><span class="line">$ cnpm install --save-dev babel-preset-env</span><br><span class="line">$ cnpm install --save-dev babel-loader</span><br></pre></td></tr></table></figure></p>
<p>安装成功后，可以在package.json文件中看到相应的依赖包。</p>
<p>接下来在根目录下创建<strong>webpack.config.js</strong>文件<br><img src="/img/webpack.config-babel.png" alt="babel-webpack"></p>
<p>entry为入口文件，我们选择当前目录下，src文件夹下的index.js文件作为入口。output为输出选项，path为输出的目录，filename为输出文件名。感兴趣的朋友们可以戳戳<a href="https://doc.webpack-china.org/guides/getting-started" target="_blank" rel="noopener">Webpack中文文档</a>进行学习哦～</p>
<p>最重要的一点：我们要记得在<strong>.babelrc</strong>文件中设定相应的转码规则哦<br><img src="/img/babel-tr.png" alt="babel-webpack"></p>
<p>在命令行执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ webpack</span><br></pre></td></tr></table></figure></p>
<p>运行成功后，可以发现在根目录下创建了名为<strong>public</strong>文件夹，以及名为<strong>index.output.js</strong>输出文件<br><img src="/img/webpack-babel-success.png" alt="babel-webpack"></p>
<p>通过集成webpack构建工具，可以将转码后的文件打包。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>写这篇博文的逻辑性可能不是很强，主要是边学习边记录，把Babel主要的知识点记录下来，作为Babel的一篇学习笔记，以便后续的深入学习，这里推荐一下阮一峰老师的 <a href="http://www.ruanyifeng.com/blog/2016/01/babel.html" target="_blank" rel="noopener">Babel入门推荐教程</a>，这篇博文里面很多知识点都来自阮一峰老师的推荐课程～</p>
<p>希望能对大家有所帮助～</p>
]]></content>
      
        <categories>
            
            <category> 转码工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> babel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用iconfont创建项目图标]]></title>
      <url>/2017/10/31/iconfont/</url>
      <content type="html"><![CDATA[<blockquote>
<p>在学习他人网站代码时，我常常会发现前端开发人员习惯使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;i class=<span class="string">"iconfont icon-time"</span>&gt;&lt;/i&gt;</span><br></pre></td></tr></table></figure></p>
<p>来生成页面的图标，这打破了我们传统的方式——将icon图标以png等图片的形式下载下来，然后通过img标签引入页面中。在刚开始接触到这种方式时，我感到不解，想要试图在css文件中找到相应类的样式设置，认为是在css中设置了背景图，找寻无果…最近想要充实一下个人博客，也就想着要把这次学习的心路历程记录下来，以供后续的深入学习。<br>初次学习可能有些地方讲解的不是很细致，还请各位不吝赐教～</p>
</blockquote>
<hr>
<h2 id="使用Iconfont的优点"><a href="#使用Iconfont的优点" class="headerlink" title="使用Iconfont的优点"></a>使用Iconfont的优点</h2><p>Iconfont其实就是指用字体文件取代图片文件，来展示图标、特殊字体等元素的一种方法。主要有以下4个优点</p>
<ul>
<li>加载文件体积小，提高加载速度<a id="more"></a></li>
<li>可以直接通过css的font-size，color修改它的大小和颜色，可以缩放多个尺寸的图标，提高图标的可复用性</li>
<li>支持一些css3对文字的效果，例如：阴影、旋转、透明度等</li>
<li>兼容低版本浏览器<br>相对于我们传统的将icon下载为图片的形式，使用iconfont确实方便不少。当我们项目要修改主色调时，iconfont只需要修改css中颜色属性即可，而传统模式则需要你重新下载，这样不仅增加了我们的开发时间，而且会让前端开发工作变得枯燥无味。</li>
</ul>
<h2 id="Iconfont使用流程"><a href="#Iconfont使用流程" class="headerlink" title="Iconfont使用流程"></a>Iconfont使用流程</h2><p>在这里我们需要使用到第三方Iconfont在线服务（例如： 阿里巴巴Iconfont平台 ），个人比较偏向于阿里巴巴Iconfont平台，而在此文中也是在阿里巴巴Iconfont平台上进行操作的。</p>
<p>首先，我们打开<a href="http://www.iconfont.cn" target="_blank" rel="noopener">阿里巴巴Iconfont平台</a>（ps:使用阿里巴巴Iconfont平台需要你有github账号或者微博账号）<br><img src="/img/iconfont.png" alt="阿里巴巴Iconfont平台"></p>
<p>接下来，我们搜索我们想要的图标，建议使用英文搜索，匹配的icon可能更多哦～<br><img src="/img/time-search.png" alt="搜索"></p>
<p>回车以后，你会看到很多有关于time的icon图标，选择你需要的那个，并添加至购物车中（如未登录的话，此时会要求你先登录）<br><img src="/img/add.png" alt="加入购物车"><br>加入成功后你可以在右上角购物车处看到你所添加的icon<br><img src="/img/add-success.png" alt="加入购物车"></p>
<p><img src="/img/success2.png" alt="加入购物车"></p>
<p>依此，你可以在项目中添加很多icon图标，这里就不一一演示了</p>
<p>接下来，我们将购物车中所有的icon图标打包在一个新建的项目中<br><img src="/img/new-project.png" alt="新建项目"><br>添加成功后，你可以看到你创建的项目中有你所添加的所有icon图标<br><img src="/img/project-success.png" alt="新建项目"></p>
<p>建议使用：生成在线链接<br><img src="/img/link.png" alt="生成链接"><br>并在css文件中通过<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@import url(<span class="string">'链接地址'</span>)</span><br></pre></td></tr></table></figure></p>
<p>引入资源<br>也可以通过点击<strong>下载至本地</strong>，将zip文件解压后其中的文件如下<br><img src="/img/zip.png" alt="新建项目"></p>
<p>接下来，就是如何在项目中使用了<br><img src="/img/project-code.png" alt="新建项目"><br>在原来的html中我使用的是传统方式，将icon以图片的形式引入<br>可以看到的效果如下<br><img src="/img/project-init.png" alt="项目初始效果"></p>
<p> ———– 下载至本地需要进行的 ———–<br>将刚刚解压的文件放置在项目的根目录下，可以对文件进行重命名，为了方便我重命名为<strong>icon-fonts</strong>，当前项目目录如下<br><img src="/img/project-ca.png" alt="项目目录"></p>
<p>接下来我们在头部引入<strong>icon-fonts</strong>中的<strong>iconfont.css</strong>文件<br><img src="/img/in.png" alt="引入"><br> ———– 华丽丽的分割线 ———–</p>
<p>并使用i标签来替换传统方式<br><img src="/img/i.png" alt="i"></p>
<p>其中<strong>iconfont</strong>是必须的类名，<strong>icon-time</strong>是你在阿里巴巴Iconfont平台创建的项目中图标所对应的类名，如下图<br><img src="/img/time.png" alt="time"><br><strong>img</strong>是我自己创建的用来定位的css类<br><img src="/img/project-re.png" alt="项目效果"><br>你会发现icon已经成功的被我们引入了，并且替换了传统的img标签</p>
<p>你可以在css中任意设置icon图标的大小以及颜色，如下：<br><img src="/img/css.png" alt="css"></p>
<p><img src="/img/re.png" alt="项目效果"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>写到这里，也差不多结束了，在这篇文章里我简单介绍了iconfont在项目中的使用，在实际运用中，你可以把项目中所需要的图标都以这种方式引入，这样在用户要求更换icon主色调时，就仅需要统一修改icon图标的颜色即可，而不需要重新下载icon图片，这样也就在一定程度上减少了项目的开发时间，提高了项目的开发质量，更重要的是前端开发人员不会因为重复无用功儿感觉枯燥无味。</p>
<p>这些只是一些小小的应用，希望能对大家有所帮助～</p>
]]></content>
      
        <categories>
            
            <category> iconfont图标 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iconfont 项目图标icon </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用webpack搭建vue项目——入门]]></title>
      <url>/2017/10/25/webpack-vue/</url>
      <content type="html"><![CDATA[<blockquote>
<p>vue以数据为驱动，是近年来比较火的一个轻量级的前后端分离的框架，前段时间学习了vue的一些基本知识，明白了vue中指令等的使用，个人觉得较难的一部分当属于使用vue进行组件化开发，在vue.js专业中文开发者社区上有不少大牛们使用vue重构的一些例子，比如豆瓣，饿了么等，大家可以clone下来自己重构一下，建议初学者在豆瓣和饿了么两个中先选择豆瓣的例子，豆瓣的例子会相对简单直观一些。<br>我在刚学习使用vue进行组件化开发时，常常会使用</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vue init webpack project-name</span><br></pre></td></tr></table></figure>
<p>来初始化一个vue项目，接着在这个初始化完成的项目中进行vue的组件化开发。我们可能明白每一个配置文件以及文件夹中的相关内容，但使用webpack构建vue项目的过程又是怎样的？这就不得而知了。<br>随着后来的学习，我开始自己慢慢使用webpack从零构建vue项目，踩了很多坑，可能也不是很深入，但是总想着能把这次过程写下来，以便后续的深入学习，初次学习可能理解以及步骤上会有偏差，还请各位不吝赐教～</p>
</blockquote>
<hr>
<h1 id="webpack构建vue项目流程"><a href="#webpack构建vue项目流程" class="headerlink" title="webpack构建vue项目流程"></a>webpack构建vue项目流程</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><a id="more"></a>
<ul>
<li>首先需要你已下载安装<strong>node.js</strong> <a href="http://nodejs.cn/download/" target="_blank" rel="noopener">还没有下载安装？戳这里进入Node.js中文网进行下载安装</a><br>在你习惯使用的工作目录下新建文件夹，在这里我新建了一个名为<strong>webpack-vue-blog</strong>的文件夹（ps:项目名称中不可以含有空格，这在初始化时会报错的～大家注意一下，建议使用-或_代替），打开你的终端，进入到webpack-vue-blog的工作目录，使用<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm init //初始化并自动创建package.json文件，npm是node.js的命令</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>接下来是一些项目的相关信息，一路按enter键就可以了，之后你可以在package.json文件中看到项目的相关信息<br><img src="/img/description.png" alt="描述"></p>
<p><img src="/img/package.png" alt="package.json文件"></p>
<p>这里建议大家可以下载安装一下cnpm淘宝npm镜像，因为npm安装插件是从国外服务器下载，受网络影响大，可能出现异常，使用cnpm的话可以在一定程度上提高我们模块的下载安装速度<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p>
<h3 id="接下来就要安装vue-webpack等相关的模块，在这里先大致介绍一下相关的命令"><a href="#接下来就要安装vue-webpack等相关的模块，在这里先大致介绍一下相关的命令" class="headerlink" title="接下来就要安装vue webpack等相关的模块，在这里先大致介绍一下相关的命令"></a>接下来就要安装vue webpack等相关的模块，在这里先大致介绍一下相关的命令</h3><ul>
<li>使用npm安装插件：命令提示符执行npm(cnpm) install <name> [-g] [–save-dev]</name></li>
<li>-g：全局安装</li>
<li>–save：将保存配置信息至package.json（package.json是nodejs项目配置文件）</li>
<li>-dev：保存至package.json的devDependencies节点，不指定-dev将保存至dependencies节点</li>
</ul>
<hr>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//安装vue</span><br><span class="line">$ cnpm install --save vue </span><br><span class="line">//安装webpack以及webpack测试服务器，默认安装是1.0版本的，所以必须指定版本号</span><br><span class="line">$ cnpm install --save-dev webpack@^2.1.0-beta.25 webpack-dev-server@^2.1.0-beta.9 </span><br><span class="line">//安装babel，一般的浏览器是不认识es6语法的，babel的作用是将ES6代码转为ES5代码，从而编译成浏览器认识的语法</span><br><span class="line">$ cnpm install --save-dev babel-core babel-loader babel-preset-es2015</span><br><span class="line">//用来解析vue的组件，.vue后缀的文件</span><br><span class="line">$ cnpm install --save-dev vue-loader vue-template-compiler</span><br><span class="line">//用来解析css</span><br><span class="line">$ cnpm install --save-dev css-loader file-loader</span><br></pre></td></tr></table></figure>
<p>需要用到的模块我们已经安装完之后，就可以开始在package.json看到我们所安装的依赖包，在<strong>webpack-vue-blog</strong>目录下也会生成名为<strong>node_modules</strong>的文件夹<br><img src="/img/package1.png" alt="package.json文件"></p>
<h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>安装了这么多的依赖包，终于要进入编码的阶段了，打开你的编辑器，这里我使用的是VS Code工具进行编码，这个工具比较小，但是要安装相关的插件，我这里不详细介绍了哈，感兴趣的萌友们可以安装使用一下。现在我们的<strong>webpack-vue-blog</strong>工程目录下只有<strong>node_modules</strong>文件夹以及<strong>package.json</strong>文件<br><img src="/img/目录.png" alt="目录"><br>接下来我们在根目录下新建<strong>src</strong>文件夹用来存放我们项目的源码，在src目录下新建<strong>App.vue</strong>以及<strong>main.js</strong>文件，其中App.vue是我们的入口页面，main.js是应用初始化入口文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//App.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">        &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">    <span class="function"><span class="title">data</span></span> () &#123;</span><br><span class="line">        <span class="built_in">return</span> &#123;</span><br><span class="line">            msg: <span class="string">'This is your first webpack-vue project!'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//main.js</span><br><span class="line">import Vue from <span class="string">'vue'</span></span><br><span class="line">import App from <span class="string">'./App.vue'</span> // 将同目录下的App.vue导入</span><br><span class="line"></span><br><span class="line">/* 实例化一个vue */</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  render: h =&gt; h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><strong>render函数是渲染一个视图，然后提供给el挂载，如果没有render那页面什么都不会出来</strong></p>
<h3 id="Vue2-0的渲染过程："><a href="#Vue2-0的渲染过程：" class="headerlink" title="Vue2.0的渲染过程："></a>Vue2.0的渲染过程：</h3><ul>
<li>Vue实例选项对象的 render 方法作为一个函数，接受传入的参数 h 函数，返回 h(App) 的函数调用结果</li>
<li>Vue 在创建 Vue 实例时，通过调用 render 方法来渲染实例的 DOM 树</li>
<li>Vue 在调用 render 方法时，会传入一个 createElement 函数作为参数，也就是这里的 h 的实参是 createElement 函数，然后 createElement 会以 APP 为参数进行调用</li>
</ul>
<hr>
<p>[官方文档]:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">render: <span class="keyword">function</span> (createElement) &#123;</span><br><span class="line">   <span class="built_in">return</span> createElement(</span><br><span class="line">     <span class="string">'h'</span> + this.level,   // tag name 标签名称</span><br><span class="line">      this.<span class="variable">$slots</span>.default // 子组件中的阵列</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>接下来我们将进入webpack部分  <a href="https://doc.webpack-china.org/guides/getting-started" target="_blank" rel="noopener">戳进来学习webpack中文文档</a>，在根目录下新建名为<strong>webpack.config.js</strong>的文件，用来进行相关的配置 <a href="https://doc.webpack-china.org/configuration/entry-context/" target="_blank" rel="noopener">webpack入口出口等核心概念中文文档</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">//webpack.config.js</span><br><span class="line">var path = require(<span class="string">'path'</span>);</span><br><span class="line">var webpack = require(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    /* 入口文件 */</span><br><span class="line">    entry: <span class="string">'./src/main.js'</span>,</span><br><span class="line">    /* 输出 */</span><br><span class="line">    output: &#123;</span><br><span class="line">        /* 输出目录，没有则新建 通过__dirname获得当前文件所在目录的完整目录名：*/</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">        /* 静态目录，可以直接从这里取文件 */</span><br><span class="line">        publicPath: <span class="string">'/dist/'</span>,</span><br><span class="line">        /* 文件名 */</span><br><span class="line">        filename: <span class="string">'build.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            /* 用来解析vue后缀的文件 */</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">test</span>: /\.vue$/,</span><br><span class="line">                loader: <span class="string">'vue-loader'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            /* 用babel来解析js文件并把es6的语法转换成浏览器认识的语法 */</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">test</span>: /\.js$/,</span><br><span class="line">                loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">                /* 排除模块安装目录的文件 */</span><br><span class="line">                exclude: /node_modules/</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们当前的项目目录为：<br><img src="/img/目录2.png" alt="目录"><br>接下来我们将进行webpack的核心功能——模块打包<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install -g webpack@^2.1.0-beta.25 //全局安装webpack，以便使用webpack命令进行打包等</span><br></pre></td></tr></table></figure></p>
<p>进入<strong>webpack-vue-blog</strong>目录下并运行命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ webpack</span><br></pre></td></tr></table></figure></p>
<p>执行完毕后你可以发现在根目录下新增了一个名为<strong>dist</strong>的文件夹，其中有个<strong>build.js</strong>文件，而这输出的文件夹名及文件名正是我们在<strong>webpack.config.js</strong>中配置好的。<br>这么久还不能看效果，急死人了，不要着急，已经快要接近尾声啦！！<br>接下来，我们在根目录下新建名为index.html的文件，并引入我们刚刚生成的build.js文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//index.html</span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0, user-scalable=0, minimum-scale=1.0, maximum-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;webpack-vue-blog&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=<span class="string">"app"</span>&gt;&lt;/div&gt;</span><br><span class="line">        &lt;script src=<span class="string">"./dist/build.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>
<p>接下来运行命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ webpack-dev-server</span><br></pre></td></tr></table></figure></p>
<p>稍微等待一会，就会提示你已经运行成功啦，并且可以通过访问localhost:8080来访问我们的第一个使用webpack构建的vue项目。<br><img src="/img/result.png" alt="效果"><br>这样我们的使用webpack构建的vue项目也算是搭建完成了。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这是自搭建个人博客网站以来着手写的第一篇博客，当然，这只是一个很简单的项目，在后续深入学习中，你会发现程序员们会将babel的相关配置保存在.babelrc配置文件中，比如：<br><img src="/img/babel.png" alt="Babel"><br>相信大家在学习babel相关教程时会了解到 <a href="http://www.ruanyifeng.com/blog/2016/01/babel.html" target="_blank" rel="noopener">Babel入门推荐教程</a></p>
<p>希望能对萌友们有所帮助～</p>
]]></content>
      
        <categories>
            
            <category> 前端框架 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
